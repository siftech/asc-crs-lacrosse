/*
 * LiteLLM API
 * Proxy Server to call 100+ LLMs in the OpenAI format  ðŸ‘‰ [```LiteLLM Admin Panel on /ui```](/ui/). Create, Edit Keys with SSO
 *
 * OpenAPI spec version: 1.27.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 7.4.0-SNAPSHOT
 */

// TODO: Fix test coverage, currently only 11% of the tests passing

import http from 'k6/http'
import { group, check } from 'k6'

function makeTestId (length) {
  let result = ''
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  const charactersLength = characters.length
  let counter = 0
  while (counter < length) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength))
    counter += 1
  }
  return 'test-' + result
}

const BASE_URL = 'http://litellm'
// Global variables should be initialized.
const authorization = `Bearer ${__ENV.LITELLM_KEY}` // eslint-disable-line
const models_list = ['gpt-4', 'gpt-4-turbo', 'claude-3-opus']

export default function () {
  // Good Tests
  group('/health/liveliness', () => {
    // Request No. 1: health_liveliness_health_liveliness_get
    {
      const url = BASE_URL + '/health/liveliness'
      const request = http.get(url)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/test', () => {
    // Request No. 1: test_endpoint_test_get
    {
      const url = BASE_URL + '/test'
      const request = http.get(url)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/', () => {
    // Request No. 1: home__get
    {
      const url = BASE_URL + '/'
      const request = http.get(url)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/health', () => {
    const model = 'gpt-4-turbo' // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: health_endpoint_health_get
    {
      const url = BASE_URL + `/health?model=${model}`
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/models', () => {
    // Request No. 1: model_list_models_get
    {
      const url = BASE_URL + '/models'
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/health/readiness', () => {
    // Request No. 1: health_readiness_health_readiness_get
    {
      const url = BASE_URL + '/health/readiness'
      const request = http.get(url)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/routes', () => {
    // Request No. 1: get_routes_routes_get
    {
      const url = BASE_URL + '/routes'
      const request = http.get(url)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/spend/users', () => {
    const userId = '1' // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: spend_user_fn_spend_users_get
    {
      const url = BASE_URL + `/spend/users?user_id=${userId}`
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/model/info', () => {
    // Request No. 1: model_info_v1_model_info_get
    {
      const url = BASE_URL + '/model/info'
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/user/new', () => {
    // Request No. 1: new_user_user_new_post
    {
      const url = BASE_URL + '/user/new'
      // TODO: edit the parameters of the request body.
      const body = { models: models_list, spend: 100, maxBudget: 100, userId: 2, teamId: 2, maxParallelRequests: 3, metadata: {}, tpmLimit: 5000, rpmLimit: 5, budgetDuration: '365d', allowedCacheControls: {}, keyAlias: 'testkey-2', duration: '365d', aliases: {}, config: {}, permissions: {}, modelMaxBudget: {}, userEmail: {}, userRole: {} }
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.post(url, JSON.stringify(body), params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/team/new', () => {
    // Request No. 1: new_team_team_new_post
    {
      const url = BASE_URL + '/team/new'
      const teamName = "test-team-1"
      // TODO: edit the parameters of the request body.
      const body = { team_alias: teamName, team_id: "18fd5e80-2a13-4812-a13a-7562d2ae2050", admins: ['testuser-1'], members: ['testuser-1'], membersWithRoles: [], metadata: {}, tpmLimit: {}, rpmLimit: {}, maxBudget: {}, models: models_list }
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.post(url, JSON.stringify(body), params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/team/info', () => {
    const teamId = "18fd5e80-2a13-4812-a13a-7562d2ae2050" // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: team_info_team_info_get
    {
      const url = BASE_URL + `/team/info?team_id=${teamId}`
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/team/delete', () => {
    // Request No. 1: new_team_team_new_post
    {
      const url = BASE_URL + '/team/delete'
      const teamName = "test-team-1"
      // TODO: edit the parameters of the request body.
      const body = { team_ids: ["18fd5e80-2a13-4812-a13a-7562d2ae2050"]}
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.post(url, JSON.stringify(body), params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/v1/models', () => {
    // Request No. 1: model_list_v1_models_get
    {
      const url = BASE_URL + '/v1/models'
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/user/info', () => {
    const userId = '1' // specify value as there is no example value for this parameter in OpenAPI spec
    const viewAll = 'false' // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: user_info_user_info_get
    {
      const url = BASE_URL + `/user/info?user_id=${userId}&view_all=${viewAll}`
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/user/get_requests', () => {
    // Request No. 1: user_get_requests_user_get_requests_get
    {
      const url = BASE_URL + '/user/get_requests'
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/key/generate', () => {
    // Request No. 1: generate_key_fn_key_generate_post
    {
      const url = BASE_URL + '/key/generate'
      // TODO: edit the parameters of the request body.
      const body = { models: models_list, spend: 0, maxBudget: 500, userId: 'test-001', teamId: 5, maxParallelRequests: 2, metadata: {}, tpmLimit: 500, rpmLimit: 50, budgetDuration: '365d', allowedCacheControls: {}, keyAlias: 'test-key-1', duration: '365d', aliases: {}, config: {}, permissions: {}, modelMaxBudget: {} }
      const params = { headers: { 'Content-Type': 'application/json', Authorization: `${authorization}`, Accept: 'application/json' } }
      const request = http.post(url, JSON.stringify(body), params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/v2/model/info', () => {
    // Request No. 1: model_info_v2_v2_model_info_get
    {
      const url = BASE_URL + '/v2/model/info'
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/spend/keys', () => {
    // Request No. 1: spend_key_fn_spend_keys_get
    {
      const url = BASE_URL + '/spend/keys'
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })

  group('/v1/model/info', () => {
    // Request No. 1: model_info_v1_v1_model_info_get
    {
      const url = BASE_URL + '/v1/model/info'
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json', Authorization: `${authorization}` } }
      const request = http.get(url, params)

      check(request, {
        'Successful Response': (r) => r.status === 200
      })
    }
  })
}
