name: Create and publish a Docker images for the CRS
permissions: read-all
# Configures this workflow to run every time a release is published
on:
  release:
    types: [published]

# There is a single job in this workflow.
jobs:
  build-and-push-image:
    runs-on:
      group: large-runners
    strategy:
      fail-fast: false
      matrix:
        # COMPETITORS: Update this list of docker files to include all images needed for your CRS
        # These images will be copied into your CRS execution environment at competition time
        # REMINDER: A CRS WILL NOT have internet access beyond iAPI and LiteLLM, so all containers images MUST be able to run without internet access.
        # You MUST include your specific private CRS repo prefix so replace `ghcr.io/aixcc-sc/crs-sandbox` with `ghcr.io/aixcc-sc/crs-XXXXXXXX` or whatever
        # your private CRS repo is called but only for containers you are adding or those container images.

        # DO NOT add version labels here. That should be managed using the Github release process in your CRS repo.
        # Please see: https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository


        include:
          - dockerfile: crs/code/docker/neo-fuzz-ccl/Dockerfile
            context: .
            image: ghcr.io/aixcc-sc/${{ github.event.repository.name }}/neo-fuzz-ccl
          - dockerfile: crs/code/docker/nix-copy/Dockerfile
            context: .
            image: ghcr.io/aixcc-sc/${{ github.event.repository.name }}/nix-copy
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: write # to push chart release and create a release (helm/chart-releaser-action)
      packages: write # needed for ghcr access
      id-token: write # needed for keyless signing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Get the commit SHA for the tag
        id: get_tag_commit
        run: |
          TAG_COMMIT_SHA=$(git rev-list -n 1 ${{ github.event.release.tag_name }})
          echo "TAG_COMMIT_SHA=${TAG_COMMIT_SHA}" >> "$GITHUB_ENV"

      - name: Get the latest commit SHA from main branch
        id: get_main_commit
        run: |
          MAIN_COMMIT_SHA=$(git rev-parse origin/main)
          echo "MAIN_COMMIT_SHA=${MAIN_COMMIT_SHA}" >> "$GITHUB_ENV"

      - name: Check if tag commit is an ancestor of the main branch
        if: ${{ !github.event.release.prerelease }} # We only care about ensuring actual release tags come from main
        id: check_ancestor
        run: |
          if git merge-base --is-ancestor "${{ env.TAG_COMMIT_SHA }}" "${{ env.MAIN_COMMIT_SHA }}"; then
            echo "The release tag commit is an ancestor of the current main branch."
          else
            echo "The release tag commit is not an ancestor of the current main branch."
            exit 1
          fi
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ matrix.image }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-manifest:
    runs-on:
      group: large-runners
    needs: build-and-push-image
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: write # to push chart release and create a release (helm/chart-releaser-action)
      packages: write # needed for ghcr access
      id-token: write # needed for keyless signing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          ORAS_VERSION="1.2.0"
          curl -LO "https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz"
          mkdir -p oras-install/
          tar -zxf oras_${ORAS_VERSION}_*.tar.gz -C oras-install/
          sudo mv oras-install/oras /usr/local/bin/
          rm -rf oras_${ORAS_VERSION}_*.tar.gz oras-install/
          curl https://mise.jdx.dev/install.sh | sh
          echo "$HOME/.local/share/mise/bin" >> "$GITHUB_PATH"
          echo "$HOME/.local/share/mise/shims" >> "$GITHUB_PATH"
          mise install

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Move sandbox/example.env to sandbox/env
        run: mv sandbox/example.env sandbox/env

      - name: Create Competition Helm Resources
        run: |
          export RELEASE_TAG=${{ github.event.release.tag_name }}
          make k8s/competition
          tar -czf kustomize.tar.gz -C sandbox/kustomize .

      - name: Push manifest to GHCR
        run: |
          VERSION_STRING=${{ github.event.release.tag_name }}
          NEW_VERSION="${VERSION_STRING#v}"
          oras push --artifact-type application/vnd.kubernetes.kustomization "ghcr.io/${{ github.repository }}/crs-manifest:${NEW_VERSION}" kustomize.tar.gz

        env:
          GITHUB_TOKEN: ${{ github.token }}
