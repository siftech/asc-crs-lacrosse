;;; -------------------------------------------------------------------------
;;; latex.lisp
;;; - stuff to auto-gen .tex documentation for global vars.
;;; -------------------------------------------------------------------------
;;; COPYRIGHT START
;;; COPYRIGHT END
;;; -------------------------------------------------------------------------

(in-package :fuzzbomb)

#|

Main usage:
In lisp from amp dir, just load this file and it will generate all the doc files in the ../../doc/manual directory

(load "latex") ;; this does it all

Note this will destroy/disrupt your CSM state

|#
;;; - $Revision: 1.4 $

;;(defvar *docpath* (make-pathname :directory "../../doc/manual" :type "tex"))
(defvar *docpath* (merge-pathnames (make-pathname :directory '(:relative :up "doc" "manual") :type "tex")
                                   (pwd)))

;;; ----------------------------------------------------------------------
;;(format t "Generating documentation files in ~A" (path-namestring *docpath*))
(format t "Generating documentation files in ~A" *docpath*)

;;; -------------------------------------------------------------------------
(defun print-emacs-latex-block (&optional (stream t))
  "Print latex-mode related emacs file-local vars."
  (format stream "%%% Local Variables:~%")
  (format stream "%%% mode: latex~%")
  (format stream "%%% TeX-master: \"main\"~%")
  (format stream "%%% End: ~%"))

;;; -------------------------------------------------------------------------
(defun find-labeled-globals (label)
  "Finds global vars with *s in their names and label in their docstring"
  (assert (stringp label) () "Must give this a string label")
  (remove-if-not #'(lambda (sym) (search label (documentation sym 'variable)))
        (apropos-list '*)))

;;; -------------------------------------------------------------------------
(defmethod print-latex-description ((c cons) &optional (stream t)
                                                (type 'variable)
                                                (trim "[CIRCA]"))
  "Prints a list in latex description list form."
  (format stream
        "\\begin{description}~%\\itemsep 0in \\topsep 0in \\parskip 0in~%")
  (my-mapcar #'print-latex-description c stream type trim)
  (format stream "\\end{description}~%"))

;;; -------------------------------------------------------------------------
;; note the string-right-trim is a bit aggressive since the "[CIRCA]" is
;; treated as a bag of characters to strip, not a string, but as long as
;; you end your docstring with "<punctuation> [CIRCA]" then it will stop
;; trimming before eating the useful stuff. :-).

(defmethod print-latex-description ((sym symbol) &optional (stream t)
                                                        (type 'variable)
                                                        (trim "[CIRCA]"))
  "Prints a symbol's type docstring in latex form (description list item)"
  (format stream "\\item[\\texttt{~A} ---] ~A~%"
        (strcat (if (keywordp sym) ":") (string-downcase (symbol-name sym)))
        (string-right-trim trim (documentation sym type))))

;;; -------------------------------------------------------------------------
(defun sort-by-symbol-name (l)
  (sort l #'string< :key #'symbol-name))

;(defun tolatex (string)
;  (

;;; -------------------------------------------------------------------------
(defun print-latex-for-globals ()
  (with-open-file (outstream (merge-pathnames *docpath* "circa-globals") :direction :output
                   :if-exists :supersede)
    (format outstream "%% Autogenerated by CIRCA's (print-latex-for-globals)~%")
    (print-latex-description
                (sort-by-symbol-name (find-labeled-globals "[CIRCA]"))
                outstream)
    (print-emacs-latex-block outstream))
  (with-open-file (outstream (merge-pathnames *docpath* "davinci-globals") :direction :output
                   :if-exists :supersede)
    (format outstream "%% Autogenerated by CIRCA's (print-latex-for-globals)~%")
    (print-latex-description
                (sort-by-symbol-name (find-labeled-globals "[DAVINCI]"))
                outstream 'variable "[DAVINCI]")
    (print-emacs-latex-block outstream))
  (with-open-file (outstream (merge-pathnames *docpath* "amp-globals") :direction :output
                   :if-exists :supersede)
    (format outstream "%% Autogenerated by CIRCA's (print-latex-for-globals)~%")
    (print-latex-description
                (sort-by-symbol-name (find-labeled-globals "[AMP]"))
                outstream 'variable "[AMP]")
    (print-emacs-latex-block outstream))
  (with-open-file (outstream (merge-pathnames *docpath* "sim-globals") :direction :output
                   :if-exists :supersede)
    (format outstream "%% Autogenerated by CIRCA's (print-latex-for-globals)~%")
    (print-latex-description
                (sort-by-symbol-name (find-labeled-globals "[SIM]"))
                outstream 'variable "[SIM]")
    (print-emacs-latex-block outstream))
  (with-open-file (outstream (merge-pathnames *docpath* "meu-globals") :direction :output
                   :if-exists :supersede)
    (format outstream "%% Autogenerated by CIRCA's (print-latex-for-globals)~%")
    (print-latex-description
                (sort-by-symbol-name (find-labeled-globals "[MEU]"))
                outstream 'variable "[MEU]")
    (print-emacs-latex-block outstream)))

;;; -------------------------------------------------------------------------
(defun print-latex-for-debug-list ()
  (with-open-file (outstream (merge-pathnames *docpath* "circa-debug-list") :direction :output
                   :if-exists :supersede)
    (format outstream "%% Autogenerated by CIRCA's (print-latex-for-debug-list)~%")
    (print-latex-description
                (sort-by-symbol-name *debug-list-values*)
                outstream 'constant)
    (print-emacs-latex-block outstream)))

;;; -------------------------------------------------------------------------
(defun print-latex-for-modes ()
  (with-open-file (outstream (merge-pathnames *docpath* "circa-search-mode") :direction :output
                   :if-exists :supersede)
    (format outstream "%% Autogenerated by CIRCA's (print-latex-for-modes)~%")
    (format outstream "\\begin{verbatim}~%")
    (let ((*standard-output* outstream)) (set-search-mode :help))
    (format outstream "\\end{verbatim}~%")
    (print-emacs-latex-block outstream)
  )
  (with-open-file (outstream (merge-pathnames *docpath* "circa-verifier-mode") :direction :output
                   :if-exists :supersede)
    (format outstream "%% Autogenerated by CIRCA's (print-latex-for-modes)~%")
    (format outstream "\\begin{verbatim}~%")
    (let ((*standard-output* outstream)) (set-verifier-mode :help))
    (format outstream "\\end{verbatim}~%")
    (print-emacs-latex-block outstream)
  )
)

;;; -------------------------------------------------------------------------
;; this stuff doesnt actually work right b/c verbatim cannot be in
;; any argument cmds, incld newcommand.  So you cannot do this to put
;; all the doc stuff into one file, it works better as done already.

;(defun print-latex-macro-begin (name &optional (stream t))
;  (format stream "\\newcommand{~A}{\\begin{quote}\\begin{verbatim}~%"
;       name))
;
;;;; -------------------------------------------------------------------------
;(defun print-latex-macro-end (&optional (stream t))
;  (format stream "\\end{verbatim}\\end{quote}}~%"))
;
;;;; -------------------------------------------------------------------------
;;;; -------------------------------------------------------------------------
;(defun print-latex-for-doc ()
;  (with-open-file (outstream "circa-doc-macros.tex" :direction :output
;                   :if-exists :supersede)
;    (let ((*standard-output* outstream))
;
;       (format t "%% Autogenerated by CIRCA's (print-latex-for-doc) in amp/latex.lisp~%")
;
;       (print-latex-macro-begin "search-mode-doc")
;       (set-search-mode :help)
;       (print-latex-macro-end)
;
;       (print-latex-macro-begin "verifier-mode-doc")
;       (set-verifier-mode :help)
;       (print-latex-macro-end)
;
;
;)))

(defun print-latex ()
  "Create all of the CIRCA-wide latex files."
;  (print-latex-for-globals)
  (print-latex-for-debug-list)
;  (print-latex-for-modes)
)
  

(print-latex)
