# Hey EMACS, this should be in -*- perl -*- mode
# ------------------------------------------------------------
# COPYRIGHT START
# Copyright (c) 2014, Smart Information Flow Technologies (SIFT).
# COPYRIGHT END
# ------------------------------------------------------------

use PRT::StrictLineComparo;

# This test verifies various configurations of the PRT comparison
# capability.
#
# Test specification hash reference -- The name of the variable is not
# important, EXCEPT that it must be "returned" by this file; i.e. it
# must be the the last reference in the file
$test = {
  # Name: single-word (no spaces) name of the test
  # Default: basename of filename sans .prt file extension
  # name => "sample",

  # Description: arbitrary text for human consumption only
  # Default: "<no-description>"
  description => "verifies PRT comparison functionality",

  # Keywords: arbitrary list of key words by which can be used to
  #    filter the tests when running or showing results, etc...
  # Default: [ ] - empty list
  keywords => [ qw / prt test-specification comparo / ],

  # DefaultIgnore: if true, will skip this test unless either:
  #   a) the filename or test-name is explicitly listed on the command line
  #   b) the `--all` argument is given to prt
  # Default: undef/0/false
  # defaultIgnore => 1,

  # Test-Harness Includes: array ref of *.inc files to include in ALL
  #    agents, presumably needed as part of the test framework.
  # Default: [ ] - empty list
  # includes => [ "test-harness.inc" ],

  # Inter-Agent Delay: delay (in seconds) between each agent startup
  # Default: 0 (seconds)
  # agent_delay => 1,

  # Agents: Array-ref of agents, each of which MUST specify:
  #  - name: PRS name of the agent, without spaces
  #  - inc:  array ref of include files
  agents => [
      {
## FIXME DJM not really a default test; anymore; that should be linecomparo
        name         => "default",
        description  => "fact comparison: checks facts, ignores pointers, user-trace-start-time, and start-time",
        command   => [ "bash", "-c", "echo this line ignored; echo 0 Posting the fact: \\(fact1 true\\); echo 0 Posting the goal: \\(goal1 `date +%Y%m%d-%H%M%S`\\); echo 0 Posting the fact: \\(fact2 \\<Op_instance 0x`date +%Y%m%d%H%M%S`\\>\\); echo 0 Posting the fact: \\(user-trace-start-time `date +%Y%m%d%H%M%S`\\); echo 0 Posting the fact: \\(start-time `date +%Y%m%d%H%M%S`\\);" ],
        comparo      => new PRT::PRSFactComparo(show_comparisons => 0),
      },
      {
        name         => "goals",
        description  => "default goal comparison: broken...ignores....really stupid?",
        command   => [ "bash", "-c", "echo 0 Posting the goal: \\(goal1 `date +%Y%m%d-%H%M%S`\\);" ],
        #comparo      => new PRT::PRSGoalComparo(show_comparisons => 1),
        comparo      => undef
      },
      {
        name         => "default_key_fact",
        description  => "comparison with default key_fact, should be verbatim.",
        command   => [ "bash", "-c", "echo 0 Posting the fact: \\(fact-1 true\\); echo Note that the comparo matches everything verbatim.;" ],
        comparo      => new PRT::LineComparo(
            # show_comparisons => 2,
            ),
      },
      {
        name         => "undef_key_fact",
        description  => "comparison with undef key_fact, should skip entire comparison.",
        command   => [ "bash", "-c", "echo 0 Posting the fact: \\(fact-`date +%Y%m%d-%H%M%S` true\\);" ],
        comparo      => new PRT::LineComparo(
            # show_comparisons => 2,
            key_fact_regexp  => undef,
            ),
      },
      {
        name         => "line_comparo",
        description  => "case insensitive comparison with line comparo, which can have extra result lines.", 
        command      => [ "bash", "-c", "echo -e 'one\ntwo\nthree'" ],
        comparo      => new PRT::LineComparo(),
        #comparo      => new PRT::StrictLineComparo(),
      },
      {
        name         => "line_comparo_nocase",
        description  => "case sensitive comparison with line comparo, which can have extra result lines.", 
        command      => [ "bash", "-c", "echo -e 'one\ntwo\nthree'" ],
        comparo      => new PRT::LineComparo(case_sensitive=>0),
        #comparo      => new PRT::LineComparo(),
      },
      {
        name         => "strict_line_comparo",
        description  => "comparison with strict line comparo, which must match all lines in both rubric and results.",
        command      => [ "bash", "-c", "echo -e 'one\ntwo\nthree'" ],
        comparo      => new PRT::StrictLineComparo(),
      },
      {
        name         => "strict_line_comparo_nocase",
        description  => "case insensitive comparison with strict line comparo, which must match all lines in both rubric and results.",
        command      => [ "bash", "-c", "echo -e 'one\ntwo\nthree'" ],
        comparo      => new PRT::StrictLineComparo(case_sensitive=>0),
      },
    ]
  };

# you could put other code here, but not sure what that would serve.

# Always end with a reference to the test specification hash reference.
$test;
